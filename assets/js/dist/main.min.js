if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");+function(t){"use strict";var e=t.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1==e[0]&&9==e[1]&&e[2]<1||e[0]>3)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4")}(jQuery),function(t){"use strict";function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var i in e)if(void 0!==t.style[i])return{end:e[i]};return!1}t.fn.emulateTransitionEnd=function(e){var i=!1,o=this;t(this).one("bsTransitionEnd",function(){i=!0});var n=function(){i||t(o).trigger(t.support.transition.end)};return setTimeout(n,e),this},t(function(){t.support.transition=e(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){if(t(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}})})}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var i=t(this),n=i.data("bs.alert");n||i.data("bs.alert",n=new o(this)),"string"==typeof e&&n[e].call(i)})}var i='[data-dismiss="alert"]',o=function(e){t(e).on("click",i,this.close)};o.VERSION="3.3.7",o.TRANSITION_DURATION=150,o.prototype.close=function(e){function i(){a.detach().trigger("closed.bs.alert").remove()}var n=t(this),s=n.attr("data-target");s||(s=n.attr("href"),s=s&&s.replace(/.*(?=#[^\s]*$)/,""));var a=t("#"===s?[]:s);e&&e.preventDefault(),a.length||(a=n.closest(".alert")),a.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(a.removeClass("in"),t.support.transition&&a.hasClass("fade")?a.one("bsTransitionEnd",i).emulateTransitionEnd(o.TRANSITION_DURATION):i())};var n=t.fn.alert;t.fn.alert=e,t.fn.alert.Constructor=o,t.fn.alert.noConflict=function(){return t.fn.alert=n,this},t(document).on("click.bs.alert.data-api",i,o.prototype.close)}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.button"),s="object"==typeof e&&e;n||o.data("bs.button",n=new i(this,s)),"toggle"==e?n.toggle():e&&n.setState(e)})}var i=function(e,o){this.$element=t(e),this.options=t.extend({},i.DEFAULTS,o),this.isLoading=!1};i.VERSION="3.3.7",i.DEFAULTS={loadingText:"loading..."},i.prototype.setState=function(e){var i="disabled",o=this.$element,n=o.is("input")?"val":"html",s=o.data();e+="Text",null==s.resetText&&o.data("resetText",o[n]()),setTimeout(t.proxy(function(){o[n](null==s[e]?this.options[e]:s[e]),"loadingText"==e?(this.isLoading=!0,o.addClass(i).attr(i,i).prop(i,!0)):this.isLoading&&(this.isLoading=!1,o.removeClass(i).removeAttr(i).prop(i,!1))},this),0)},i.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var i=this.$element.find("input");"radio"==i.prop("type")?(i.prop("checked")&&(t=!1),e.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==i.prop("type")&&(i.prop("checked")!==this.$element.hasClass("active")&&(t=!1),this.$element.toggleClass("active")),i.prop("checked",this.$element.hasClass("active")),t&&i.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var o=t.fn.button;t.fn.button=e,t.fn.button.Constructor=i,t.fn.button.noConflict=function(){return t.fn.button=o,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(i){var o=t(i.target).closest(".btn");e.call(o,"toggle"),t(i.target).is('input[type="radio"], input[type="checkbox"]')||(i.preventDefault(),o.is("input,button")?o.trigger("focus"):o.find("input:visible,button:visible").first().trigger("focus"))}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(e){t(e.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(e.type))})}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.carousel"),s=t.extend({},i.DEFAULTS,o.data(),"object"==typeof e&&e),a="string"==typeof e?e:s.slide;n||o.data("bs.carousel",n=new i(this,s)),"number"==typeof e?n.to(e):a?n[a]():s.interval&&n.pause().cycle()})}var i=function(e,i){this.$element=t(e),this.$indicators=this.$element.find(".carousel-indicators"),this.options=i,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",t.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};i.VERSION="3.3.7",i.TRANSITION_DURATION=600,i.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},i.prototype.keydown=function(t){if(!/input|textarea/i.test(t.target.tagName)){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()}},i.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},i.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},i.prototype.getItemForDirection=function(t,e){var i=this.getItemIndex(e);if(("prev"==t&&0===i||"next"==t&&i==this.$items.length-1)&&!this.options.wrap)return e;var o="prev"==t?-1:1,n=(i+o)%this.$items.length;return this.$items.eq(n)},i.prototype.to=function(t){var e=this,i=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(t>this.$items.length-1||t<0))return this.sliding?this.$element.one("slid.bs.carousel",function(){e.to(t)}):i==t?this.pause().cycle():this.slide(t>i?"next":"prev",this.$items.eq(t))},i.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},i.prototype.next=function(){if(!this.sliding)return this.slide("next")},i.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},i.prototype.slide=function(e,o){var n=this.$element.find(".item.active"),s=o||this.getItemForDirection(e,n),a=this.interval,r="next"==e?"left":"right",l=this;if(s.hasClass("active"))return this.sliding=!1;var h=s[0],d=t.Event("slide.bs.carousel",{relatedTarget:h,direction:r});if(this.$element.trigger(d),!d.isDefaultPrevented()){if(this.sliding=!0,a&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var p=t(this.$indicators.children()[this.getItemIndex(s)]);p&&p.addClass("active")}var c=t.Event("slid.bs.carousel",{relatedTarget:h,direction:r});return t.support.transition&&this.$element.hasClass("slide")?(s.addClass(e),s[0].offsetWidth,n.addClass(r),s.addClass(r),n.one("bsTransitionEnd",function(){s.removeClass([e,r].join(" ")).addClass("active"),n.removeClass(["active",r].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger(c)},0)}).emulateTransitionEnd(i.TRANSITION_DURATION)):(n.removeClass("active"),s.addClass("active"),this.sliding=!1,this.$element.trigger(c)),a&&this.cycle(),this}};var o=t.fn.carousel;t.fn.carousel=e,t.fn.carousel.Constructor=i,t.fn.carousel.noConflict=function(){return t.fn.carousel=o,this};var n=function(i){var o,n=t(this),s=t(n.attr("data-target")||(o=n.attr("href"))&&o.replace(/.*(?=#[^\s]+$)/,""));if(s.hasClass("carousel")){var a=t.extend({},s.data(),n.data()),r=n.attr("data-slide-to");r&&(a.interval=!1),e.call(s,a),r&&s.data("bs.carousel").to(r),i.preventDefault()}};t(document).on("click.bs.carousel.data-api","[data-slide]",n).on("click.bs.carousel.data-api","[data-slide-to]",n),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var i=t(this);e.call(i,i.data())})})}(jQuery),function(t){"use strict";function e(e){var i,o=e.attr("data-target")||(i=e.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,"");return t(o)}function i(e){return this.each(function(){var i=t(this),n=i.data("bs.collapse"),s=t.extend({},o.DEFAULTS,i.data(),"object"==typeof e&&e);!n&&s.toggle&&/show|hide/.test(e)&&(s.toggle=!1),n||i.data("bs.collapse",n=new o(this,s)),"string"==typeof e&&n[e]()})}var o=function(e,i){this.$element=t(e),this.options=t.extend({},o.DEFAULTS,i),this.$trigger=t('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};o.VERSION="3.3.7",o.TRANSITION_DURATION=350,o.DEFAULTS={toggle:!0},o.prototype.dimension=function(){return this.$element.hasClass("width")?"width":"height"},o.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var e,n=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(n&&n.length&&(e=n.data("bs.collapse"))&&e.transitioning)){var s=t.Event("show.bs.collapse");if(this.$element.trigger(s),!s.isDefaultPrevented()){n&&n.length&&(i.call(n,"hide"),e||n.data("bs.collapse",null));var a=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[a](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var r=function(){this.$element.removeClass("collapsing").addClass("collapse in")[a](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return r.call(this);var l=t.camelCase(["scroll",a].join("-"));this.$element.one("bsTransitionEnd",t.proxy(r,this)).emulateTransitionEnd(o.TRANSITION_DURATION)[a](this.$element[0][l])}}}},o.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var i=this.dimension();this.$element[i](this.$element[i]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var n=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};if(!t.support.transition)return n.call(this);this.$element[i](0).one("bsTransitionEnd",t.proxy(n,this)).emulateTransitionEnd(o.TRANSITION_DURATION)}}},o.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},o.prototype.getParent=function(){return t(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(t.proxy(function(i,o){var n=t(o);this.addAriaAndCollapsedClass(e(n),n)},this)).end()},o.prototype.addAriaAndCollapsedClass=function(t,e){var i=t.hasClass("in");t.attr("aria-expanded",i),e.toggleClass("collapsed",!i).attr("aria-expanded",i)};var n=t.fn.collapse;t.fn.collapse=i,t.fn.collapse.Constructor=o,t.fn.collapse.noConflict=function(){return t.fn.collapse=n,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(o){var n=t(this);n.attr("data-target")||o.preventDefault();var s=e(n),a=s.data("bs.collapse"),r=a?"toggle":n.data();i.call(s,r)})}(jQuery),function(t){"use strict";function e(e){var i=e.attr("data-target");i||(i=e.attr("href"),i=i&&/#[A-Za-z]/.test(i)&&i.replace(/.*(?=#[^\s]*$)/,""));var o=i&&t(i);return o&&o.length?o:e.parent()}function i(i){i&&3===i.which||(t(n).remove(),t(s).each(function(){var o=t(this),n=e(o),s={relatedTarget:this};n.hasClass("open")&&(i&&"click"==i.type&&/input|textarea/i.test(i.target.tagName)&&t.contains(n[0],i.target)||(n.trigger(i=t.Event("hide.bs.dropdown",s)),i.isDefaultPrevented()||(o.attr("aria-expanded","false"),n.removeClass("open").trigger(t.Event("hidden.bs.dropdown",s)))))}))}function o(e){return this.each(function(){var i=t(this),o=i.data("bs.dropdown");o||i.data("bs.dropdown",o=new a(this)),"string"==typeof e&&o[e].call(i)})}var n=".dropdown-backdrop",s='[data-toggle="dropdown"]',a=function(e){t(e).on("click.bs.dropdown",this.toggle)};a.VERSION="3.3.7",a.prototype.toggle=function(o){var n=t(this);if(!n.is(".disabled, :disabled")){var s=e(n),a=s.hasClass("open");if(i(),!a){"ontouchstart"in document.documentElement&&!s.closest(".navbar-nav").length&&t(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(t(this)).on("click",i);var r={relatedTarget:this};if(s.trigger(o=t.Event("show.bs.dropdown",r)),o.isDefaultPrevented())return;n.trigger("focus").attr("aria-expanded","true"),s.toggleClass("open").trigger(t.Event("shown.bs.dropdown",r))}return!1}},a.prototype.keydown=function(i){if(/(38|40|27|32)/.test(i.which)&&!/input|textarea/i.test(i.target.tagName)){var o=t(this);if(i.preventDefault(),i.stopPropagation(),!o.is(".disabled, :disabled")){var n=e(o),a=n.hasClass("open");if(!a&&27!=i.which||a&&27==i.which)return 27==i.which&&n.find(s).trigger("focus"),o.trigger("click");var r=n.find(".dropdown-menu li:not(.disabled):visible a");if(r.length){var l=r.index(i.target);38==i.which&&l>0&&l--,40==i.which&&l<r.length-1&&l++,~l||(l=0),r.eq(l).trigger("focus")}}}};var r=t.fn.dropdown;t.fn.dropdown=o,t.fn.dropdown.Constructor=a,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=r,this},t(document).on("click.bs.dropdown.data-api",i).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",s,a.prototype.toggle).on("keydown.bs.dropdown.data-api",s,a.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",a.prototype.keydown)}(jQuery),function(t){"use strict";function e(e,o){return this.each(function(){var n=t(this),s=n.data("bs.modal"),a=t.extend({},i.DEFAULTS,n.data(),"object"==typeof e&&e);s||n.data("bs.modal",s=new i(this,a)),"string"==typeof e?s[e](o):a.show&&s.show(o)})}var i=function(e,i){this.options=i,this.$body=t(document.body),this.$element=t(e),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};i.VERSION="3.3.7",i.TRANSITION_DURATION=300,i.BACKDROP_TRANSITION_DURATION=150,i.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},i.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},i.prototype.show=function(e){var o=this,n=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(n),this.isShown||n.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){o.$element.one("mouseup.dismiss.bs.modal",function(e){t(e.target).is(o.$element)&&(o.ignoreBackdropClick=!0)})}),this.backdrop(function(){var n=t.support.transition&&o.$element.hasClass("fade");o.$element.parent().length||o.$element.appendTo(o.$body),o.$element.show().scrollTop(0),o.adjustDialog(),n&&o.$element[0].offsetWidth,o.$element.addClass("in"),o.enforceFocus();var s=t.Event("shown.bs.modal",{relatedTarget:e});n?o.$dialog.one("bsTransitionEnd",function(){o.$element.trigger("focus").trigger(s)}).emulateTransitionEnd(i.TRANSITION_DURATION):o.$element.trigger("focus").trigger(s)}))},i.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(i.TRANSITION_DURATION):this.hideModal())},i.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){document===t.target||this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},i.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},i.prototype.resize=function(){this.isShown?t(window).on("resize.bs.modal",t.proxy(this.handleUpdate,this)):t(window).off("resize.bs.modal")},i.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$body.removeClass("modal-open"),t.resetAdjustments(),t.resetScrollbar(),t.$element.trigger("hidden.bs.modal")})},i.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},i.prototype.backdrop=function(e){var o=this,n=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var s=t.support.transition&&n;if(this.$backdrop=t(document.createElement("div")).addClass("modal-backdrop "+n).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){if(this.ignoreBackdropClick)return void(this.ignoreBackdropClick=!1);t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide())},this)),s&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;s?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(i.BACKDROP_TRANSITION_DURATION):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var a=function(){o.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",a).emulateTransitionEnd(i.BACKDROP_TRANSITION_DURATION):a()}else e&&e()},i.prototype.handleUpdate=function(){this.adjustDialog()},i.prototype.adjustDialog=function(){var t=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&t?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!t?this.scrollbarWidth:""})},i.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},i.prototype.checkScrollbar=function(){var t=window.innerWidth;if(!t){var e=document.documentElement.getBoundingClientRect();t=e.right-Math.abs(e.left)}this.bodyIsOverflowing=document.body.clientWidth<t,this.scrollbarWidth=this.measureScrollbar()},i.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",t+this.scrollbarWidth)},i.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},i.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var o=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=i,t.fn.modal.noConflict=function(){return t.fn.modal=o,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(i){var o=t(this),n=o.attr("href"),s=t(o.attr("data-target")||n&&n.replace(/.*(?=#[^\s]+$)/,"")),a=s.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(n)&&n},s.data(),o.data());o.is("a")&&i.preventDefault(),s.one("show.bs.modal",function(t){t.isDefaultPrevented()||s.one("hidden.bs.modal",function(){o.is(":visible")&&o.trigger("focus")})}),e.call(s,a,this)})}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.tooltip"),s="object"==typeof e&&e;!n&&/destroy|hide/.test(e)||(n||o.data("bs.tooltip",n=new i(this,s)),"string"==typeof e&&n[e]())})}var i=function(t,e){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",t,e)};i.VERSION="3.3.7",i.TRANSITION_DURATION=150,i.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},i.prototype.init=function(e,i,o){if(this.enabled=!0,this.type=e,this.$element=t(i),this.options=this.getOptions(o),this.$viewport=this.options.viewport&&t(t.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var n=this.options.trigger.split(" "),s=n.length;s--;){var a=n[s];if("click"==a)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=a){var r="hover"==a?"mouseenter":"focusin",l="hover"==a?"mouseleave":"focusout";this.$element.on(r+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},i.prototype.getDefaults=function(){return i.DEFAULTS},i.prototype.getOptions=function(e){return e=t.extend({},this.getDefaults(),this.$element.data(),e),e.delay&&"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e},i.prototype.getDelegateOptions=function(){var e={},i=this.getDefaults();return this._options&&t.each(this._options,function(t,o){i[t]!=o&&(e[t]=o)}),e},i.prototype.enter=function(e){var i=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return i||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i)),e instanceof t.Event&&(i.inState["focusin"==e.type?"focus":"hover"]=!0),i.tip().hasClass("in")||"in"==i.hoverState?void(i.hoverState="in"):(clearTimeout(i.timeout),i.hoverState="in",i.options.delay&&i.options.delay.show?void(i.timeout=setTimeout(function(){"in"==i.hoverState&&i.show()},i.options.delay.show)):i.show())},i.prototype.isInStateTrue=function(){for(var t in this.inState)if(this.inState[t])return!0;return!1},i.prototype.leave=function(e){var i=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);if(i||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i)),e instanceof t.Event&&(i.inState["focusout"==e.type?"focus":"hover"]=!1),!i.isInStateTrue()){if(clearTimeout(i.timeout),i.hoverState="out",!i.options.delay||!i.options.delay.hide)return i.hide();i.timeout=setTimeout(function(){"out"==i.hoverState&&i.hide()},i.options.delay.hide)}},i.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var o=t.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!o)return;var n=this,s=this.tip(),a=this.getUID(this.type);this.setContent(),s.attr("id",a),this.$element.attr("aria-describedby",a),this.options.animation&&s.addClass("fade");var r="function"==typeof this.options.placement?this.options.placement.call(this,s[0],this.$element[0]):this.options.placement,l=/\s?auto?\s?/i,h=l.test(r);h&&(r=r.replace(l,"")||"top"),s.detach().css({top:0,left:0,display:"block"}).addClass(r).data("bs."+this.type,this),this.options.container?s.appendTo(this.options.container):s.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var d=this.getPosition(),p=s[0].offsetWidth,c=s[0].offsetHeight;if(h){var f=r,u=this.getPosition(this.$viewport);r="bottom"==r&&d.bottom+c>u.bottom?"top":"top"==r&&d.top-c<u.top?"bottom":"right"==r&&d.right+p>u.width?"left":"left"==r&&d.left-p<u.left?"right":r,s.removeClass(f).addClass(r)}var g=this.getCalculatedOffset(r,d,p,c);this.applyPlacement(g,r);var m=function(){var t=n.hoverState;n.$element.trigger("shown.bs."+n.type),n.hoverState=null,"out"==t&&n.leave(n)};t.support.transition&&this.$tip.hasClass("fade")?s.one("bsTransitionEnd",m).emulateTransitionEnd(i.TRANSITION_DURATION):m()}},i.prototype.applyPlacement=function(e,i){var o=this.tip(),n=o[0].offsetWidth,s=o[0].offsetHeight,a=parseInt(o.css("margin-top"),10),r=parseInt(o.css("margin-left"),10);isNaN(a)&&(a=0),isNaN(r)&&(r=0),e.top+=a,e.left+=r,t.offset.setOffset(o[0],t.extend({using:function(t){o.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),o.addClass("in");var l=o[0].offsetWidth,h=o[0].offsetHeight;"top"==i&&h!=s&&(e.top=e.top+s-h);var d=this.getViewportAdjustedDelta(i,e,l,h);d.left?e.left+=d.left:e.top+=d.top;var p=/top|bottom/.test(i),c=p?2*d.left-n+l:2*d.top-s+h,f=p?"offsetWidth":"offsetHeight";o.offset(e),this.replaceArrow(c,o[0][f],p)},i.prototype.replaceArrow=function(t,e,i){this.arrow().css(i?"left":"top",50*(1-t/e)+"%").css(i?"top":"left","")},i.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},i.prototype.hide=function(e){function o(){"in"!=n.hoverState&&s.detach(),n.$element&&n.$element.removeAttr("aria-describedby").trigger("hidden.bs."+n.type),e&&e()}var n=this,s=t(this.$tip),a=t.Event("hide.bs."+this.type);if(this.$element.trigger(a),!a.isDefaultPrevented())return s.removeClass("in"),t.support.transition&&s.hasClass("fade")?s.one("bsTransitionEnd",o).emulateTransitionEnd(i.TRANSITION_DURATION):o(),this.hoverState=null,this},i.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},i.prototype.hasContent=function(){return this.getTitle()},i.prototype.getPosition=function(e){e=e||this.$element;var i=e[0],o="BODY"==i.tagName,n=i.getBoundingClientRect();null==n.width&&(n=t.extend({},n,{width:n.right-n.left,height:n.bottom-n.top}));var s=window.SVGElement&&i instanceof window.SVGElement,a=o?{top:0,left:0}:s?null:e.offset(),r={scroll:o?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop()},l=o?{width:t(window).width(),height:t(window).height()}:null;return t.extend({},n,r,l,a)},i.prototype.getCalculatedOffset=function(t,e,i,o){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-i/2}:"top"==t?{top:e.top-o,left:e.left+e.width/2-i/2}:"left"==t?{top:e.top+e.height/2-o/2,left:e.left-i}:{top:e.top+e.height/2-o/2,left:e.left+e.width}},i.prototype.getViewportAdjustedDelta=function(t,e,i,o){var n={top:0,left:0};if(!this.$viewport)return n;var s=this.options.viewport&&this.options.viewport.padding||0,a=this.getPosition(this.$viewport);if(/right|left/.test(t)){var r=e.top-s-a.scroll,l=e.top+s-a.scroll+o;r<a.top?n.top=a.top-r:l>a.top+a.height&&(n.top=a.top+a.height-l)}else{var h=e.left-s,d=e.left+s+i;h<a.left?n.left=a.left-h:d>a.right&&(n.left=a.left+a.width-d)}return n},i.prototype.getTitle=function(){var t=this.$element,e=this.options;return t.attr("data-original-title")||("function"==typeof e.title?e.title.call(t[0]):e.title)},i.prototype.getUID=function(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},i.prototype.tip=function(){if(!this.$tip&&(this.$tip=t(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},i.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},i.prototype.enable=function(){this.enabled=!0},i.prototype.disable=function(){this.enabled=!1},i.prototype.toggleEnabled=function(){this.enabled=!this.enabled},i.prototype.toggle=function(e){var i=this;e&&((i=t(e.currentTarget).data("bs."+this.type))||(i=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,i))),e?(i.inState.click=!i.inState.click,i.isInStateTrue()?i.enter(i):i.leave(i)):i.tip().hasClass("in")?i.leave(i):i.enter(i)},i.prototype.destroy=function(){var t=this;clearTimeout(this.timeout),this.hide(function(){t.$element.off("."+t.type).removeData("bs."+t.type),t.$tip&&t.$tip.detach(),t.$tip=null,t.$arrow=null,t.$viewport=null,t.$element=null})};var o=t.fn.tooltip;t.fn.tooltip=e,t.fn.tooltip.Constructor=i,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=o,this}}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.popover"),s="object"==typeof e&&e;!n&&/destroy|hide/.test(e)||(n||o.data("bs.popover",n=new i(this,s)),"string"==typeof e&&n[e]())})}var i=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");i.VERSION="3.3.7",i.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),i.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),i.prototype.constructor=i,i.prototype.getDefaults=function(){return i.DEFAULTS},i.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),i=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof i?"html":"append":"text"](i),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},i.prototype.hasContent=function(){return this.getTitle()||this.getContent()},i.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},i.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var o=t.fn.popover;t.fn.popover=e,t.fn.popover.Constructor=i,t.fn.popover.noConflict=function(){return t.fn.popover=o,this}}(jQuery),function(t){"use strict";function e(i,o){this.$body=t(document.body),this.$scrollElement=t(t(i).is(document.body)?window:i),this.options=t.extend({},e.DEFAULTS,o),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",t.proxy(this.process,this)),this.refresh(),this.process()}function i(i){return this.each(function(){var o=t(this),n=o.data("bs.scrollspy"),s="object"==typeof i&&i;n||o.data("bs.scrollspy",n=new e(this,s)),"string"==typeof i&&n[i]()})}e.VERSION="3.3.7",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e=this,i="offset",o=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),t.isWindow(this.$scrollElement[0])||(i="position",o=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var e=t(this),n=e.data("target")||e.attr("href"),s=/^#./.test(n)&&t(n);return s&&s.length&&s.is(":visible")&&[[s[i]().top+o,n]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){e.offsets.push(this[0]),e.targets.push(this[1])})},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,i=this.getScrollHeight(),o=this.options.offset+i-this.$scrollElement.height(),n=this.offsets,s=this.targets,a=this.activeTarget;if(this.scrollHeight!=i&&this.refresh(),e>=o)return a!=(t=s[s.length-1])&&this.activate(t);if(a&&e<n[0])return this.activeTarget=null,this.clear();for(t=n.length;t--;)a!=s[t]&&e>=n[t]&&(void 0===n[t+1]||e<n[t+1])&&this.activate(s[t])},e.prototype.activate=function(e){
this.activeTarget=e,this.clear();var i=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',o=t(i).parents("li").addClass("active");o.parent(".dropdown-menu").length&&(o=o.closest("li.dropdown").addClass("active")),o.trigger("activate.bs.scrollspy")},e.prototype.clear=function(){t(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var o=t.fn.scrollspy;t.fn.scrollspy=i,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=o,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);i.call(e,e.data())})})}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.tab");n||o.data("bs.tab",n=new i(this)),"string"==typeof e&&n[e]()})}var i=function(e){this.element=t(e)};i.VERSION="3.3.7",i.TRANSITION_DURATION=150,i.prototype.show=function(){var e=this.element,i=e.closest("ul:not(.dropdown-menu)"),o=e.data("target");if(o||(o=e.attr("href"),o=o&&o.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var n=i.find(".active:last a"),s=t.Event("hide.bs.tab",{relatedTarget:e[0]}),a=t.Event("show.bs.tab",{relatedTarget:n[0]});if(n.trigger(s),e.trigger(a),!a.isDefaultPrevented()&&!s.isDefaultPrevented()){var r=t(o);this.activate(e.closest("li"),i),this.activate(r,r.parent(),function(){n.trigger({type:"hidden.bs.tab",relatedTarget:e[0]}),e.trigger({type:"shown.bs.tab",relatedTarget:n[0]})})}}},i.prototype.activate=function(e,o,n){function s(){a.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),e.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),r?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu").length&&e.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),n&&n()}var a=o.find("> .active"),r=n&&t.support.transition&&(a.length&&a.hasClass("fade")||!!o.find("> .fade").length);a.length&&r?a.one("bsTransitionEnd",s).emulateTransitionEnd(i.TRANSITION_DURATION):s(),a.removeClass("in")};var o=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=i,t.fn.tab.noConflict=function(){return t.fn.tab=o,this};var n=function(i){i.preventDefault(),e.call(t(this),"show")};t(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',n).on("click.bs.tab.data-api",'[data-toggle="pill"]',n)}(jQuery),function(t){"use strict";function e(e){return this.each(function(){var o=t(this),n=o.data("bs.affix"),s="object"==typeof e&&e;n||o.data("bs.affix",n=new i(this,s)),"string"==typeof e&&n[e]()})}var i=function(e,o){this.options=t.extend({},i.DEFAULTS,o),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};i.VERSION="3.3.7",i.RESET="affix affix-top affix-bottom",i.DEFAULTS={offset:0,target:window},i.prototype.getState=function(t,e,i,o){var n=this.$target.scrollTop(),s=this.$element.offset(),a=this.$target.height();if(null!=i&&"top"==this.affixed)return n<i&&"top";if("bottom"==this.affixed)return null!=i?!(n+this.unpin<=s.top)&&"bottom":!(n+a<=t-o)&&"bottom";var r=null==this.affixed,l=r?n:s.top,h=r?a:e;return null!=i&&n<=i?"top":null!=o&&l+h>=t-o&&"bottom"},i.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(i.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},i.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},i.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=this.$element.height(),o=this.options.offset,n=o.top,s=o.bottom,a=Math.max(t(document).height(),t(document.body).height());"object"!=typeof o&&(s=n=o),"function"==typeof n&&(n=o.top(this.$element)),"function"==typeof s&&(s=o.bottom(this.$element));var r=this.getState(a,e,n,s);if(this.affixed!=r){null!=this.unpin&&this.$element.css("top","");var l="affix"+(r?"-"+r:""),h=t.Event(l+".bs.affix");if(this.$element.trigger(h),h.isDefaultPrevented())return;this.affixed=r,this.unpin="bottom"==r?this.getPinnedOffset():null,this.$element.removeClass(i.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}"bottom"==r&&this.$element.offset({top:a-e-s})}};var o=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=i,t.fn.affix.noConflict=function(){return t.fn.affix=o,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var i=t(this),o=i.data();o.offset=o.offset||{},null!=o.offsetBottom&&(o.offset.bottom=o.offsetBottom),null!=o.offsetTop&&(o.offset.top=o.offsetTop),e.call(i,o)})})}(jQuery);
"use strict";!function(t,a,e){"function"==typeof define&&define.amd?define(["jquery"],t):"object"==typeof exports?module.exports=t(require("jquery")):t(a||e)}(function(t){var a=function(a,e,n){var s={invalid:[],getCaret:function(){try{var t,e=0,n=a.get(0),r=document.selection,o=n.selectionStart;return r&&-1===navigator.appVersion.indexOf("MSIE 10")?(t=r.createRange(),t.moveStart("character",-s.val().length),e=t.text.length):(o||"0"===o)&&(e=o),e}catch(t){}},setCaret:function(t){try{if(a.is(":focus")){var e,n=a.get(0);n.setSelectionRange?n.setSelectionRange(t,t):(e=n.createTextRange(),e.collapse(!0),e.moveEnd("character",t),e.moveStart("character",t),e.select())}}catch(t){}},events:function(){a.on("keydown.mask",function(t){a.data("mask-keycode",t.keyCode||t.which),a.data("mask-previus-value",a.val()),a.data("mask-previus-caret-pos",s.getCaret()),s.maskDigitPosMapOld=s.maskDigitPosMap}).on(t.jMaskGlobals.useInput?"input.mask":"keyup.mask",s.behaviour).on("paste.mask drop.mask",function(){setTimeout(function(){a.keydown().keyup()},100)}).on("change.mask",function(){a.data("changed",!0)}).on("blur.mask",function(){i===s.val()||a.data("changed")||a.trigger("change"),a.data("changed",!1)}).on("blur.mask",function(){i=s.val()}).on("focus.mask",function(a){!0===n.selectOnFocus&&t(a.target).select()}).on("focusout.mask",function(){n.clearIfNotMatch&&!r.test(s.val())&&s.val("")})},getRegexMask:function(){for(var t,a,n,s,r,i,c=[],l=0;l<e.length;l++)t=o.translation[e.charAt(l)],t?(a=t.pattern.toString().replace(/.{1}$|^.{1}/g,""),n=t.optional,s=t.recursive,s?(c.push(e.charAt(l)),r={digit:e.charAt(l),pattern:a}):c.push(n||s?a+"?":a)):c.push(e.charAt(l).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"));return i=c.join(""),r&&(i=i.replace(new RegExp("("+r.digit+"(.*"+r.digit+")?)"),"($1)?").replace(new RegExp(r.digit,"g"),r.pattern)),new RegExp(i)},destroyEvents:function(){a.off(["input","keydown","keyup","paste","drop","blur","focusout",""].join(".mask "))},val:function(t){var e,n=a.is("input"),s=n?"val":"text";return arguments.length>0?(a[s]()!==t&&a[s](t),e=a):e=a[s](),e},calculateCaretPosition:function(){var t=a.data("mask-previus-value")||"",e=s.getMasked(),n=s.getCaret();if(t!==e){var r=a.data("mask-previus-caret-pos")||0,o=e.length,i=t.length,c=0,l=0,u=0,f=0,k=0;for(k=n;k<o&&s.maskDigitPosMap[k];k++)l++;for(k=n-1;k>=0&&s.maskDigitPosMap[k];k--)c++;for(k=n-1;k>=0;k--)s.maskDigitPosMap[k]&&u++;for(k=r-1;k>=0;k--)s.maskDigitPosMapOld[k]&&f++;if(n>i)n=o;else if(r>=n&&r!==i){if(!s.maskDigitPosMapOld[n]){var v=n;n-=f-u,n-=c,s.maskDigitPosMap[n]&&(n=v)}}else n>r&&(n+=u-f,n+=l)}return n},behaviour:function(e){e=e||window.event,s.invalid=[];var n=a.data("mask-keycode");if(-1===t.inArray(n,o.byPassKeys)){var r=s.getMasked(),i=s.getCaret();return setTimeout(function(){s.setCaret(s.calculateCaretPosition())},10),s.val(r),s.setCaret(i),s.callbacks(e)}},getMasked:function(t,a){var r,i,c=[],l=void 0===a?s.val():a+"",u=0,f=e.length,k=0,v=l.length,d=1,p="push",h=-1,g=0,m=[];n.reverse?(p="unshift",d=-1,r=0,u=f-1,k=v-1,i=function(){return u>-1&&k>-1}):(r=f-1,i=function(){return u<f&&k<v});for(var M;i();){var y=e.charAt(u),b=l.charAt(k),w=o.translation[y];w?(b.match(w.pattern)?(c[p](b),w.recursive&&(-1===h?h=u:u===r&&(u=h-d),r===h&&(u-=d)),u+=d):b===M?(g--,M=void 0):w.optional?(u+=d,k-=d):w.fallback?(c[p](w.fallback),u+=d,k-=d):s.invalid.push({p:k,v:b,e:w.pattern}),k+=d):(t||c[p](y),b===y?(m.push(k),k+=d):(M=y,m.push(k+g),g++),u+=d)}var j=e.charAt(r);f!==v+1||o.translation[j]||c.push(j);var C=c.join("");return s.mapMaskdigitPositions(C,m,v),C},mapMaskdigitPositions:function(t,a,e){var r=n.reverse?t.length-e:0;s.maskDigitPosMap={};for(var o=0;o<a.length;o++)s.maskDigitPosMap[a[o]+r]=1},callbacks:function(t){var r=s.val(),o=r!==i,c=[r,t,a,n],l=function(t,a,e){"function"==typeof n[t]&&a&&n[t].apply(this,e)};l("onChange",!0===o,c),l("onKeyPress",!0===o,c),l("onComplete",r.length===e.length,c),l("onInvalid",s.invalid.length>0,[r,t,a,s.invalid,n])}};a=t(a);var r,o=this,i=s.val();e="function"==typeof e?e(s.val(),void 0,a,n):e,o.mask=e,o.options=n,o.remove=function(){var t=s.getCaret();return s.destroyEvents(),s.val(o.getCleanVal()),s.setCaret(t),a},o.getCleanVal=function(){return s.getMasked(!0)},o.getMaskedVal=function(t){return s.getMasked(!1,t)},o.init=function(i){if(i=i||!1,n=n||{},o.clearIfNotMatch=t.jMaskGlobals.clearIfNotMatch,o.byPassKeys=t.jMaskGlobals.byPassKeys,o.translation=t.extend({},t.jMaskGlobals.translation,n.translation),o=t.extend(!0,{},o,n),r=s.getRegexMask(),i)s.events(),s.val(s.getMasked());else{n.placeholder&&a.attr("placeholder",n.placeholder),a.data("mask")&&a.attr("autocomplete","off");for(var c=0,l=!0;c<e.length;c++){var u=o.translation[e.charAt(c)];if(u&&u.recursive){l=!1;break}}l&&a.attr("maxlength",e.length),s.destroyEvents(),s.events();var f=s.getCaret();s.val(s.getMasked()),s.setCaret(f)}},o.init(!a.is("input"))};t.maskWatchers={};var e=function(){var e=t(this),s={},r=e.attr("data-mask");if(e.attr("data-mask-reverse")&&(s.reverse=!0),e.attr("data-mask-clearifnotmatch")&&(s.clearIfNotMatch=!0),"true"===e.attr("data-mask-selectonfocus")&&(s.selectOnFocus=!0),n(e,r,s))return e.data("mask",new a(this,r,s))},n=function(a,e,n){n=n||{};var s=t(a).data("mask"),r=JSON.stringify,o=t(a).val()||t(a).text();try{return"function"==typeof e&&(e=e(o)),"object"!=typeof s||r(s.options)!==r(n)||s.mask!==e}catch(t){}};t.fn.mask=function(e,s){s=s||{};var r=this.selector,o=t.jMaskGlobals,i=o.watchInterval,c=s.watchInputs||o.watchInputs,l=function(){if(n(this,e,s))return t(this).data("mask",new a(this,e,s))};return t(this).each(l),r&&""!==r&&c&&(clearInterval(t.maskWatchers[r]),t.maskWatchers[r]=setInterval(function(){t(document).find(r).each(l)},i)),this},t.fn.masked=function(t){return this.data("mask").getMaskedVal(t)},t.fn.unmask=function(){return clearInterval(t.maskWatchers[this.selector]),delete t.maskWatchers[this.selector],this.each(function(){var a=t(this).data("mask");a&&a.remove().removeData("mask")})},t.fn.cleanVal=function(){return this.data("mask").getCleanVal()},t.applyDataMask=function(a){a=a||t.jMaskGlobals.maskElements,(a instanceof t?a:t(a)).filter(t.jMaskGlobals.dataMaskAttr).each(e)};var s={maskElements:"input,td,span,div",dataMaskAttr:"*[data-mask]",dataMask:!0,watchInterval:300,watchInputs:!0,useInput:!/Chrome\/[2-4][0-9]|SamsungBrowser/.test(window.navigator.userAgent)&&function(t){var a,e=document.createElement("div");return t="on"+t,a=t in e,a||(e.setAttribute(t,"return;"),a="function"==typeof e[t]),e=null,a}("input"),watchDataMask:!1,byPassKeys:[9,16,17,18,36,37,38,39,40,91],translation:{0:{pattern:/\d/},9:{pattern:/\d/,optional:!0},"#":{pattern:/\d/,recursive:!0},A:{pattern:/[a-zA-Z0-9]/},S:{pattern:/[a-zA-Z]/}}};t.jMaskGlobals=t.jMaskGlobals||{},s=t.jMaskGlobals=t.extend(!0,{},s,t.jMaskGlobals),s.dataMask&&t.applyDataMask(),setInterval(function(){t.jMaskGlobals.watchDataMask&&t.applyDataMask()},s.watchInterval)},window.jQuery,window.Zepto);
!function(e){e(document).ready(function(){a.init(),a.utils()});var a={init:function(){a.oscarMainForms()},utils:function(){e('.checkbox input[type="checkbox"], div[data-type=true_false] .acf-input input[type=checkbox]').on("change",function(a){e(this).is(":checked")?(e(".acf-form-submit input[type=submit]").removeAttr("disabled"),e(this).parent().parent().addClass("selected")):(e(".acf-form-submit input[type=submit]").attr("disabled","disabled"),e(this).parent().parent().removeClass("selected"))})},oscarMainForms:function(){if(e("#acf_inscricoes-oscar-2018").length){e('div[data-name="declaracao"] input[type="checkbox"]').is(":checked")?e('div[data-name="declaracao"] input[type="checkbox"]').parent().parent().addClass("selected"):e(".acf-form-submit input[type=submit]").attr("disabled","disabled"),e("#oscar-add-cast").on("click",function(a){a.preventDefault();var o=e("#nome-elenco"),t=e("#nacionalidade-elenco"),i=""===e("#elenco").val()?"":" | ";if(o.val().length&&t.val().length){e("#elenco").val(e("#elenco").val()+i+o.val()+" ("+t.val()+")"),o.val(""),t.val("");var s=e("#elenco").val(),n=s.split(" | ");e("#cast-holder ul").html(""),e(n).each(function(a,o){var t='<li class="list-group-item"><span>'+o+'</span><a href="!#"><span class="glyphicon glyphicon-remove-sign" aria-hidden="true"></span></a></li>';e("#cast-holder ul").append(t)})}else console.log("Campo vazio")}),e("body").on("click","#cast-holder .list-group .list-group-item a",function(a){a.preventDefault();var o=e("#elenco").val(),t=o.split(" | ");t.splice(t.indexOf(e(this).parent().find("span").text()),1),e("#elenco").val("");for(var i=0,s=t.length;i<s;i++){var n=""===e("#elenco").val()?"":" | ";e("#elenco").val(e("#elenco").val()+n+t[i])}e(this).parent().remove()}),e('div[data-name="data_estreia"] input').mask("00/00/0000");var a=function(e){return 11===e.replace(/\D/g,"").length?"(00) 00000-0000":"(00) 0000-00009"},o={onKeyPress:function(e,o,t,i){t.mask(a.apply({},arguments),i)}};e('div[data-name="empresa_telefone"] input, div[data-name="empresa_fax"] input').mask(a,o),e.each(e('div[data-name="anexos"] table > tbody > tr.acf-row'),function(a,o){e(this).find('.file-wrap .file-info strong[data-name="title"]').addClass("xxx"),""!==e(this).find('.file-wrap .file-info strong[data-name="title"]').text()&&(e(this).find(".file-wrap").show(),e(this).find(".hide-if-value").hide())})}e("#oscar-video-form").length&&(e(document).on("change","#oscar-video",function(a){e(this)[0].files[0]?(e("#oscar-video-name").text(e(this)[0].files[0].name),e("#oscar-video-upload-btn").removeAttr("disabled"),e("#oscar-video-form .video-drag-area").addClass("ready-to-upload")):(e("#oscar-video-name").text(""),e("#oscar-video-upload-btn").attr("disabled","disabled"),e("#oscar-video-form .video-drag-area").removeClass("ready-to-upload"))}),e("#oscar-video-form").on("submit",function(a){a.preventDefault(),e("#oscar-video-form .myprogress").css("width","0"),e("#oscar-video-form .msg").text("");if(""==e("#oscar-video").val())return void alert("Por favor, selecione um arquivo para upload.");var o=new FormData;o.append("oscarVideo",e("#oscar-video")[0].files[0]),o.append("action","upload_oscar_video"),e("#oscar-video-form .msg").text("Upload em progresso, por favor, aguarde..."),e.ajax({url:oscarJS.ajaxurl,data:o,processData:!1,contentType:!1,type:"POST",beforeSend:function(){e("#upload-status").removeClass("hidden")},xhr:function(){var a=new window.XMLHttpRequest;return a.upload.addEventListener("progress",function(a){if(a.lengthComputable){var o=a.loaded/a.total;o=parseInt(100*o),e("#oscar-video-form .myprogress").text(o+"%"),e("#oscar-video-form .myprogress").css("width",o+"%")}},!1),a},success:function(a){e("#oscar-video-form .msg").addClass("success"),e("#oscar-video-form .msg").html(a)}})})),e("#oscar-register-form").length&&e('input[name="cnpj"]').mask("00.000.000/0000-00",{reverse:!0})}}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJvb3RzdHJhcC5qcyIsImpxdWVyeS5tYXNrLmpzIiwibWFpbi5qcyJdLCJuYW1lcyI6WyJqUXVlcnkiLCJFcnJvciIsIiQiLCJ2ZXJzaW9uIiwiZm4iLCJqcXVlcnkiLCJzcGxpdCIsInRyYW5zaXRpb25FbmQiLCJlbCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInRyYW5zRW5kRXZlbnROYW1lcyIsIldlYmtpdFRyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwiT1RyYW5zaXRpb24iLCJ0cmFuc2l0aW9uIiwibmFtZSIsInVuZGVmaW5lZCIsInN0eWxlIiwiZW5kIiwiZW11bGF0ZVRyYW5zaXRpb25FbmQiLCJkdXJhdGlvbiIsImNhbGxlZCIsIiRlbCIsInRoaXMiLCJvbmUiLCJjYWxsYmFjayIsInRyaWdnZXIiLCJzdXBwb3J0Iiwic2V0VGltZW91dCIsImV2ZW50Iiwic3BlY2lhbCIsImJzVHJhbnNpdGlvbkVuZCIsImJpbmRUeXBlIiwiZGVsZWdhdGVUeXBlIiwiaGFuZGxlIiwiZSIsInRhcmdldCIsImlzIiwiaGFuZGxlT2JqIiwiaGFuZGxlciIsImFwcGx5IiwiYXJndW1lbnRzIiwiUGx1Z2luIiwib3B0aW9uIiwiZWFjaCIsIiR0aGlzIiwiZGF0YSIsIkFsZXJ0IiwiY2FsbCIsImRpc21pc3MiLCJvbiIsImNsb3NlIiwiVkVSU0lPTiIsIlRSQU5TSVRJT05fRFVSQVRJT04iLCJwcm90b3R5cGUiLCJyZW1vdmVFbGVtZW50IiwiJHBhcmVudCIsImRldGFjaCIsInJlbW92ZSIsInNlbGVjdG9yIiwiYXR0ciIsInJlcGxhY2UiLCJwcmV2ZW50RGVmYXVsdCIsImxlbmd0aCIsImNsb3Nlc3QiLCJFdmVudCIsImlzRGVmYXVsdFByZXZlbnRlZCIsInJlbW92ZUNsYXNzIiwiaGFzQ2xhc3MiLCJvbGQiLCJhbGVydCIsIkNvbnN0cnVjdG9yIiwibm9Db25mbGljdCIsIm9wdGlvbnMiLCJCdXR0b24iLCJ0b2dnbGUiLCJzZXRTdGF0ZSIsImVsZW1lbnQiLCIkZWxlbWVudCIsImV4dGVuZCIsIkRFRkFVTFRTIiwiaXNMb2FkaW5nIiwibG9hZGluZ1RleHQiLCJzdGF0ZSIsImQiLCJ2YWwiLCJyZXNldFRleHQiLCJwcm94eSIsImFkZENsYXNzIiwicHJvcCIsInJlbW92ZUF0dHIiLCJjaGFuZ2VkIiwiJGlucHV0IiwiZmluZCIsInRvZ2dsZUNsYXNzIiwiYnV0dG9uIiwiJGJ0biIsImZpcnN0IiwidGVzdCIsInR5cGUiLCJDYXJvdXNlbCIsImFjdGlvbiIsInNsaWRlIiwidG8iLCJpbnRlcnZhbCIsInBhdXNlIiwiY3ljbGUiLCIkaW5kaWNhdG9ycyIsInBhdXNlZCIsInNsaWRpbmciLCIkYWN0aXZlIiwiJGl0ZW1zIiwia2V5Ym9hcmQiLCJrZXlkb3duIiwiZG9jdW1lbnRFbGVtZW50Iiwid3JhcCIsInRhZ05hbWUiLCJ3aGljaCIsInByZXYiLCJuZXh0IiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwiZ2V0SXRlbUluZGV4IiwiaXRlbSIsInBhcmVudCIsImNoaWxkcmVuIiwiaW5kZXgiLCJnZXRJdGVtRm9yRGlyZWN0aW9uIiwiZGlyZWN0aW9uIiwiYWN0aXZlIiwiYWN0aXZlSW5kZXgiLCJkZWx0YSIsIml0ZW1JbmRleCIsImVxIiwicG9zIiwidGhhdCIsIiRuZXh0IiwiaXNDeWNsaW5nIiwicmVsYXRlZFRhcmdldCIsInNsaWRlRXZlbnQiLCIkbmV4dEluZGljYXRvciIsInNsaWRFdmVudCIsIm9mZnNldFdpZHRoIiwiam9pbiIsImNhcm91c2VsIiwiY2xpY2tIYW5kbGVyIiwiaHJlZiIsIiR0YXJnZXQiLCJzbGlkZUluZGV4Iiwid2luZG93IiwiJGNhcm91c2VsIiwiZ2V0VGFyZ2V0RnJvbVRyaWdnZXIiLCIkdHJpZ2dlciIsIkNvbGxhcHNlIiwiaWQiLCJ0cmFuc2l0aW9uaW5nIiwiZ2V0UGFyZW50IiwiYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzIiwiZGltZW5zaW9uIiwic2hvdyIsImFjdGl2ZXNEYXRhIiwiYWN0aXZlcyIsInN0YXJ0RXZlbnQiLCJjb21wbGV0ZSIsInNjcm9sbFNpemUiLCJjYW1lbENhc2UiLCJoaWRlIiwib2Zmc2V0SGVpZ2h0IiwiaSIsImlzT3BlbiIsImNvbGxhcHNlIiwiY2xlYXJNZW51cyIsImJhY2tkcm9wIiwiY29udGFpbnMiLCJEcm9wZG93biIsImlzQWN0aXZlIiwiaW5zZXJ0QWZ0ZXIiLCJzdG9wUHJvcGFnYXRpb24iLCJkcm9wZG93biIsIl9yZWxhdGVkVGFyZ2V0IiwiTW9kYWwiLCIkYm9keSIsImJvZHkiLCIkZGlhbG9nIiwiJGJhY2tkcm9wIiwiaXNTaG93biIsIm9yaWdpbmFsQm9keVBhZCIsInNjcm9sbGJhcldpZHRoIiwiaWdub3JlQmFja2Ryb3BDbGljayIsInJlbW90ZSIsImxvYWQiLCJCQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OIiwiY2hlY2tTY3JvbGxiYXIiLCJzZXRTY3JvbGxiYXIiLCJlc2NhcGUiLCJyZXNpemUiLCJhcHBlbmRUbyIsInNjcm9sbFRvcCIsImFkanVzdERpYWxvZyIsImVuZm9yY2VGb2N1cyIsIm9mZiIsImhpZGVNb2RhbCIsImhhcyIsImhhbmRsZVVwZGF0ZSIsInJlc2V0QWRqdXN0bWVudHMiLCJyZXNldFNjcm9sbGJhciIsInJlbW92ZUJhY2tkcm9wIiwiYW5pbWF0ZSIsImRvQW5pbWF0ZSIsImN1cnJlbnRUYXJnZXQiLCJmb2N1cyIsImNhbGxiYWNrUmVtb3ZlIiwibW9kYWxJc092ZXJmbG93aW5nIiwic2Nyb2xsSGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwiY3NzIiwicGFkZGluZ0xlZnQiLCJib2R5SXNPdmVyZmxvd2luZyIsInBhZGRpbmdSaWdodCIsImZ1bGxXaW5kb3dXaWR0aCIsImlubmVyV2lkdGgiLCJkb2N1bWVudEVsZW1lbnRSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicmlnaHQiLCJNYXRoIiwiYWJzIiwibGVmdCIsImNsaWVudFdpZHRoIiwibWVhc3VyZVNjcm9sbGJhciIsImJvZHlQYWQiLCJwYXJzZUludCIsInNjcm9sbERpdiIsImNsYXNzTmFtZSIsImFwcGVuZCIsInJlbW92ZUNoaWxkIiwibW9kYWwiLCJzaG93RXZlbnQiLCJUb29sdGlwIiwiZW5hYmxlZCIsInRpbWVvdXQiLCJob3ZlclN0YXRlIiwiaW5TdGF0ZSIsImluaXQiLCJhbmltYXRpb24iLCJwbGFjZW1lbnQiLCJ0ZW1wbGF0ZSIsInRpdGxlIiwiZGVsYXkiLCJodG1sIiwiY29udGFpbmVyIiwidmlld3BvcnQiLCJwYWRkaW5nIiwiZ2V0T3B0aW9ucyIsIiR2aWV3cG9ydCIsImlzRnVuY3Rpb24iLCJjbGljayIsImhvdmVyIiwiY29uc3RydWN0b3IiLCJ0cmlnZ2VycyIsImV2ZW50SW4iLCJldmVudE91dCIsImVudGVyIiwibGVhdmUiLCJfb3B0aW9ucyIsImZpeFRpdGxlIiwiZ2V0RGVmYXVsdHMiLCJnZXREZWxlZ2F0ZU9wdGlvbnMiLCJkZWZhdWx0cyIsImtleSIsInZhbHVlIiwib2JqIiwic2VsZiIsInRpcCIsImNsZWFyVGltZW91dCIsImlzSW5TdGF0ZVRydWUiLCJoYXNDb250ZW50IiwiaW5Eb20iLCJvd25lckRvY3VtZW50IiwiJHRpcCIsInRpcElkIiwiZ2V0VUlEIiwic2V0Q29udGVudCIsImF1dG9Ub2tlbiIsImF1dG9QbGFjZSIsInRvcCIsImRpc3BsYXkiLCJnZXRQb3NpdGlvbiIsImFjdHVhbFdpZHRoIiwiYWN0dWFsSGVpZ2h0Iiwib3JnUGxhY2VtZW50Iiwidmlld3BvcnREaW0iLCJib3R0b20iLCJ3aWR0aCIsImNhbGN1bGF0ZWRPZmZzZXQiLCJnZXRDYWxjdWxhdGVkT2Zmc2V0IiwiYXBwbHlQbGFjZW1lbnQiLCJwcmV2SG92ZXJTdGF0ZSIsIm9mZnNldCIsImhlaWdodCIsIm1hcmdpblRvcCIsIm1hcmdpbkxlZnQiLCJpc05hTiIsInNldE9mZnNldCIsInVzaW5nIiwicHJvcHMiLCJyb3VuZCIsImdldFZpZXdwb3J0QWRqdXN0ZWREZWx0YSIsImlzVmVydGljYWwiLCJhcnJvd0RlbHRhIiwiYXJyb3dPZmZzZXRQb3NpdGlvbiIsInJlcGxhY2VBcnJvdyIsImFycm93IiwiZ2V0VGl0bGUiLCIkZSIsImlzQm9keSIsImVsUmVjdCIsImlzU3ZnIiwiU1ZHRWxlbWVudCIsImVsT2Zmc2V0Iiwic2Nyb2xsIiwib3V0ZXJEaW1zIiwidmlld3BvcnRQYWRkaW5nIiwidmlld3BvcnREaW1lbnNpb25zIiwidG9wRWRnZU9mZnNldCIsImJvdHRvbUVkZ2VPZmZzZXQiLCJsZWZ0RWRnZU9mZnNldCIsInJpZ2h0RWRnZU9mZnNldCIsIm8iLCJwcmVmaXgiLCJyYW5kb20iLCJnZXRFbGVtZW50QnlJZCIsIiRhcnJvdyIsImVuYWJsZSIsImRpc2FibGUiLCJ0b2dnbGVFbmFibGVkIiwiZGVzdHJveSIsInJlbW92ZURhdGEiLCJ0b29sdGlwIiwiUG9wb3ZlciIsImNvbnRlbnQiLCJnZXRDb250ZW50IiwicG9wb3ZlciIsIlNjcm9sbFNweSIsIiRzY3JvbGxFbGVtZW50Iiwib2Zmc2V0cyIsInRhcmdldHMiLCJhY3RpdmVUYXJnZXQiLCJwcm9jZXNzIiwicmVmcmVzaCIsImdldFNjcm9sbEhlaWdodCIsIm1heCIsIm9mZnNldE1ldGhvZCIsIm9mZnNldEJhc2UiLCJpc1dpbmRvdyIsIm1hcCIsIiRocmVmIiwic29ydCIsImEiLCJiIiwicHVzaCIsIm1heFNjcm9sbCIsImFjdGl2YXRlIiwiY2xlYXIiLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwic2Nyb2xsc3B5IiwiJHNweSIsIlRhYiIsIiR1bCIsIiRwcmV2aW91cyIsImhpZGVFdmVudCIsInRhYiIsIkFmZml4IiwiY2hlY2tQb3NpdGlvbiIsImNoZWNrUG9zaXRpb25XaXRoRXZlbnRMb29wIiwiYWZmaXhlZCIsInVucGluIiwicGlubmVkT2Zmc2V0IiwiUkVTRVQiLCJnZXRTdGF0ZSIsIm9mZnNldFRvcCIsIm9mZnNldEJvdHRvbSIsInBvc2l0aW9uIiwidGFyZ2V0SGVpZ2h0IiwiaW5pdGlhbGl6aW5nIiwiY29sbGlkZXJUb3AiLCJjb2xsaWRlckhlaWdodCIsImdldFBpbm5lZE9mZnNldCIsImFmZml4IiwiYWZmaXhUeXBlIiwiZmFjdG9yeSIsIlplcHRvIiwiZGVmaW5lIiwiYW1kIiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlcXVpcmUiLCJNYXNrIiwibWFzayIsInAiLCJpbnZhbGlkIiwiZ2V0Q2FyZXQiLCJzZWwiLCJjdHJsIiwiZ2V0IiwiZFNlbCIsInNlbGVjdGlvbiIsImNTZWxTdGFydCIsInNlbGVjdGlvblN0YXJ0IiwibmF2aWdhdG9yIiwiYXBwVmVyc2lvbiIsImluZGV4T2YiLCJjcmVhdGVSYW5nZSIsIm1vdmVTdGFydCIsInRleHQiLCJzZXRDYXJldCIsInJhbmdlIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJjcmVhdGVUZXh0UmFuZ2UiLCJtb3ZlRW5kIiwic2VsZWN0IiwiZXZlbnRzIiwia2V5Q29kZSIsIm1hc2tEaWdpdFBvc01hcE9sZCIsIm1hc2tEaWdpdFBvc01hcCIsImpNYXNrR2xvYmFscyIsInVzZUlucHV0IiwiYmVoYXZpb3VyIiwia2V5dXAiLCJvbGRWYWx1ZSIsInNlbGVjdE9uRm9jdXMiLCJjbGVhcklmTm90TWF0Y2giLCJyZWdleE1hc2siLCJnZXRSZWdleE1hc2siLCJ0cmFuc2xhdGlvbiIsInBhdHRlcm4iLCJvcHRpb25hbCIsInJlY3Vyc2l2ZSIsIm9SZWN1cnNpdmUiLCJyIiwibWFza0NodW5rcyIsImpNYXNrIiwiY2hhckF0IiwidG9TdHJpbmciLCJkaWdpdCIsIlJlZ0V4cCIsImRlc3Ryb3lFdmVudHMiLCJ2IiwiaXNJbnB1dCIsIm1ldGhvZCIsImNhbGN1bGF0ZUNhcmV0UG9zaXRpb24iLCJvbGRWYWwiLCJuZXdWYWwiLCJnZXRNYXNrZWQiLCJjYXJldFBvc05ldyIsImNhcmV0UG9zT2xkIiwibmV3VmFsTCIsIm9sZFZhbEwiLCJtYXNrRGlnaXRzQmVmb3JlQ2FyZXQiLCJtYXNrRGlnaXRzQWZ0ZXJDYXJldCIsIm1hc2tEaWdpdHNCZWZvcmVDYXJldEFsbCIsIm1hc2tEaWdpdHNCZWZvcmVDYXJldEFsbE9sZCIsImNhcmV0UG9zIiwiaW5BcnJheSIsImJ5UGFzc0tleXMiLCJjYWxsYmFja3MiLCJza2lwTWFza0NoYXJzIiwibGFzdE1hc2tDaGFyIiwiY2hlY2siLCJidWYiLCJtIiwibWFza0xlbiIsInZhbExlbiIsImFkZE1ldGhvZCIsInJlc2V0UG9zIiwibWFza0RpZ2l0Q291bnQiLCJtYXNrRGlnaXRQb3NBcnIiLCJyZXZlcnNlIiwibGFzdFVudHJhbnNsYXRlZE1hc2tDaGFyIiwibWFza0RpZ2l0IiwidmFsRGlnaXQiLCJtYXRjaCIsImZhbGxiYWNrIiwibGFzdE1hc2tDaGFyRGlnaXQiLCJtYXBNYXNrZGlnaXRQb3NpdGlvbnMiLCJtYXNrRGlmZiIsImRlZmF1bHRBcmdzIiwiY3JpdGVyaWEiLCJhcmdzIiwiY2FyZXQiLCJnZXRDbGVhblZhbCIsImdldE1hc2tlZFZhbCIsIm9ubHlNYXNrIiwicGxhY2Vob2xkZXIiLCJtYXhsZW5ndGgiLCJtYXNrV2F0Y2hlcnMiLCJIVE1MQXR0cmlidXRlcyIsImlucHV0Iiwibm90U2FtZU1hc2tPYmplY3QiLCJmaWVsZCIsIm1hc2tPYmplY3QiLCJzdHJpbmdpZnkiLCJKU09OIiwiZ2xvYmFscyIsIndhdGNoSW50ZXJ2YWwiLCJ3YXRjaElucHV0cyIsIm1hc2tGdW5jdGlvbiIsIm1hc2tlZCIsInVubWFzayIsImRhdGFNYXNrIiwiY2xlYW5WYWwiLCJhcHBseURhdGFNYXNrIiwibWFza0VsZW1lbnRzIiwiZmlsdGVyIiwiZGF0YU1hc2tBdHRyIiwidXNlckFnZW50IiwiZXZlbnROYW1lIiwiaXNTdXBwb3J0ZWQiLCJzZXRBdHRyaWJ1dGUiLCJ3YXRjaERhdGFNYXNrIiwiMCIsIjkiLCIjIiwiQSIsIlMiLCJyZWFkeSIsImFwcCIsInV0aWxzIiwib3NjYXJNYWluRm9ybXMiLCJjYXN0TmFtZSIsImNhc3ROYXRpb25hbGl0eSIsImRlbGltaXRlciIsImNhc3RWYWwiLCJyZXMiLCJjb25zb2xlIiwibG9nIiwiYXJyIiwic3BsaWNlIiwibCIsIm1hc2tCZWhhdmlvciIsIm9uS2V5UHJlc3MiLCJyb3dFbCIsImZpbGVzIiwiZm9ybURhdGEiLCJGb3JtRGF0YSIsImFqYXgiLCJ1cmwiLCJvc2NhckpTIiwiYWpheHVybCIsInByb2Nlc3NEYXRhIiwiY29udGVudFR5cGUiLCJiZWZvcmVTZW5kIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJ1cGxvYWQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZ0IiwibGVuZ3RoQ29tcHV0YWJsZSIsInBlcmNlbnRDb21wbGV0ZSIsImxvYWRlZCIsInRvdGFsIiwic3VjY2VzcyJdLCJtYXBwaW5ncyI6IkFBTUEsR0FBc0IsbUJBQVhBLFFBQ1QsS0FBTSxJQUFJQyxPQUFNLDJDQUdqQixTQUFVQyxHQUNULFlBQ0EsSUFBSUMsR0FBVUQsRUFBRUUsR0FBR0MsT0FBT0MsTUFBTSxLQUFLLEdBQUdBLE1BQU0sSUFDOUMsSUFBS0gsRUFBUSxHQUFLLEdBQUtBLEVBQVEsR0FBSyxHQUFxQixHQUFkQSxFQUFRLElBQXlCLEdBQWRBLEVBQVEsSUFBV0EsRUFBUSxHQUFLLEdBQU9BLEVBQVEsR0FBSyxFQUNoSCxLQUFNLElBQUlGLE9BQU0sNkZBRWxCRCxRQVdELFNBQVVFLEdBQ1QsWUFLQSxTQUFTSyxLQUNQLEdBQUlDLEdBQUtDLFNBQVNDLGNBQWMsYUFFNUJDLEdBQ0ZDLGlCQUFtQixzQkFDbkJDLGNBQW1CLGdCQUNuQkMsWUFBbUIsZ0NBQ25CQyxXQUFtQixnQkFHckIsS0FBSyxHQUFJQyxLQUFRTCxHQUNmLE9BQXVCTSxLQUFuQlQsRUFBR1UsTUFBTUYsR0FDWCxPQUFTRyxJQUFLUixFQUFtQkssR0FJckMsUUFBTyxFQUlUZCxFQUFFRSxHQUFHZ0IscUJBQXVCLFNBQVVDLEdBQ3BDLEdBQUlDLElBQVMsRUFDVEMsRUFBTUMsSUFDVnRCLEdBQUVzQixNQUFNQyxJQUFJLGtCQUFtQixXQUFjSCxHQUFTLEdBQ3RELElBQUlJLEdBQVcsV0FBbUJKLEdBQVFwQixFQUFFcUIsR0FBS0ksUUFBUXpCLEVBQUUwQixRQUFRYixXQUFXSSxLQUU5RSxPQURBVSxZQUFXSCxFQUFVTCxHQUNkRyxNQUdUdEIsRUFBRSxX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dkNGLEdBQWtCeFUsU0FBMkIsSUFBbEJ3VSxHQUMzQjdpQixFQUFFLGlDQUFpQzZaLEtBQUtnSixFQUFrQixLQUMxRDdpQixFQUFFLGlDQUFpQ3NOLElBQUksUUFBU3VWLEVBQWtCLFFBRXZFLEdBQ0lOLEdBRVhTLFFBQVMsU0FBU25nQixHQUNkN0MsRUFBRSwwQkFBMEJ1RixTQUFTLFdBQ3JDdkYsRUFBRSwwQkFBMEJ1UCxLQUFLMU0sU0FPN0M3QyxFQUFFLHdCQUF3QjhELFFBQzdCOUQsRUFBRSxzQkFBc0I2WSxLQUFLLHNCQUF1QitFLFNBQVMsT0FLdkU5ZCIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogQm9vdHN0cmFwIHYzLjMuNyAoaHR0cDovL2dldGJvb3RzdHJhcC5jb20pXG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICovXG5cbmlmICh0eXBlb2YgalF1ZXJ5ID09PSAndW5kZWZpbmVkJykge1xuICB0aHJvdyBuZXcgRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBqUXVlcnknKVxufVxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgdmVyc2lvbiA9ICQuZm4uanF1ZXJ5LnNwbGl0KCcgJylbMF0uc3BsaXQoJy4nKVxuICBpZiAoKHZlcnNpb25bMF0gPCAyICYmIHZlcnNpb25bMV0gPCA5KSB8fCAodmVyc2lvblswXSA9PSAxICYmIHZlcnNpb25bMV0gPT0gOSAmJiB2ZXJzaW9uWzJdIDwgMSkgfHwgKHZlcnNpb25bMF0gPiAzKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQm9vdHN0cmFwXFwncyBKYXZhU2NyaXB0IHJlcXVpcmVzIGpRdWVyeSB2ZXJzaW9uIDEuOS4xIG9yIGhpZ2hlciwgYnV0IGxvd2VyIHRoYW4gdmVyc2lvbiA0JylcbiAgfVxufShqUXVlcnkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogdHJhbnNpdGlvbi5qcyB2My4zLjdcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3RyYW5zaXRpb25zXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gQ1NTIFRSQU5TSVRJT04gU1VQUE9SVCAoU2hvdXRvdXQ6IGh0dHA6Ly93d3cubW9kZXJuaXpyLmNvbS8pXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoKSB7XG4gICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYm9vdHN0cmFwJylcblxuICAgIHZhciB0cmFuc0VuZEV2ZW50TmFtZXMgPSB7XG4gICAgICBXZWJraXRUcmFuc2l0aW9uIDogJ3dlYmtpdFRyYW5zaXRpb25FbmQnLFxuICAgICAgTW96VHJhbnNpdGlvbiAgICA6ICd0cmFuc2l0aW9uZW5kJyxcbiAgICAgIE9UcmFuc2l0aW9uICAgICAgOiAnb1RyYW5zaXRpb25FbmQgb3RyYW5zaXRpb25lbmQnLFxuICAgICAgdHJhbnNpdGlvbiAgICAgICA6ICd0cmFuc2l0aW9uZW5kJ1xuICAgIH1cblxuICAgIGZvciAodmFyIG5hbWUgaW4gdHJhbnNFbmRFdmVudE5hbWVzKSB7XG4gICAgICBpZiAoZWwuc3R5bGVbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4geyBlbmQ6IHRyYW5zRW5kRXZlbnROYW1lc1tuYW1lXSB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlIC8vIGV4cGxpY2l0IGZvciBpZTggKCAgLl8uKVxuICB9XG5cbiAgLy8gaHR0cDovL2Jsb2cuYWxleG1hY2Nhdy5jb20vY3NzLXRyYW5zaXRpb25zXG4gICQuZm4uZW11bGF0ZVRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiAoZHVyYXRpb24pIHtcbiAgICB2YXIgY2FsbGVkID0gZmFsc2VcbiAgICB2YXIgJGVsID0gdGhpc1xuICAgICQodGhpcykub25lKCdic1RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbiAoKSB7IGNhbGxlZCA9IHRydWUgfSlcbiAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7IGlmICghY2FsbGVkKSAkKCRlbCkudHJpZ2dlcigkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQpIH1cbiAgICBzZXRUaW1lb3V0KGNhbGxiYWNrLCBkdXJhdGlvbilcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgJChmdW5jdGlvbiAoKSB7XG4gICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRW5kKClcblxuICAgIGlmICghJC5zdXBwb3J0LnRyYW5zaXRpb24pIHJldHVyblxuXG4gICAgJC5ldmVudC5zcGVjaWFsLmJzVHJhbnNpdGlvbkVuZCA9IHtcbiAgICAgIGJpbmRUeXBlOiAkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQsXG4gICAgICBkZWxlZ2F0ZVR5cGU6ICQuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCxcbiAgICAgIGhhbmRsZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKCQoZS50YXJnZXQpLmlzKHRoaXMpKSByZXR1cm4gZS5oYW5kbGVPYmouaGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICB9XG4gICAgfVxuICB9KVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBhbGVydC5qcyB2My4zLjdcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI2FsZXJ0c1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIEFMRVJUIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBkaXNtaXNzID0gJ1tkYXRhLWRpc21pc3M9XCJhbGVydFwiXSdcbiAgdmFyIEFsZXJ0ICAgPSBmdW5jdGlvbiAoZWwpIHtcbiAgICAkKGVsKS5vbignY2xpY2snLCBkaXNtaXNzLCB0aGlzLmNsb3NlKVxuICB9XG5cbiAgQWxlcnQuVkVSU0lPTiA9ICczLjMuNydcblxuICBBbGVydC5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwXG5cbiAgQWxlcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgJHRoaXMgICAgPSAkKHRoaXMpXG4gICAgdmFyIHNlbGVjdG9yID0gJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKVxuXG4gICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdocmVmJylcbiAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgJiYgc2VsZWN0b3IucmVwbGFjZSgvLiooPz0jW15cXHNdKiQpLywgJycpIC8vIHN0cmlwIGZvciBpZTdcbiAgICB9XG5cbiAgICB2YXIgJHBhcmVudCA9ICQoc2VsZWN0b3IgPT09ICcjJyA/IFtdIDogc2VsZWN0b3IpXG5cbiAgICBpZiAoZSkgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICBpZiAoISRwYXJlbnQubGVuZ3RoKSB7XG4gICAgICAkcGFyZW50ID0gJHRoaXMuY2xvc2VzdCgnLmFsZXJ0JylcbiAgICB9XG5cbiAgICAkcGFyZW50LnRyaWdnZXIoZSA9ICQuRXZlbnQoJ2Nsb3NlLmJzLmFsZXJ0JykpXG5cbiAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICAkcGFyZW50LnJlbW92ZUNsYXNzKCdpbicpXG5cbiAgICBmdW5jdGlvbiByZW1vdmVFbGVtZW50KCkge1xuICAgICAgLy8gZGV0YWNoIGZyb20gcGFyZW50LCBmaXJlIGV2ZW50IHRoZW4gY2xlYW4gdXAgZGF0YVxuICAgICAgJHBhcmVudC5kZXRhY2goKS50cmlnZ2VyKCdjbG9zZWQuYnMuYWxlcnQnKS5yZW1vdmUoKVxuICAgIH1cblxuICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmICRwYXJlbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA/XG4gICAgICAkcGFyZW50XG4gICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIHJlbW92ZUVsZW1lbnQpXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChBbGVydC5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICByZW1vdmVFbGVtZW50KClcbiAgfVxuXG5cbiAgLy8gQUxFUlQgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgPSAkdGhpcy5kYXRhKCdicy5hbGVydCcpXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuYWxlcnQnLCAoZGF0YSA9IG5ldyBBbGVydCh0aGlzKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dLmNhbGwoJHRoaXMpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLmFsZXJ0XG5cbiAgJC5mbi5hbGVydCAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLmFsZXJ0LkNvbnN0cnVjdG9yID0gQWxlcnRcblxuXG4gIC8vIEFMRVJUIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5hbGVydC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uYWxlcnQgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBBTEVSVCBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PVxuXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljay5icy5hbGVydC5kYXRhLWFwaScsIGRpc21pc3MsIEFsZXJ0LnByb3RvdHlwZS5jbG9zZSlcblxufShqUXVlcnkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogYnV0dG9uLmpzIHYzLjMuN1xuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jYnV0dG9uc1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIEJVVFRPTiBQVUJMSUMgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgQnV0dG9uID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ICA9ICQoZWxlbWVudClcbiAgICB0aGlzLm9wdGlvbnMgICA9ICQuZXh0ZW5kKHt9LCBCdXR0b24uREVGQVVMVFMsIG9wdGlvbnMpXG4gICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZVxuICB9XG5cbiAgQnV0dG9uLlZFUlNJT04gID0gJzMuMy43J1xuXG4gIEJ1dHRvbi5ERUZBVUxUUyA9IHtcbiAgICBsb2FkaW5nVGV4dDogJ2xvYWRpbmcuLi4nXG4gIH1cblxuICBCdXR0b24ucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgdmFyIGQgICAgPSAnZGlzYWJsZWQnXG4gICAgdmFyICRlbCAgPSB0aGlzLiRlbGVtZW50XG4gICAgdmFyIHZhbCAgPSAkZWwuaXMoJ2lucHV0JykgPyAndmFsJyA6ICdodG1sJ1xuICAgIHZhciBkYXRhID0gJGVsLmRhdGEoKVxuXG4gICAgc3RhdGUgKz0gJ1RleHQnXG5cbiAgICBpZiAoZGF0YS5yZXNldFRleHQgPT0gbnVsbCkgJGVsLmRhdGEoJ3Jlc2V0VGV4dCcsICRlbFt2YWxdKCkpXG5cbiAgICAvLyBwdXNoIHRvIGV2ZW50IGxvb3AgdG8gYWxsb3cgZm9ybXMgdG8gc3VibWl0XG4gICAgc2V0VGltZW91dCgkLnByb3h5KGZ1bmN0aW9uICgpIHtcbiAgICAgICRlbFt2YWxdKGRhdGFbc3RhdGVdID09IG51bGwgPyB0aGlzLm9wdGlvbnNbc3RhdGVdIDogZGF0YVtzdGF0ZV0pXG5cbiAgICAgIGlmIChzdGF0ZSA9PSAnbG9hZGluZ1RleHQnKSB7XG4gICAgICAgIHRoaXMuaXNMb2FkaW5nID0gdHJ1ZVxuICAgICAgICAkZWwuYWRkQ2xhc3MoZCkuYXR0cihkLCBkKS5wcm9wKGQsIHRydWUpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNMb2FkaW5nKSB7XG4gICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2VcbiAgICAgICAgJGVsLnJlbW92ZUNsYXNzKGQpLnJlbW92ZUF0dHIoZCkucHJvcChkLCBmYWxzZSlcbiAgICAgIH1cbiAgICB9LCB0aGlzKSwgMClcbiAgfVxuXG4gIEJ1dHRvbi5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjaGFuZ2VkID0gdHJ1ZVxuICAgIHZhciAkcGFyZW50ID0gdGhpcy4kZWxlbWVudC5jbG9zZXN0KCdbZGF0YS10b2dnbGU9XCJidXR0b25zXCJdJylcblxuICAgIGlmICgkcGFyZW50Lmxlbmd0aCkge1xuICAgICAgdmFyICRpbnB1dCA9IHRoaXMuJGVsZW1lbnQuZmluZCgnaW5wdXQnKVxuICAgICAgaWYgKCRpbnB1dC5wcm9wKCd0eXBlJykgPT0gJ3JhZGlvJykge1xuICAgICAgICBpZiAoJGlucHV0LnByb3AoJ2NoZWNrZWQnKSkgY2hhbmdlZCA9IGZhbHNlXG4gICAgICAgICRwYXJlbnQuZmluZCgnLmFjdGl2ZScpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgICB0aGlzLiRlbGVtZW50LmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgfSBlbHNlIGlmICgkaW5wdXQucHJvcCgndHlwZScpID09ICdjaGVja2JveCcpIHtcbiAgICAgICAgaWYgKCgkaW5wdXQucHJvcCgnY2hlY2tlZCcpKSAhPT0gdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnYWN0aXZlJykpIGNoYW5nZWQgPSBmYWxzZVxuICAgICAgICB0aGlzLiRlbGVtZW50LnRvZ2dsZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgfVxuICAgICAgJGlucHV0LnByb3AoJ2NoZWNrZWQnLCB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdhY3RpdmUnKSlcbiAgICAgIGlmIChjaGFuZ2VkKSAkaW5wdXQudHJpZ2dlcignY2hhbmdlJylcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kZWxlbWVudC5hdHRyKCdhcmlhLXByZXNzZWQnLCAhdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnYWN0aXZlJykpXG4gICAgICB0aGlzLiRlbGVtZW50LnRvZ2dsZUNsYXNzKCdhY3RpdmUnKVxuICAgIH1cbiAgfVxuXG5cbiAgLy8gQlVUVE9OIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5idXR0b24nKVxuICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvblxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLmJ1dHRvbicsIChkYXRhID0gbmV3IEJ1dHRvbih0aGlzLCBvcHRpb25zKSkpXG5cbiAgICAgIGlmIChvcHRpb24gPT0gJ3RvZ2dsZScpIGRhdGEudG9nZ2xlKClcbiAgICAgIGVsc2UgaWYgKG9wdGlvbikgZGF0YS5zZXRTdGF0ZShvcHRpb24pXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLmJ1dHRvblxuXG4gICQuZm4uYnV0dG9uICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uYnV0dG9uLkNvbnN0cnVjdG9yID0gQnV0dG9uXG5cblxuICAvLyBCVVRUT04gTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5idXR0b24ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmJ1dHRvbiA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIEJVVFRPTiBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PT1cblxuICAkKGRvY3VtZW50KVxuICAgIC5vbignY2xpY2suYnMuYnV0dG9uLmRhdGEtYXBpJywgJ1tkYXRhLXRvZ2dsZV49XCJidXR0b25cIl0nLCBmdW5jdGlvbiAoZSkge1xuICAgICAgdmFyICRidG4gPSAkKGUudGFyZ2V0KS5jbG9zZXN0KCcuYnRuJylcbiAgICAgIFBsdWdpbi5jYWxsKCRidG4sICd0b2dnbGUnKVxuICAgICAgaWYgKCEoJChlLnRhcmdldCkuaXMoJ2lucHV0W3R5cGU9XCJyYWRpb1wiXSwgaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJykpKSB7XG4gICAgICAgIC8vIFByZXZlbnQgZG91YmxlIGNsaWNrIG9uIHJhZGlvcywgYW5kIHRoZSBkb3VibGUgc2VsZWN0aW9ucyAoc28gY2FuY2VsbGF0aW9uKSBvbiBjaGVja2JveGVzXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICAvLyBUaGUgdGFyZ2V0IGNvbXBvbmVudCBzdGlsbCByZWNlaXZlIHRoZSBmb2N1c1xuICAgICAgICBpZiAoJGJ0bi5pcygnaW5wdXQsYnV0dG9uJykpICRidG4udHJpZ2dlcignZm9jdXMnKVxuICAgICAgICBlbHNlICRidG4uZmluZCgnaW5wdXQ6dmlzaWJsZSxidXR0b246dmlzaWJsZScpLmZpcnN0KCkudHJpZ2dlcignZm9jdXMnKVxuICAgICAgfVxuICAgIH0pXG4gICAgLm9uKCdmb2N1cy5icy5idXR0b24uZGF0YS1hcGkgYmx1ci5icy5idXR0b24uZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlXj1cImJ1dHRvblwiXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAkKGUudGFyZ2V0KS5jbG9zZXN0KCcuYnRuJykudG9nZ2xlQ2xhc3MoJ2ZvY3VzJywgL15mb2N1cyhpbik/JC8udGVzdChlLnR5cGUpKVxuICAgIH0pXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGNhcm91c2VsLmpzIHYzLjMuN1xuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jY2Fyb3VzZWxcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBDQVJPVVNFTCBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgQ2Fyb3VzZWwgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgICAgPSAkKGVsZW1lbnQpXG4gICAgdGhpcy4kaW5kaWNhdG9ycyA9IHRoaXMuJGVsZW1lbnQuZmluZCgnLmNhcm91c2VsLWluZGljYXRvcnMnKVxuICAgIHRoaXMub3B0aW9ucyAgICAgPSBvcHRpb25zXG4gICAgdGhpcy5wYXVzZWQgICAgICA9IG51bGxcbiAgICB0aGlzLnNsaWRpbmcgICAgID0gbnVsbFxuICAgIHRoaXMuaW50ZXJ2YWwgICAgPSBudWxsXG4gICAgdGhpcy4kYWN0aXZlICAgICA9IG51bGxcbiAgICB0aGlzLiRpdGVtcyAgICAgID0gbnVsbFxuXG4gICAgdGhpcy5vcHRpb25zLmtleWJvYXJkICYmIHRoaXMuJGVsZW1lbnQub24oJ2tleWRvd24uYnMuY2Fyb3VzZWwnLCAkLnByb3h5KHRoaXMua2V5ZG93biwgdGhpcykpXG5cbiAgICB0aGlzLm9wdGlvbnMucGF1c2UgPT0gJ2hvdmVyJyAmJiAhKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkgJiYgdGhpcy4kZWxlbWVudFxuICAgICAgLm9uKCdtb3VzZWVudGVyLmJzLmNhcm91c2VsJywgJC5wcm94eSh0aGlzLnBhdXNlLCB0aGlzKSlcbiAgICAgIC5vbignbW91c2VsZWF2ZS5icy5jYXJvdXNlbCcsICQucHJveHkodGhpcy5jeWNsZSwgdGhpcykpXG4gIH1cblxuICBDYXJvdXNlbC5WRVJTSU9OICA9ICczLjMuNydcblxuICBDYXJvdXNlbC5UUkFOU0lUSU9OX0RVUkFUSU9OID0gNjAwXG5cbiAgQ2Fyb3VzZWwuREVGQVVMVFMgPSB7XG4gICAgaW50ZXJ2YWw6IDUwMDAsXG4gICAgcGF1c2U6ICdob3ZlcicsXG4gICAgd3JhcDogdHJ1ZSxcbiAgICBrZXlib2FyZDogdHJ1ZVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLmtleWRvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmICgvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpKSByZXR1cm5cbiAgICBzd2l0Y2ggKGUud2hpY2gpIHtcbiAgICAgIGNhc2UgMzc6IHRoaXMucHJldigpOyBicmVha1xuICAgICAgY2FzZSAzOTogdGhpcy5uZXh0KCk7IGJyZWFrXG4gICAgICBkZWZhdWx0OiByZXR1cm5cbiAgICB9XG5cbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5jeWNsZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZSB8fCAodGhpcy5wYXVzZWQgPSBmYWxzZSlcblxuICAgIHRoaXMuaW50ZXJ2YWwgJiYgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKVxuXG4gICAgdGhpcy5vcHRpb25zLmludGVydmFsXG4gICAgICAmJiAhdGhpcy5wYXVzZWRcbiAgICAgICYmICh0aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwoJC5wcm94eSh0aGlzLm5leHQsIHRoaXMpLCB0aGlzLm9wdGlvbnMuaW50ZXJ2YWwpKVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5nZXRJdGVtSW5kZXggPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgIHRoaXMuJGl0ZW1zID0gaXRlbS5wYXJlbnQoKS5jaGlsZHJlbignLml0ZW0nKVxuICAgIHJldHVybiB0aGlzLiRpdGVtcy5pbmRleChpdGVtIHx8IHRoaXMuJGFjdGl2ZSlcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5nZXRJdGVtRm9yRGlyZWN0aW9uID0gZnVuY3Rpb24gKGRpcmVjdGlvbiwgYWN0aXZlKSB7XG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gdGhpcy5nZXRJdGVtSW5kZXgoYWN0aXZlKVxuICAgIHZhciB3aWxsV3JhcCA9IChkaXJlY3Rpb24gPT0gJ3ByZXYnICYmIGFjdGl2ZUluZGV4ID09PSAwKVxuICAgICAgICAgICAgICAgIHx8IChkaXJlY3Rpb24gPT0gJ25leHQnICYmIGFjdGl2ZUluZGV4ID09ICh0aGlzLiRpdGVtcy5sZW5ndGggLSAxKSlcbiAgICBpZiAod2lsbFdyYXAgJiYgIXRoaXMub3B0aW9ucy53cmFwKSByZXR1cm4gYWN0aXZlXG4gICAgdmFyIGRlbHRhID0gZGlyZWN0aW9uID09ICdwcmV2JyA/IC0xIDogMVxuICAgIHZhciBpdGVtSW5kZXggPSAoYWN0aXZlSW5kZXggKyBkZWx0YSkgJSB0aGlzLiRpdGVtcy5sZW5ndGhcbiAgICByZXR1cm4gdGhpcy4kaXRlbXMuZXEoaXRlbUluZGV4KVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLnRvID0gZnVuY3Rpb24gKHBvcykge1xuICAgIHZhciB0aGF0ICAgICAgICA9IHRoaXNcbiAgICB2YXIgYWN0aXZlSW5kZXggPSB0aGlzLmdldEl0ZW1JbmRleCh0aGlzLiRhY3RpdmUgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5pdGVtLmFjdGl2ZScpKVxuXG4gICAgaWYgKHBvcyA+ICh0aGlzLiRpdGVtcy5sZW5ndGggLSAxKSB8fCBwb3MgPCAwKSByZXR1cm5cblxuICAgIGlmICh0aGlzLnNsaWRpbmcpICAgICAgIHJldHVybiB0aGlzLiRlbGVtZW50Lm9uZSgnc2xpZC5icy5jYXJvdXNlbCcsIGZ1bmN0aW9uICgpIHsgdGhhdC50byhwb3MpIH0pIC8vIHllcywgXCJzbGlkXCJcbiAgICBpZiAoYWN0aXZlSW5kZXggPT0gcG9zKSByZXR1cm4gdGhpcy5wYXVzZSgpLmN5Y2xlKClcblxuICAgIHJldHVybiB0aGlzLnNsaWRlKHBvcyA+IGFjdGl2ZUluZGV4ID8gJ25leHQnIDogJ3ByZXYnLCB0aGlzLiRpdGVtcy5lcShwb3MpKVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKGUpIHtcbiAgICBlIHx8ICh0aGlzLnBhdXNlZCA9IHRydWUpXG5cbiAgICBpZiAodGhpcy4kZWxlbWVudC5maW5kKCcubmV4dCwgLnByZXYnKS5sZW5ndGggJiYgJC5zdXBwb3J0LnRyYW5zaXRpb24pIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcigkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQpXG4gICAgICB0aGlzLmN5Y2xlKHRydWUpXG4gICAgfVxuXG4gICAgdGhpcy5pbnRlcnZhbCA9IGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbClcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5zbGlkaW5nKSByZXR1cm5cbiAgICByZXR1cm4gdGhpcy5zbGlkZSgnbmV4dCcpXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUucHJldiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5zbGlkaW5nKSByZXR1cm5cbiAgICByZXR1cm4gdGhpcy5zbGlkZSgncHJldicpXG4gIH1cblxuICBDYXJvdXNlbC5wcm90b3R5cGUuc2xpZGUgPSBmdW5jdGlvbiAodHlwZSwgbmV4dCkge1xuICAgIHZhciAkYWN0aXZlICAgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5pdGVtLmFjdGl2ZScpXG4gICAgdmFyICRuZXh0ICAgICA9IG5leHQgfHwgdGhpcy5nZXRJdGVtRm9yRGlyZWN0aW9uKHR5cGUsICRhY3RpdmUpXG4gICAgdmFyIGlzQ3ljbGluZyA9IHRoaXMuaW50ZXJ2YWxcbiAgICB2YXIgZGlyZWN0aW9uID0gdHlwZSA9PSAnbmV4dCcgPyAnbGVmdCcgOiAncmlnaHQnXG4gICAgdmFyIHRoYXQgICAgICA9IHRoaXNcblxuICAgIGlmICgkbmV4dC5oYXNDbGFzcygnYWN0aXZlJykpIHJldHVybiAodGhpcy5zbGlkaW5nID0gZmFsc2UpXG5cbiAgICB2YXIgcmVsYXRlZFRhcmdldCA9ICRuZXh0WzBdXG4gICAgdmFyIHNsaWRlRXZlbnQgPSAkLkV2ZW50KCdzbGlkZS5icy5jYXJvdXNlbCcsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXQsXG4gICAgICBkaXJlY3Rpb246IGRpcmVjdGlvblxuICAgIH0pXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKHNsaWRlRXZlbnQpXG4gICAgaWYgKHNsaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgdGhpcy5zbGlkaW5nID0gdHJ1ZVxuXG4gICAgaXNDeWNsaW5nICYmIHRoaXMucGF1c2UoKVxuXG4gICAgaWYgKHRoaXMuJGluZGljYXRvcnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLiRpbmRpY2F0b3JzLmZpbmQoJy5hY3RpdmUnKS5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgICAgIHZhciAkbmV4dEluZGljYXRvciA9ICQodGhpcy4kaW5kaWNhdG9ycy5jaGlsZHJlbigpW3RoaXMuZ2V0SXRlbUluZGV4KCRuZXh0KV0pXG4gICAgICAkbmV4dEluZGljYXRvciAmJiAkbmV4dEluZGljYXRvci5hZGRDbGFzcygnYWN0aXZlJylcbiAgICB9XG5cbiAgICB2YXIgc2xpZEV2ZW50ID0gJC5FdmVudCgnc2xpZC5icy5jYXJvdXNlbCcsIHsgcmVsYXRlZFRhcmdldDogcmVsYXRlZFRhcmdldCwgZGlyZWN0aW9uOiBkaXJlY3Rpb24gfSkgLy8geWVzLCBcInNsaWRcIlxuICAgIGlmICgkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdzbGlkZScpKSB7XG4gICAgICAkbmV4dC5hZGRDbGFzcyh0eXBlKVxuICAgICAgJG5leHRbMF0ub2Zmc2V0V2lkdGggLy8gZm9yY2UgcmVmbG93XG4gICAgICAkYWN0aXZlLmFkZENsYXNzKGRpcmVjdGlvbilcbiAgICAgICRuZXh0LmFkZENsYXNzKGRpcmVjdGlvbilcbiAgICAgICRhY3RpdmVcbiAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICRuZXh0LnJlbW92ZUNsYXNzKFt0eXBlLCBkaXJlY3Rpb25dLmpvaW4oJyAnKSkuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgICAgJGFjdGl2ZS5yZW1vdmVDbGFzcyhbJ2FjdGl2ZScsIGRpcmVjdGlvbl0uam9pbignICcpKVxuICAgICAgICAgIHRoYXQuc2xpZGluZyA9IGZhbHNlXG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoc2xpZEV2ZW50KVxuICAgICAgICAgIH0sIDApXG4gICAgICAgIH0pXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChDYXJvdXNlbC5UUkFOU0lUSU9OX0RVUkFUSU9OKVxuICAgIH0gZWxzZSB7XG4gICAgICAkYWN0aXZlLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgJG5leHQuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICB0aGlzLnNsaWRpbmcgPSBmYWxzZVxuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKHNsaWRFdmVudClcbiAgICB9XG5cbiAgICBpc0N5Y2xpbmcgJiYgdGhpcy5jeWNsZSgpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBDQVJPVVNFTCBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5jYXJvdXNlbCcpXG4gICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBDYXJvdXNlbC5ERUZBVUxUUywgJHRoaXMuZGF0YSgpLCB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbilcbiAgICAgIHZhciBhY3Rpb24gID0gdHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJyA/IG9wdGlvbiA6IG9wdGlvbnMuc2xpZGVcblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5jYXJvdXNlbCcsIChkYXRhID0gbmV3IENhcm91c2VsKHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdudW1iZXInKSBkYXRhLnRvKG9wdGlvbilcbiAgICAgIGVsc2UgaWYgKGFjdGlvbikgZGF0YVthY3Rpb25dKClcbiAgICAgIGVsc2UgaWYgKG9wdGlvbnMuaW50ZXJ2YWwpIGRhdGEucGF1c2UoKS5jeWNsZSgpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLmNhcm91c2VsXG5cbiAgJC5mbi5jYXJvdXNlbCAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLmNhcm91c2VsLkNvbnN0cnVjdG9yID0gQ2Fyb3VzZWxcblxuXG4gIC8vIENBUk9VU0VMIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5jYXJvdXNlbC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uY2Fyb3VzZWwgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBDQVJPVVNFTCBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PT09PVxuXG4gIHZhciBjbGlja0hhbmRsZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBocmVmXG4gICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgdmFyICR0YXJnZXQgPSAkKCR0aGlzLmF0dHIoJ2RhdGEtdGFyZ2V0JykgfHwgKGhyZWYgPSAkdGhpcy5hdHRyKCdocmVmJykpICYmIGhyZWYucmVwbGFjZSgvLiooPz0jW15cXHNdKyQpLywgJycpKSAvLyBzdHJpcCBmb3IgaWU3XG4gICAgaWYgKCEkdGFyZ2V0Lmhhc0NsYXNzKCdjYXJvdXNlbCcpKSByZXR1cm5cbiAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCAkdGFyZ2V0LmRhdGEoKSwgJHRoaXMuZGF0YSgpKVxuICAgIHZhciBzbGlkZUluZGV4ID0gJHRoaXMuYXR0cignZGF0YS1zbGlkZS10bycpXG4gICAgaWYgKHNsaWRlSW5kZXgpIG9wdGlvbnMuaW50ZXJ2YWwgPSBmYWxzZVxuXG4gICAgUGx1Z2luLmNhbGwoJHRhcmdldCwgb3B0aW9ucylcblxuICAgIGlmIChzbGlkZUluZGV4KSB7XG4gICAgICAkdGFyZ2V0LmRhdGEoJ2JzLmNhcm91c2VsJykudG8oc2xpZGVJbmRleClcbiAgICB9XG5cbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gICQoZG9jdW1lbnQpXG4gICAgLm9uKCdjbGljay5icy5jYXJvdXNlbC5kYXRhLWFwaScsICdbZGF0YS1zbGlkZV0nLCBjbGlja0hhbmRsZXIpXG4gICAgLm9uKCdjbGljay5icy5jYXJvdXNlbC5kYXRhLWFwaScsICdbZGF0YS1zbGlkZS10b10nLCBjbGlja0hhbmRsZXIpXG5cbiAgJCh3aW5kb3cpLm9uKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICQoJ1tkYXRhLXJpZGU9XCJjYXJvdXNlbFwiXScpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRjYXJvdXNlbCA9ICQodGhpcylcbiAgICAgIFBsdWdpbi5jYWxsKCRjYXJvdXNlbCwgJGNhcm91c2VsLmRhdGEoKSlcbiAgICB9KVxuICB9KVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBjb2xsYXBzZS5qcyB2My4zLjdcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI2NvbGxhcHNlXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKiBqc2hpbnQgbGF0ZWRlZjogZmFsc2UgKi9cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBDT0xMQVBTRSBQVUJMSUMgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBDb2xsYXBzZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kZWxlbWVudCAgICAgID0gJChlbGVtZW50KVxuICAgIHRoaXMub3B0aW9ucyAgICAgICA9ICQuZXh0ZW5kKHt9LCBDb2xsYXBzZS5ERUZBVUxUUywgb3B0aW9ucylcbiAgICB0aGlzLiR0cmlnZ2VyICAgICAgPSAkKCdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtocmVmPVwiIycgKyBlbGVtZW50LmlkICsgJ1wiXSwnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtkYXRhLXRhcmdldD1cIiMnICsgZWxlbWVudC5pZCArICdcIl0nKVxuICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IG51bGxcblxuICAgIGlmICh0aGlzLm9wdGlvbnMucGFyZW50KSB7XG4gICAgICB0aGlzLiRwYXJlbnQgPSB0aGlzLmdldFBhcmVudCgpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuJGVsZW1lbnQsIHRoaXMuJHRyaWdnZXIpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy50b2dnbGUpIHRoaXMudG9nZ2xlKClcbiAgfVxuXG4gIENvbGxhcHNlLlZFUlNJT04gID0gJzMuMy43J1xuXG4gIENvbGxhcHNlLlRSQU5TSVRJT05fRFVSQVRJT04gPSAzNTBcblxuICBDb2xsYXBzZS5ERUZBVUxUUyA9IHtcbiAgICB0b2dnbGU6IHRydWVcbiAgfVxuXG4gIENvbGxhcHNlLnByb3RvdHlwZS5kaW1lbnNpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGhhc1dpZHRoID0gdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnd2lkdGgnKVxuICAgIHJldHVybiBoYXNXaWR0aCA/ICd3aWR0aCcgOiAnaGVpZ2h0J1xuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMudHJhbnNpdGlvbmluZyB8fCB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdpbicpKSByZXR1cm5cblxuICAgIHZhciBhY3RpdmVzRGF0YVxuICAgIHZhciBhY3RpdmVzID0gdGhpcy4kcGFyZW50ICYmIHRoaXMuJHBhcmVudC5jaGlsZHJlbignLnBhbmVsJykuY2hpbGRyZW4oJy5pbiwgLmNvbGxhcHNpbmcnKVxuXG4gICAgaWYgKGFjdGl2ZXMgJiYgYWN0aXZlcy5sZW5ndGgpIHtcbiAgICAgIGFjdGl2ZXNEYXRhID0gYWN0aXZlcy5kYXRhKCdicy5jb2xsYXBzZScpXG4gICAgICBpZiAoYWN0aXZlc0RhdGEgJiYgYWN0aXZlc0RhdGEudHJhbnNpdGlvbmluZykgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIHN0YXJ0RXZlbnQgPSAkLkV2ZW50KCdzaG93LmJzLmNvbGxhcHNlJylcbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoc3RhcnRFdmVudClcbiAgICBpZiAoc3RhcnRFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICBpZiAoYWN0aXZlcyAmJiBhY3RpdmVzLmxlbmd0aCkge1xuICAgICAgUGx1Z2luLmNhbGwoYWN0aXZlcywgJ2hpZGUnKVxuICAgICAgYWN0aXZlc0RhdGEgfHwgYWN0aXZlcy5kYXRhKCdicy5jb2xsYXBzZScsIG51bGwpXG4gICAgfVxuXG4gICAgdmFyIGRpbWVuc2lvbiA9IHRoaXMuZGltZW5zaW9uKClcblxuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5yZW1vdmVDbGFzcygnY29sbGFwc2UnKVxuICAgICAgLmFkZENsYXNzKCdjb2xsYXBzaW5nJylbZGltZW5zaW9uXSgwKVxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKVxuXG4gICAgdGhpcy4kdHJpZ2dlclxuICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzZWQnKVxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKVxuXG4gICAgdGhpcy50cmFuc2l0aW9uaW5nID0gMVxuXG4gICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNpbmcnKVxuICAgICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNlIGluJylbZGltZW5zaW9uXSgnJylcbiAgICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IDBcbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLnRyaWdnZXIoJ3Nob3duLmJzLmNvbGxhcHNlJylcbiAgICB9XG5cbiAgICBpZiAoISQuc3VwcG9ydC50cmFuc2l0aW9uKSByZXR1cm4gY29tcGxldGUuY2FsbCh0aGlzKVxuXG4gICAgdmFyIHNjcm9sbFNpemUgPSAkLmNhbWVsQ2FzZShbJ3Njcm9sbCcsIGRpbWVuc2lvbl0uam9pbignLScpKVxuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgJC5wcm94eShjb21wbGV0ZSwgdGhpcykpXG4gICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoQ29sbGFwc2UuVFJBTlNJVElPTl9EVVJBVElPTilbZGltZW5zaW9uXSh0aGlzLiRlbGVtZW50WzBdW3Njcm9sbFNpemVdKVxuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMudHJhbnNpdGlvbmluZyB8fCAhdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaW4nKSkgcmV0dXJuXG5cbiAgICB2YXIgc3RhcnRFdmVudCA9ICQuRXZlbnQoJ2hpZGUuYnMuY29sbGFwc2UnKVxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzdGFydEV2ZW50KVxuICAgIGlmIChzdGFydEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIHZhciBkaW1lbnNpb24gPSB0aGlzLmRpbWVuc2lvbigpXG5cbiAgICB0aGlzLiRlbGVtZW50W2RpbWVuc2lvbl0odGhpcy4kZWxlbWVudFtkaW1lbnNpb25dKCkpWzBdLm9mZnNldEhlaWdodFxuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLmFkZENsYXNzKCdjb2xsYXBzaW5nJylcbiAgICAgIC5yZW1vdmVDbGFzcygnY29sbGFwc2UgaW4nKVxuICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCBmYWxzZSlcblxuICAgIHRoaXMuJHRyaWdnZXJcbiAgICAgIC5hZGRDbGFzcygnY29sbGFwc2VkJylcbiAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpXG5cbiAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSAxXG5cbiAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSAwXG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5yZW1vdmVDbGFzcygnY29sbGFwc2luZycpXG4gICAgICAgIC5hZGRDbGFzcygnY29sbGFwc2UnKVxuICAgICAgICAudHJpZ2dlcignaGlkZGVuLmJzLmNvbGxhcHNlJylcbiAgICB9XG5cbiAgICBpZiAoISQuc3VwcG9ydC50cmFuc2l0aW9uKSByZXR1cm4gY29tcGxldGUuY2FsbCh0aGlzKVxuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgW2RpbWVuc2lvbl0oMClcbiAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsICQucHJveHkoY29tcGxldGUsIHRoaXMpKVxuICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKENvbGxhcHNlLlRSQU5TSVRJT05fRFVSQVRJT04pXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXNbdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaW4nKSA/ICdoaWRlJyA6ICdzaG93J10oKVxuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLmdldFBhcmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gJCh0aGlzLm9wdGlvbnMucGFyZW50KVxuICAgICAgLmZpbmQoJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2RhdGEtcGFyZW50PVwiJyArIHRoaXMub3B0aW9ucy5wYXJlbnQgKyAnXCJdJylcbiAgICAgIC5lYWNoKCQucHJveHkoZnVuY3Rpb24gKGksIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyICRlbGVtZW50ID0gJChlbGVtZW50KVxuICAgICAgICB0aGlzLmFkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhnZXRUYXJnZXRGcm9tVHJpZ2dlcigkZWxlbWVudCksICRlbGVtZW50KVxuICAgICAgfSwgdGhpcykpXG4gICAgICAuZW5kKClcbiAgfVxuXG4gIENvbGxhcHNlLnByb3RvdHlwZS5hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3MgPSBmdW5jdGlvbiAoJGVsZW1lbnQsICR0cmlnZ2VyKSB7XG4gICAgdmFyIGlzT3BlbiA9ICRlbGVtZW50Lmhhc0NsYXNzKCdpbicpXG5cbiAgICAkZWxlbWVudC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgaXNPcGVuKVxuICAgICR0cmlnZ2VyXG4gICAgICAudG9nZ2xlQ2xhc3MoJ2NvbGxhcHNlZCcsICFpc09wZW4pXG4gICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIGlzT3BlbilcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFRhcmdldEZyb21UcmlnZ2VyKCR0cmlnZ2VyKSB7XG4gICAgdmFyIGhyZWZcbiAgICB2YXIgdGFyZ2V0ID0gJHRyaWdnZXIuYXR0cignZGF0YS10YXJnZXQnKVxuICAgICAgfHwgKGhyZWYgPSAkdHJpZ2dlci5hdHRyKCdocmVmJykpICYmIGhyZWYucmVwbGFjZSgvLiooPz0jW15cXHNdKyQpLywgJycpIC8vIHN0cmlwIGZvciBpZTdcblxuICAgIHJldHVybiAkKHRhcmdldClcbiAgfVxuXG5cbiAgLy8gQ09MTEFQU0UgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMuY29sbGFwc2UnKVxuICAgICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgQ29sbGFwc2UuREVGQVVMVFMsICR0aGlzLmRhdGEoKSwgdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb24pXG5cbiAgICAgIGlmICghZGF0YSAmJiBvcHRpb25zLnRvZ2dsZSAmJiAvc2hvd3xoaWRlLy50ZXN0KG9wdGlvbikpIG9wdGlvbnMudG9nZ2xlID0gZmFsc2VcbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuY29sbGFwc2UnLCAoZGF0YSA9IG5ldyBDb2xsYXBzZSh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uY29sbGFwc2VcblxuICAkLmZuLmNvbGxhcHNlICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uY29sbGFwc2UuQ29uc3RydWN0b3IgPSBDb2xsYXBzZVxuXG5cbiAgLy8gQ09MTEFQU0UgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmNvbGxhcHNlLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5jb2xsYXBzZSA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIENPTExBUFNFIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09PT09XG5cbiAgJChkb2N1bWVudCkub24oJ2NsaWNrLmJzLmNvbGxhcHNlLmRhdGEtYXBpJywgJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdJywgZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcblxuICAgIGlmICghJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKSkgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICB2YXIgJHRhcmdldCA9IGdldFRhcmdldEZyb21UcmlnZ2VyKCR0aGlzKVxuICAgIHZhciBkYXRhICAgID0gJHRhcmdldC5kYXRhKCdicy5jb2xsYXBzZScpXG4gICAgdmFyIG9wdGlvbiAgPSBkYXRhID8gJ3RvZ2dsZScgOiAkdGhpcy5kYXRhKClcblxuICAgIFBsdWdpbi5jYWxsKCR0YXJnZXQsIG9wdGlvbilcbiAgfSlcblxufShqUXVlcnkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogZHJvcGRvd24uanMgdjMuMy43XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNkcm9wZG93bnNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBEUk9QRE9XTiBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgYmFja2Ryb3AgPSAnLmRyb3Bkb3duLWJhY2tkcm9wJ1xuICB2YXIgdG9nZ2xlICAgPSAnW2RhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIl0nXG4gIHZhciBEcm9wZG93biA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgJChlbGVtZW50KS5vbignY2xpY2suYnMuZHJvcGRvd24nLCB0aGlzLnRvZ2dsZSlcbiAgfVxuXG4gIERyb3Bkb3duLlZFUlNJT04gPSAnMy4zLjcnXG5cbiAgZnVuY3Rpb24gZ2V0UGFyZW50KCR0aGlzKSB7XG4gICAgdmFyIHNlbGVjdG9yID0gJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKVxuXG4gICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdocmVmJylcbiAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgJiYgLyNbQS1aYS16XS8udGVzdChzZWxlY3RvcikgJiYgc2VsZWN0b3IucmVwbGFjZSgvLiooPz0jW15cXHNdKiQpLywgJycpIC8vIHN0cmlwIGZvciBpZTdcbiAgICB9XG5cbiAgICB2YXIgJHBhcmVudCA9IHNlbGVjdG9yICYmICQoc2VsZWN0b3IpXG5cbiAgICByZXR1cm4gJHBhcmVudCAmJiAkcGFyZW50Lmxlbmd0aCA/ICRwYXJlbnQgOiAkdGhpcy5wYXJlbnQoKVxuICB9XG5cbiAgZnVuY3Rpb24gY2xlYXJNZW51cyhlKSB7XG4gICAgaWYgKGUgJiYgZS53aGljaCA9PT0gMykgcmV0dXJuXG4gICAgJChiYWNrZHJvcCkucmVtb3ZlKClcbiAgICAkKHRvZ2dsZSkuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICAgICAgICA9ICQodGhpcylcbiAgICAgIHZhciAkcGFyZW50ICAgICAgID0gZ2V0UGFyZW50KCR0aGlzKVxuICAgICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSB7IHJlbGF0ZWRUYXJnZXQ6IHRoaXMgfVxuXG4gICAgICBpZiAoISRwYXJlbnQuaGFzQ2xhc3MoJ29wZW4nKSkgcmV0dXJuXG5cbiAgICAgIGlmIChlICYmIGUudHlwZSA9PSAnY2xpY2snICYmIC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZS50YXJnZXQudGFnTmFtZSkgJiYgJC5jb250YWlucygkcGFyZW50WzBdLCBlLnRhcmdldCkpIHJldHVyblxuXG4gICAgICAkcGFyZW50LnRyaWdnZXIoZSA9ICQuRXZlbnQoJ2hpZGUuYnMuZHJvcGRvd24nLCByZWxhdGVkVGFyZ2V0KSlcblxuICAgICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgICAkdGhpcy5hdHRyKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJylcbiAgICAgICRwYXJlbnQucmVtb3ZlQ2xhc3MoJ29wZW4nKS50cmlnZ2VyKCQuRXZlbnQoJ2hpZGRlbi5icy5kcm9wZG93bicsIHJlbGF0ZWRUYXJnZXQpKVxuICAgIH0pXG4gIH1cblxuICBEcm9wZG93bi5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXG5cbiAgICBpZiAoJHRoaXMuaXMoJy5kaXNhYmxlZCwgOmRpc2FibGVkJykpIHJldHVyblxuXG4gICAgdmFyICRwYXJlbnQgID0gZ2V0UGFyZW50KCR0aGlzKVxuICAgIHZhciBpc0FjdGl2ZSA9ICRwYXJlbnQuaGFzQ2xhc3MoJ29wZW4nKVxuXG4gICAgY2xlYXJNZW51cygpXG5cbiAgICBpZiAoIWlzQWN0aXZlKSB7XG4gICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmICEkcGFyZW50LmNsb3Nlc3QoJy5uYXZiYXItbmF2JykubGVuZ3RoKSB7XG4gICAgICAgIC8vIGlmIG1vYmlsZSB3ZSB1c2UgYSBiYWNrZHJvcCBiZWNhdXNlIGNsaWNrIGV2ZW50cyBkb24ndCBkZWxlZ2F0ZVxuICAgICAgICAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKVxuICAgICAgICAgIC5hZGRDbGFzcygnZHJvcGRvd24tYmFja2Ryb3AnKVxuICAgICAgICAgIC5pbnNlcnRBZnRlcigkKHRoaXMpKVxuICAgICAgICAgIC5vbignY2xpY2snLCBjbGVhck1lbnVzKVxuICAgICAgfVxuXG4gICAgICB2YXIgcmVsYXRlZFRhcmdldCA9IHsgcmVsYXRlZFRhcmdldDogdGhpcyB9XG4gICAgICAkcGFyZW50LnRyaWdnZXIoZSA9ICQuRXZlbnQoJ3Nob3cuYnMuZHJvcGRvd24nLCByZWxhdGVkVGFyZ2V0KSlcblxuICAgICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgICAkdGhpc1xuICAgICAgICAudHJpZ2dlcignZm9jdXMnKVxuICAgICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsICd0cnVlJylcblxuICAgICAgJHBhcmVudFxuICAgICAgICAudG9nZ2xlQ2xhc3MoJ29wZW4nKVxuICAgICAgICAudHJpZ2dlcigkLkV2ZW50KCdzaG93bi5icy5kcm9wZG93bicsIHJlbGF0ZWRUYXJnZXQpKVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgRHJvcGRvd24ucHJvdG90eXBlLmtleWRvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmICghLygzOHw0MHwyN3wzMikvLnRlc3QoZS53aGljaCkgfHwgL2lucHV0fHRleHRhcmVhL2kudGVzdChlLnRhcmdldC50YWdOYW1lKSkgcmV0dXJuXG5cbiAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXG5cbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpXG5cbiAgICBpZiAoJHRoaXMuaXMoJy5kaXNhYmxlZCwgOmRpc2FibGVkJykpIHJldHVyblxuXG4gICAgdmFyICRwYXJlbnQgID0gZ2V0UGFyZW50KCR0aGlzKVxuICAgIHZhciBpc0FjdGl2ZSA9ICRwYXJlbnQuaGFzQ2xhc3MoJ29wZW4nKVxuXG4gICAgaWYgKCFpc0FjdGl2ZSAmJiBlLndoaWNoICE9IDI3IHx8IGlzQWN0aXZlICYmIGUud2hpY2ggPT0gMjcpIHtcbiAgICAgIGlmIChlLndoaWNoID09IDI3KSAkcGFyZW50LmZpbmQodG9nZ2xlKS50cmlnZ2VyKCdmb2N1cycpXG4gICAgICByZXR1cm4gJHRoaXMudHJpZ2dlcignY2xpY2snKVxuICAgIH1cblxuICAgIHZhciBkZXNjID0gJyBsaTpub3QoLmRpc2FibGVkKTp2aXNpYmxlIGEnXG4gICAgdmFyICRpdGVtcyA9ICRwYXJlbnQuZmluZCgnLmRyb3Bkb3duLW1lbnUnICsgZGVzYylcblxuICAgIGlmICghJGl0ZW1zLmxlbmd0aCkgcmV0dXJuXG5cbiAgICB2YXIgaW5kZXggPSAkaXRlbXMuaW5kZXgoZS50YXJnZXQpXG5cbiAgICBpZiAoZS53aGljaCA9PSAzOCAmJiBpbmRleCA+IDApICAgICAgICAgICAgICAgICBpbmRleC0tICAgICAgICAgLy8gdXBcbiAgICBpZiAoZS53aGljaCA9PSA0MCAmJiBpbmRleCA8ICRpdGVtcy5sZW5ndGggLSAxKSBpbmRleCsrICAgICAgICAgLy8gZG93blxuICAgIGlmICghfmluZGV4KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gMFxuXG4gICAgJGl0ZW1zLmVxKGluZGV4KS50cmlnZ2VyKCdmb2N1cycpXG4gIH1cblxuXG4gIC8vIERST1BET1dOIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgID0gJHRoaXMuZGF0YSgnYnMuZHJvcGRvd24nKVxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLmRyb3Bkb3duJywgKGRhdGEgPSBuZXcgRHJvcGRvd24odGhpcykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXS5jYWxsKCR0aGlzKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5kcm9wZG93blxuXG4gICQuZm4uZHJvcGRvd24gICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5kcm9wZG93bi5Db25zdHJ1Y3RvciA9IERyb3Bkb3duXG5cblxuICAvLyBEUk9QRE9XTiBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uZHJvcGRvd24ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmRyb3Bkb3duID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQVBQTFkgVE8gU1RBTkRBUkQgRFJPUERPV04gRUxFTUVOVFNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAkKGRvY3VtZW50KVxuICAgIC5vbignY2xpY2suYnMuZHJvcGRvd24uZGF0YS1hcGknLCBjbGVhck1lbnVzKVxuICAgIC5vbignY2xpY2suYnMuZHJvcGRvd24uZGF0YS1hcGknLCAnLmRyb3Bkb3duIGZvcm0nLCBmdW5jdGlvbiAoZSkgeyBlLnN0b3BQcm9wYWdhdGlvbigpIH0pXG4gICAgLm9uKCdjbGljay5icy5kcm9wZG93bi5kYXRhLWFwaScsIHRvZ2dsZSwgRHJvcGRvd24ucHJvdG90eXBlLnRvZ2dsZSlcbiAgICAub24oJ2tleWRvd24uYnMuZHJvcGRvd24uZGF0YS1hcGknLCB0b2dnbGUsIERyb3Bkb3duLnByb3RvdHlwZS5rZXlkb3duKVxuICAgIC5vbigna2V5ZG93bi5icy5kcm9wZG93bi5kYXRhLWFwaScsICcuZHJvcGRvd24tbWVudScsIERyb3Bkb3duLnByb3RvdHlwZS5rZXlkb3duKVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBtb2RhbC5qcyB2My4zLjdcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI21vZGFsc1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIE1PREFMIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBNb2RhbCA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zICAgICAgICAgICAgID0gb3B0aW9uc1xuICAgIHRoaXMuJGJvZHkgICAgICAgICAgICAgICA9ICQoZG9jdW1lbnQuYm9keSlcbiAgICB0aGlzLiRlbGVtZW50ICAgICAgICAgICAgPSAkKGVsZW1lbnQpXG4gICAgdGhpcy4kZGlhbG9nICAgICAgICAgICAgID0gdGhpcy4kZWxlbWVudC5maW5kKCcubW9kYWwtZGlhbG9nJylcbiAgICB0aGlzLiRiYWNrZHJvcCAgICAgICAgICAgPSBudWxsXG4gICAgdGhpcy5pc1Nob3duICAgICAgICAgICAgID0gbnVsbFxuICAgIHRoaXMub3JpZ2luYWxCb2R5UGFkICAgICA9IG51bGxcbiAgICB0aGlzLnNjcm9sbGJhcldpZHRoICAgICAgPSAwXG4gICAgdGhpcy5pZ25vcmVCYWNrZHJvcENsaWNrID0gZmFsc2VcblxuICAgIGlmICh0aGlzLm9wdGlvbnMucmVtb3RlKSB7XG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5maW5kKCcubW9kYWwtY29udGVudCcpXG4gICAgICAgIC5sb2FkKHRoaXMub3B0aW9ucy5yZW1vdGUsICQucHJveHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignbG9hZGVkLmJzLm1vZGFsJylcbiAgICAgICAgfSwgdGhpcykpXG4gICAgfVxuICB9XG5cbiAgTW9kYWwuVkVSU0lPTiAgPSAnMy4zLjcnXG5cbiAgTW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTiA9IDMwMFxuICBNb2RhbC5CQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwXG5cbiAgTW9kYWwuREVGQVVMVFMgPSB7XG4gICAgYmFja2Ryb3A6IHRydWUsXG4gICAga2V5Ym9hcmQ6IHRydWUsXG4gICAgc2hvdzogdHJ1ZVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnRvZ2dsZSA9IGZ1bmN0aW9uIChfcmVsYXRlZFRhcmdldCkge1xuICAgIHJldHVybiB0aGlzLmlzU2hvd24gPyB0aGlzLmhpZGUoKSA6IHRoaXMuc2hvdyhfcmVsYXRlZFRhcmdldClcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKF9yZWxhdGVkVGFyZ2V0KSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzXG4gICAgdmFyIGUgICAgPSAkLkV2ZW50KCdzaG93LmJzLm1vZGFsJywgeyByZWxhdGVkVGFyZ2V0OiBfcmVsYXRlZFRhcmdldCB9KVxuXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKGUpXG5cbiAgICBpZiAodGhpcy5pc1Nob3duIHx8IGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgdGhpcy5pc1Nob3duID0gdHJ1ZVxuXG4gICAgdGhpcy5jaGVja1Njcm9sbGJhcigpXG4gICAgdGhpcy5zZXRTY3JvbGxiYXIoKVxuICAgIHRoaXMuJGJvZHkuYWRkQ2xhc3MoJ21vZGFsLW9wZW4nKVxuXG4gICAgdGhpcy5lc2NhcGUoKVxuICAgIHRoaXMucmVzaXplKClcblxuICAgIHRoaXMuJGVsZW1lbnQub24oJ2NsaWNrLmRpc21pc3MuYnMubW9kYWwnLCAnW2RhdGEtZGlzbWlzcz1cIm1vZGFsXCJdJywgJC5wcm94eSh0aGlzLmhpZGUsIHRoaXMpKVxuXG4gICAgdGhpcy4kZGlhbG9nLm9uKCdtb3VzZWRvd24uZGlzbWlzcy5icy5tb2RhbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoYXQuJGVsZW1lbnQub25lKCdtb3VzZXVwLmRpc21pc3MuYnMubW9kYWwnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoJChlLnRhcmdldCkuaXModGhhdC4kZWxlbWVudCkpIHRoYXQuaWdub3JlQmFja2Ryb3BDbGljayA9IHRydWVcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIHRoaXMuYmFja2Ryb3AoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRyYW5zaXRpb24gPSAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGF0LiRlbGVtZW50Lmhhc0NsYXNzKCdmYWRlJylcblxuICAgICAgaWYgKCF0aGF0LiRlbGVtZW50LnBhcmVudCgpLmxlbmd0aCkge1xuICAgICAgICB0aGF0LiRlbGVtZW50LmFwcGVuZFRvKHRoYXQuJGJvZHkpIC8vIGRvbid0IG1vdmUgbW9kYWxzIGRvbSBwb3NpdGlvblxuICAgICAgfVxuXG4gICAgICB0aGF0LiRlbGVtZW50XG4gICAgICAgIC5zaG93KClcbiAgICAgICAgLnNjcm9sbFRvcCgwKVxuXG4gICAgICB0aGF0LmFkanVzdERpYWxvZygpXG5cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgIHRoYXQuJGVsZW1lbnRbMF0ub2Zmc2V0V2lkdGggLy8gZm9yY2UgcmVmbG93XG4gICAgICB9XG5cbiAgICAgIHRoYXQuJGVsZW1lbnQuYWRkQ2xhc3MoJ2luJylcblxuICAgICAgdGhhdC5lbmZvcmNlRm9jdXMoKVxuXG4gICAgICB2YXIgZSA9ICQuRXZlbnQoJ3Nob3duLmJzLm1vZGFsJywgeyByZWxhdGVkVGFyZ2V0OiBfcmVsYXRlZFRhcmdldCB9KVxuXG4gICAgICB0cmFuc2l0aW9uID9cbiAgICAgICAgdGhhdC4kZGlhbG9nIC8vIHdhaXQgZm9yIG1vZGFsIHRvIHNsaWRlIGluXG4gICAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKCdmb2N1cycpLnRyaWdnZXIoZSlcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChNb2RhbC5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcignZm9jdXMnKS50cmlnZ2VyKGUpXG4gICAgfSlcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoZSkgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICBlID0gJC5FdmVudCgnaGlkZS5icy5tb2RhbCcpXG5cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSlcblxuICAgIGlmICghdGhpcy5pc1Nob3duIHx8IGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgdGhpcy5pc1Nob3duID0gZmFsc2VcblxuICAgIHRoaXMuZXNjYXBlKClcbiAgICB0aGlzLnJlc2l6ZSgpXG5cbiAgICAkKGRvY3VtZW50KS5vZmYoJ2ZvY3VzaW4uYnMubW9kYWwnKVxuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLnJlbW92ZUNsYXNzKCdpbicpXG4gICAgICAub2ZmKCdjbGljay5kaXNtaXNzLmJzLm1vZGFsJylcbiAgICAgIC5vZmYoJ21vdXNldXAuZGlzbWlzcy5icy5tb2RhbCcpXG5cbiAgICB0aGlzLiRkaWFsb2cub2ZmKCdtb3VzZWRvd24uZGlzbWlzcy5icy5tb2RhbCcpXG5cbiAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdmYWRlJykgP1xuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCAkLnByb3h5KHRoaXMuaGlkZU1vZGFsLCB0aGlzKSlcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKE1vZGFsLlRSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgIHRoaXMuaGlkZU1vZGFsKClcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5lbmZvcmNlRm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgJChkb2N1bWVudClcbiAgICAgIC5vZmYoJ2ZvY3VzaW4uYnMubW9kYWwnKSAvLyBndWFyZCBhZ2FpbnN0IGluZmluaXRlIGZvY3VzIGxvb3BcbiAgICAgIC5vbignZm9jdXNpbi5icy5tb2RhbCcsICQucHJveHkoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKGRvY3VtZW50ICE9PSBlLnRhcmdldCAmJlxuICAgICAgICAgICAgdGhpcy4kZWxlbWVudFswXSAhPT0gZS50YXJnZXQgJiZcbiAgICAgICAgICAgICF0aGlzLiRlbGVtZW50LmhhcyhlLnRhcmdldCkubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdmb2N1cycpXG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMpKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmVzY2FwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5pc1Nob3duICYmIHRoaXMub3B0aW9ucy5rZXlib2FyZCkge1xuICAgICAgdGhpcy4kZWxlbWVudC5vbigna2V5ZG93bi5kaXNtaXNzLmJzLm1vZGFsJywgJC5wcm94eShmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLndoaWNoID09IDI3ICYmIHRoaXMuaGlkZSgpXG4gICAgICB9LCB0aGlzKSlcbiAgICB9IGVsc2UgaWYgKCF0aGlzLmlzU2hvd24pIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdrZXlkb3duLmRpc21pc3MuYnMubW9kYWwnKVxuICAgIH1cbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuaXNTaG93bikge1xuICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUuYnMubW9kYWwnLCAkLnByb3h5KHRoaXMuaGFuZGxlVXBkYXRlLCB0aGlzKSlcbiAgICB9IGVsc2Uge1xuICAgICAgJCh3aW5kb3cpLm9mZigncmVzaXplLmJzLm1vZGFsJylcbiAgICB9XG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuaGlkZU1vZGFsID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHRoaXMuJGVsZW1lbnQuaGlkZSgpXG4gICAgdGhpcy5iYWNrZHJvcChmdW5jdGlvbiAoKSB7XG4gICAgICB0aGF0LiRib2R5LnJlbW92ZUNsYXNzKCdtb2RhbC1vcGVuJylcbiAgICAgIHRoYXQucmVzZXRBZGp1c3RtZW50cygpXG4gICAgICB0aGF0LnJlc2V0U2Nyb2xsYmFyKClcbiAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcignaGlkZGVuLmJzLm1vZGFsJylcbiAgICB9KVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnJlbW92ZUJhY2tkcm9wID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuJGJhY2tkcm9wICYmIHRoaXMuJGJhY2tkcm9wLnJlbW92ZSgpXG4gICAgdGhpcy4kYmFja2Ryb3AgPSBudWxsXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuYmFja2Ryb3AgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICB2YXIgYW5pbWF0ZSA9IHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA/ICdmYWRlJyA6ICcnXG5cbiAgICBpZiAodGhpcy5pc1Nob3duICYmIHRoaXMub3B0aW9ucy5iYWNrZHJvcCkge1xuICAgICAgdmFyIGRvQW5pbWF0ZSA9ICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIGFuaW1hdGVcblxuICAgICAgdGhpcy4kYmFja2Ryb3AgPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKVxuICAgICAgICAuYWRkQ2xhc3MoJ21vZGFsLWJhY2tkcm9wICcgKyBhbmltYXRlKVxuICAgICAgICAuYXBwZW5kVG8odGhpcy4kYm9keSlcblxuICAgICAgdGhpcy4kZWxlbWVudC5vbignY2xpY2suZGlzbWlzcy5icy5tb2RhbCcsICQucHJveHkoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKHRoaXMuaWdub3JlQmFja2Ryb3BDbGljaykge1xuICAgICAgICAgIHRoaXMuaWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlXG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSBlLmN1cnJlbnRUYXJnZXQpIHJldHVyblxuICAgICAgICB0aGlzLm9wdGlvbnMuYmFja2Ryb3AgPT0gJ3N0YXRpYydcbiAgICAgICAgICA/IHRoaXMuJGVsZW1lbnRbMF0uZm9jdXMoKVxuICAgICAgICAgIDogdGhpcy5oaWRlKClcbiAgICAgIH0sIHRoaXMpKVxuXG4gICAgICBpZiAoZG9BbmltYXRlKSB0aGlzLiRiYWNrZHJvcFswXS5vZmZzZXRXaWR0aCAvLyBmb3JjZSByZWZsb3dcblxuICAgICAgdGhpcy4kYmFja2Ryb3AuYWRkQ2xhc3MoJ2luJylcblxuICAgICAgaWYgKCFjYWxsYmFjaykgcmV0dXJuXG5cbiAgICAgIGRvQW5pbWF0ZSA/XG4gICAgICAgIHRoaXMuJGJhY2tkcm9wXG4gICAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgY2FsbGJhY2spXG4gICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKE1vZGFsLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgICAgY2FsbGJhY2soKVxuXG4gICAgfSBlbHNlIGlmICghdGhpcy5pc1Nob3duICYmIHRoaXMuJGJhY2tkcm9wKSB7XG4gICAgICB0aGlzLiRiYWNrZHJvcC5yZW1vdmVDbGFzcygnaW4nKVxuXG4gICAgICB2YXIgY2FsbGJhY2tSZW1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoYXQucmVtb3ZlQmFja2Ryb3AoKVxuICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgICB9XG4gICAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdmYWRlJykgP1xuICAgICAgICB0aGlzLiRiYWNrZHJvcFxuICAgICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGNhbGxiYWNrUmVtb3ZlKVxuICAgICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChNb2RhbC5CQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICAgIGNhbGxiYWNrUmVtb3ZlKClcblxuICAgIH0gZWxzZSBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKClcbiAgICB9XG4gIH1cblxuICAvLyB0aGVzZSBmb2xsb3dpbmcgbWV0aG9kcyBhcmUgdXNlZCB0byBoYW5kbGUgb3ZlcmZsb3dpbmcgbW9kYWxzXG5cbiAgTW9kYWwucHJvdG90eXBlLmhhbmRsZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmFkanVzdERpYWxvZygpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuYWRqdXN0RGlhbG9nID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBtb2RhbElzT3ZlcmZsb3dpbmcgPSB0aGlzLiRlbGVtZW50WzBdLnNjcm9sbEhlaWdodCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHRcblxuICAgIHRoaXMuJGVsZW1lbnQuY3NzKHtcbiAgICAgIHBhZGRpbmdMZWZ0OiAgIXRoaXMuYm9keUlzT3ZlcmZsb3dpbmcgJiYgbW9kYWxJc092ZXJmbG93aW5nID8gdGhpcy5zY3JvbGxiYXJXaWR0aCA6ICcnLFxuICAgICAgcGFkZGluZ1JpZ2h0OiB0aGlzLmJvZHlJc092ZXJmbG93aW5nICYmICFtb2RhbElzT3ZlcmZsb3dpbmcgPyB0aGlzLnNjcm9sbGJhcldpZHRoIDogJydcbiAgICB9KVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnJlc2V0QWRqdXN0bWVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy4kZWxlbWVudC5jc3Moe1xuICAgICAgcGFkZGluZ0xlZnQ6ICcnLFxuICAgICAgcGFkZGluZ1JpZ2h0OiAnJ1xuICAgIH0pXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuY2hlY2tTY3JvbGxiYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGZ1bGxXaW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoXG4gICAgaWYgKCFmdWxsV2luZG93V2lkdGgpIHsgLy8gd29ya2Fyb3VuZCBmb3IgbWlzc2luZyB3aW5kb3cuaW5uZXJXaWR0aCBpbiBJRThcbiAgICAgIHZhciBkb2N1bWVudEVsZW1lbnRSZWN0ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgICBmdWxsV2luZG93V2lkdGggPSBkb2N1bWVudEVsZW1lbnRSZWN0LnJpZ2h0IC0gTWF0aC5hYnMoZG9jdW1lbnRFbGVtZW50UmVjdC5sZWZ0KVxuICAgIH1cbiAgICB0aGlzLmJvZHlJc092ZXJmbG93aW5nID0gZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aCA8IGZ1bGxXaW5kb3dXaWR0aFxuICAgIHRoaXMuc2Nyb2xsYmFyV2lkdGggPSB0aGlzLm1lYXN1cmVTY3JvbGxiYXIoKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnNldFNjcm9sbGJhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYm9keVBhZCA9IHBhcnNlSW50KCh0aGlzLiRib2R5LmNzcygncGFkZGluZy1yaWdodCcpIHx8IDApLCAxMClcbiAgICB0aGlzLm9yaWdpbmFsQm9keVBhZCA9IGRvY3VtZW50LmJvZHkuc3R5bGUucGFkZGluZ1JpZ2h0IHx8ICcnXG4gICAgaWYgKHRoaXMuYm9keUlzT3ZlcmZsb3dpbmcpIHRoaXMuJGJvZHkuY3NzKCdwYWRkaW5nLXJpZ2h0JywgYm9keVBhZCArIHRoaXMuc2Nyb2xsYmFyV2lkdGgpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUucmVzZXRTY3JvbGxiYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy4kYm9keS5jc3MoJ3BhZGRpbmctcmlnaHQnLCB0aGlzLm9yaWdpbmFsQm9keVBhZClcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5tZWFzdXJlU2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkgeyAvLyB0aHggd2Fsc2hcbiAgICB2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBzY3JvbGxEaXYuY2xhc3NOYW1lID0gJ21vZGFsLXNjcm9sbGJhci1tZWFzdXJlJ1xuICAgIHRoaXMuJGJvZHkuYXBwZW5kKHNjcm9sbERpdilcbiAgICB2YXIgc2Nyb2xsYmFyV2lkdGggPSBzY3JvbGxEaXYub2Zmc2V0V2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGhcbiAgICB0aGlzLiRib2R5WzBdLnJlbW92ZUNoaWxkKHNjcm9sbERpdilcbiAgICByZXR1cm4gc2Nyb2xsYmFyV2lkdGhcbiAgfVxuXG5cbiAgLy8gTU9EQUwgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uLCBfcmVsYXRlZFRhcmdldCkge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLm1vZGFsJylcbiAgICAgIHZhciBvcHRpb25zID0gJC5leHRlbmQoe30sIE1vZGFsLkRFRkFVTFRTLCAkdGhpcy5kYXRhKCksIHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uKVxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLm1vZGFsJywgKGRhdGEgPSBuZXcgTW9kYWwodGhpcywgb3B0aW9ucykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXShfcmVsYXRlZFRhcmdldClcbiAgICAgIGVsc2UgaWYgKG9wdGlvbnMuc2hvdykgZGF0YS5zaG93KF9yZWxhdGVkVGFyZ2V0KVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5tb2RhbFxuXG4gICQuZm4ubW9kYWwgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5tb2RhbC5Db25zdHJ1Y3RvciA9IE1vZGFsXG5cblxuICAvLyBNT0RBTCBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PVxuXG4gICQuZm4ubW9kYWwubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLm1vZGFsID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gTU9EQUwgREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09PT1cblxuICAkKGRvY3VtZW50KS5vbignY2xpY2suYnMubW9kYWwuZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlPVwibW9kYWxcIl0nLCBmdW5jdGlvbiAoZSkge1xuICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgIHZhciBocmVmICAgID0gJHRoaXMuYXR0cignaHJlZicpXG4gICAgdmFyICR0YXJnZXQgPSAkKCR0aGlzLmF0dHIoJ2RhdGEtdGFyZ2V0JykgfHwgKGhyZWYgJiYgaHJlZi5yZXBsYWNlKC8uKig/PSNbXlxcc10rJCkvLCAnJykpKSAvLyBzdHJpcCBmb3IgaWU3XG4gICAgdmFyIG9wdGlvbiAgPSAkdGFyZ2V0LmRhdGEoJ2JzLm1vZGFsJykgPyAndG9nZ2xlJyA6ICQuZXh0ZW5kKHsgcmVtb3RlOiAhLyMvLnRlc3QoaHJlZikgJiYgaHJlZiB9LCAkdGFyZ2V0LmRhdGEoKSwgJHRoaXMuZGF0YSgpKVxuXG4gICAgaWYgKCR0aGlzLmlzKCdhJykpIGUucHJldmVudERlZmF1bHQoKVxuXG4gICAgJHRhcmdldC5vbmUoJ3Nob3cuYnMubW9kYWwnLCBmdW5jdGlvbiAoc2hvd0V2ZW50KSB7XG4gICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm4gLy8gb25seSByZWdpc3RlciBmb2N1cyByZXN0b3JlciBpZiBtb2RhbCB3aWxsIGFjdHVhbGx5IGdldCBzaG93blxuICAgICAgJHRhcmdldC5vbmUoJ2hpZGRlbi5icy5tb2RhbCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJHRoaXMuaXMoJzp2aXNpYmxlJykgJiYgJHRoaXMudHJpZ2dlcignZm9jdXMnKVxuICAgICAgfSlcbiAgICB9KVxuICAgIFBsdWdpbi5jYWxsKCR0YXJnZXQsIG9wdGlvbiwgdGhpcylcbiAgfSlcblxufShqUXVlcnkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogdG9vbHRpcC5qcyB2My4zLjdcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI3Rvb2x0aXBcbiAqIEluc3BpcmVkIGJ5IHRoZSBvcmlnaW5hbCBqUXVlcnkudGlwc3kgYnkgSmFzb24gRnJhbWVcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBUT09MVElQIFBVQkxJQyBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgVG9vbHRpcCA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlICAgICAgID0gbnVsbFxuICAgIHRoaXMub3B0aW9ucyAgICA9IG51bGxcbiAgICB0aGlzLmVuYWJsZWQgICAgPSBudWxsXG4gICAgdGhpcy50aW1lb3V0ICAgID0gbnVsbFxuICAgIHRoaXMuaG92ZXJTdGF0ZSA9IG51bGxcbiAgICB0aGlzLiRlbGVtZW50ICAgPSBudWxsXG4gICAgdGhpcy5pblN0YXRlICAgID0gbnVsbFxuXG4gICAgdGhpcy5pbml0KCd0b29sdGlwJywgZWxlbWVudCwgb3B0aW9ucylcbiAgfVxuXG4gIFRvb2x0aXAuVkVSU0lPTiAgPSAnMy4zLjcnXG5cbiAgVG9vbHRpcC5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwXG5cbiAgVG9vbHRpcC5ERUZBVUxUUyA9IHtcbiAgICBhbmltYXRpb246IHRydWUsXG4gICAgcGxhY2VtZW50OiAndG9wJyxcbiAgICBzZWxlY3RvcjogZmFsc2UsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwidG9vbHRpcFwiIHJvbGU9XCJ0b29sdGlwXCI+PGRpdiBjbGFzcz1cInRvb2x0aXAtYXJyb3dcIj48L2Rpdj48ZGl2IGNsYXNzPVwidG9vbHRpcC1pbm5lclwiPjwvZGl2PjwvZGl2PicsXG4gICAgdHJpZ2dlcjogJ2hvdmVyIGZvY3VzJyxcbiAgICB0aXRsZTogJycsXG4gICAgZGVsYXk6IDAsXG4gICAgaHRtbDogZmFsc2UsXG4gICAgY29udGFpbmVyOiBmYWxzZSxcbiAgICB2aWV3cG9ydDoge1xuICAgICAgc2VsZWN0b3I6ICdib2R5JyxcbiAgICAgIHBhZGRpbmc6IDBcbiAgICB9XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKHR5cGUsIGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmVuYWJsZWQgICA9IHRydWVcbiAgICB0aGlzLnR5cGUgICAgICA9IHR5cGVcbiAgICB0aGlzLiRlbGVtZW50ICA9ICQoZWxlbWVudClcbiAgICB0aGlzLm9wdGlvbnMgICA9IHRoaXMuZ2V0T3B0aW9ucyhvcHRpb25zKVxuICAgIHRoaXMuJHZpZXdwb3J0ID0gdGhpcy5vcHRpb25zLnZpZXdwb3J0ICYmICQoJC5pc0Z1bmN0aW9uKHRoaXMub3B0aW9ucy52aWV3cG9ydCkgPyB0aGlzLm9wdGlvbnMudmlld3BvcnQuY2FsbCh0aGlzLCB0aGlzLiRlbGVtZW50KSA6ICh0aGlzLm9wdGlvbnMudmlld3BvcnQuc2VsZWN0b3IgfHwgdGhpcy5vcHRpb25zLnZpZXdwb3J0KSlcbiAgICB0aGlzLmluU3RhdGUgICA9IHsgY2xpY2s6IGZhbHNlLCBob3ZlcjogZmFsc2UsIGZvY3VzOiBmYWxzZSB9XG5cbiAgICBpZiAodGhpcy4kZWxlbWVudFswXSBpbnN0YW5jZW9mIGRvY3VtZW50LmNvbnN0cnVjdG9yICYmICF0aGlzLm9wdGlvbnMuc2VsZWN0b3IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYHNlbGVjdG9yYCBvcHRpb24gbXVzdCBiZSBzcGVjaWZpZWQgd2hlbiBpbml0aWFsaXppbmcgJyArIHRoaXMudHlwZSArICcgb24gdGhlIHdpbmRvdy5kb2N1bWVudCBvYmplY3QhJylcbiAgICB9XG5cbiAgICB2YXIgdHJpZ2dlcnMgPSB0aGlzLm9wdGlvbnMudHJpZ2dlci5zcGxpdCgnICcpXG5cbiAgICBmb3IgKHZhciBpID0gdHJpZ2dlcnMubGVuZ3RoOyBpLS07KSB7XG4gICAgICB2YXIgdHJpZ2dlciA9IHRyaWdnZXJzW2ldXG5cbiAgICAgIGlmICh0cmlnZ2VyID09ICdjbGljaycpIHtcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbignY2xpY2suJyArIHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLnNlbGVjdG9yLCAkLnByb3h5KHRoaXMudG9nZ2xlLCB0aGlzKSlcbiAgICAgIH0gZWxzZSBpZiAodHJpZ2dlciAhPSAnbWFudWFsJykge1xuICAgICAgICB2YXIgZXZlbnRJbiAgPSB0cmlnZ2VyID09ICdob3ZlcicgPyAnbW91c2VlbnRlcicgOiAnZm9jdXNpbidcbiAgICAgICAgdmFyIGV2ZW50T3V0ID0gdHJpZ2dlciA9PSAnaG92ZXInID8gJ21vdXNlbGVhdmUnIDogJ2ZvY3Vzb3V0J1xuXG4gICAgICAgIHRoaXMuJGVsZW1lbnQub24oZXZlbnRJbiAgKyAnLicgKyB0aGlzLnR5cGUsIHRoaXMub3B0aW9ucy5zZWxlY3RvciwgJC5wcm94eSh0aGlzLmVudGVyLCB0aGlzKSlcbiAgICAgICAgdGhpcy4kZWxlbWVudC5vbihldmVudE91dCArICcuJyArIHRoaXMudHlwZSwgdGhpcy5vcHRpb25zLnNlbGVjdG9yLCAkLnByb3h5KHRoaXMubGVhdmUsIHRoaXMpKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMub3B0aW9ucy5zZWxlY3RvciA/XG4gICAgICAodGhpcy5fb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMsIHsgdHJpZ2dlcjogJ21hbnVhbCcsIHNlbGVjdG9yOiAnJyB9KSkgOlxuICAgICAgdGhpcy5maXhUaXRsZSgpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXREZWZhdWx0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gVG9vbHRpcC5ERUZBVUxUU1xuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCB0aGlzLmdldERlZmF1bHRzKCksIHRoaXMuJGVsZW1lbnQuZGF0YSgpLCBvcHRpb25zKVxuXG4gICAgaWYgKG9wdGlvbnMuZGVsYXkgJiYgdHlwZW9mIG9wdGlvbnMuZGVsYXkgPT0gJ251bWJlcicpIHtcbiAgICAgIG9wdGlvbnMuZGVsYXkgPSB7XG4gICAgICAgIHNob3c6IG9wdGlvbnMuZGVsYXksXG4gICAgICAgIGhpZGU6IG9wdGlvbnMuZGVsYXlcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb3B0aW9uc1xuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0RGVsZWdhdGVPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvcHRpb25zICA9IHt9XG4gICAgdmFyIGRlZmF1bHRzID0gdGhpcy5nZXREZWZhdWx0cygpXG5cbiAgICB0aGlzLl9vcHRpb25zICYmICQuZWFjaCh0aGlzLl9vcHRpb25zLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGRlZmF1bHRzW2tleV0gIT0gdmFsdWUpIG9wdGlvbnNba2V5XSA9IHZhbHVlXG4gICAgfSlcblxuICAgIHJldHVybiBvcHRpb25zXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5lbnRlciA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICB2YXIgc2VsZiA9IG9iaiBpbnN0YW5jZW9mIHRoaXMuY29uc3RydWN0b3IgP1xuICAgICAgb2JqIDogJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSlcblxuICAgIGlmICghc2VsZikge1xuICAgICAgc2VsZiA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKG9iai5jdXJyZW50VGFyZ2V0LCB0aGlzLmdldERlbGVnYXRlT3B0aW9ucygpKVxuICAgICAgJChvYmouY3VycmVudFRhcmdldCkuZGF0YSgnYnMuJyArIHRoaXMudHlwZSwgc2VsZilcbiAgICB9XG5cbiAgICBpZiAob2JqIGluc3RhbmNlb2YgJC5FdmVudCkge1xuICAgICAgc2VsZi5pblN0YXRlW29iai50eXBlID09ICdmb2N1c2luJyA/ICdmb2N1cycgOiAnaG92ZXInXSA9IHRydWVcbiAgICB9XG5cbiAgICBpZiAoc2VsZi50aXAoKS5oYXNDbGFzcygnaW4nKSB8fCBzZWxmLmhvdmVyU3RhdGUgPT0gJ2luJykge1xuICAgICAgc2VsZi5ob3ZlclN0YXRlID0gJ2luJ1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0KHNlbGYudGltZW91dClcblxuICAgIHNlbGYuaG92ZXJTdGF0ZSA9ICdpbidcblxuICAgIGlmICghc2VsZi5vcHRpb25zLmRlbGF5IHx8ICFzZWxmLm9wdGlvbnMuZGVsYXkuc2hvdykgcmV0dXJuIHNlbGYuc2hvdygpXG5cbiAgICBzZWxmLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLmhvdmVyU3RhdGUgPT0gJ2luJykgc2VsZi5zaG93KClcbiAgICB9LCBzZWxmLm9wdGlvbnMuZGVsYXkuc2hvdylcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmlzSW5TdGF0ZVRydWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHRoaXMuaW5TdGF0ZSkge1xuICAgICAgaWYgKHRoaXMuaW5TdGF0ZVtrZXldKSByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUubGVhdmUgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgdmFyIHNlbGYgPSBvYmogaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yID9cbiAgICAgIG9iaiA6ICQob2JqLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUpXG5cbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHNlbGYgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihvYmouY3VycmVudFRhcmdldCwgdGhpcy5nZXREZWxlZ2F0ZU9wdGlvbnMoKSlcbiAgICAgICQob2JqLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUsIHNlbGYpXG4gICAgfVxuXG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mICQuRXZlbnQpIHtcbiAgICAgIHNlbGYuaW5TdGF0ZVtvYmoudHlwZSA9PSAnZm9jdXNvdXQnID8gJ2ZvY3VzJyA6ICdob3ZlciddID0gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoc2VsZi5pc0luU3RhdGVUcnVlKCkpIHJldHVyblxuXG4gICAgY2xlYXJUaW1lb3V0KHNlbGYudGltZW91dClcblxuICAgIHNlbGYuaG92ZXJTdGF0ZSA9ICdvdXQnXG5cbiAgICBpZiAoIXNlbGYub3B0aW9ucy5kZWxheSB8fCAhc2VsZi5vcHRpb25zLmRlbGF5LmhpZGUpIHJldHVybiBzZWxmLmhpZGUoKVxuXG4gICAgc2VsZi50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5ob3ZlclN0YXRlID09ICdvdXQnKSBzZWxmLmhpZGUoKVxuICAgIH0sIHNlbGYub3B0aW9ucy5kZWxheS5oaWRlKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZSA9ICQuRXZlbnQoJ3Nob3cuYnMuJyArIHRoaXMudHlwZSlcblxuICAgIGlmICh0aGlzLmhhc0NvbnRlbnQoKSAmJiB0aGlzLmVuYWJsZWQpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgICB2YXIgaW5Eb20gPSAkLmNvbnRhaW5zKHRoaXMuJGVsZW1lbnRbMF0ub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMuJGVsZW1lbnRbMF0pXG4gICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCAhaW5Eb20pIHJldHVyblxuICAgICAgdmFyIHRoYXQgPSB0aGlzXG5cbiAgICAgIHZhciAkdGlwID0gdGhpcy50aXAoKVxuXG4gICAgICB2YXIgdGlwSWQgPSB0aGlzLmdldFVJRCh0aGlzLnR5cGUpXG5cbiAgICAgIHRoaXMuc2V0Q29udGVudCgpXG4gICAgICAkdGlwLmF0dHIoJ2lkJywgdGlwSWQpXG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtZGVzY3JpYmVkYnknLCB0aXBJZClcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRpb24pICR0aXAuYWRkQ2xhc3MoJ2ZhZGUnKVxuXG4gICAgICB2YXIgcGxhY2VtZW50ID0gdHlwZW9mIHRoaXMub3B0aW9ucy5wbGFjZW1lbnQgPT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgIHRoaXMub3B0aW9ucy5wbGFjZW1lbnQuY2FsbCh0aGlzLCAkdGlwWzBdLCB0aGlzLiRlbGVtZW50WzBdKSA6XG4gICAgICAgIHRoaXMub3B0aW9ucy5wbGFjZW1lbnRcblxuICAgICAgdmFyIGF1dG9Ub2tlbiA9IC9cXHM/YXV0bz9cXHM/L2lcbiAgICAgIHZhciBhdXRvUGxhY2UgPSBhdXRvVG9rZW4udGVzdChwbGFjZW1lbnQpXG4gICAgICBpZiAoYXV0b1BsYWNlKSBwbGFjZW1lbnQgPSBwbGFjZW1lbnQucmVwbGFjZShhdXRvVG9rZW4sICcnKSB8fCAndG9wJ1xuXG4gICAgICAkdGlwXG4gICAgICAgIC5kZXRhY2goKVxuICAgICAgICAuY3NzKHsgdG9wOiAwLCBsZWZ0OiAwLCBkaXNwbGF5OiAnYmxvY2snIH0pXG4gICAgICAgIC5hZGRDbGFzcyhwbGFjZW1lbnQpXG4gICAgICAgIC5kYXRhKCdicy4nICsgdGhpcy50eXBlLCB0aGlzKVxuXG4gICAgICB0aGlzLm9wdGlvbnMuY29udGFpbmVyID8gJHRpcC5hcHBlbmRUbyh0aGlzLm9wdGlvbnMuY29udGFpbmVyKSA6ICR0aXAuaW5zZXJ0QWZ0ZXIodGhpcy4kZWxlbWVudClcbiAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignaW5zZXJ0ZWQuYnMuJyArIHRoaXMudHlwZSlcblxuICAgICAgdmFyIHBvcyAgICAgICAgICA9IHRoaXMuZ2V0UG9zaXRpb24oKVxuICAgICAgdmFyIGFjdHVhbFdpZHRoICA9ICR0aXBbMF0ub2Zmc2V0V2lkdGhcbiAgICAgIHZhciBhY3R1YWxIZWlnaHQgPSAkdGlwWzBdLm9mZnNldEhlaWdodFxuXG4gICAgICBpZiAoYXV0b1BsYWNlKSB7XG4gICAgICAgIHZhciBvcmdQbGFjZW1lbnQgPSBwbGFjZW1lbnRcbiAgICAgICAgdmFyIHZpZXdwb3J0RGltID0gdGhpcy5nZXRQb3NpdGlvbih0aGlzLiR2aWV3cG9ydClcblxuICAgICAgICBwbGFjZW1lbnQgPSBwbGFjZW1lbnQgPT0gJ2JvdHRvbScgJiYgcG9zLmJvdHRvbSArIGFjdHVhbEhlaWdodCA+IHZpZXdwb3J0RGltLmJvdHRvbSA/ICd0b3AnICAgIDpcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50ID09ICd0b3AnICAgICYmIHBvcy50b3AgICAgLSBhY3R1YWxIZWlnaHQgPCB2aWV3cG9ydERpbS50b3AgICAgPyAnYm90dG9tJyA6XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudCA9PSAncmlnaHQnICAmJiBwb3MucmlnaHQgICsgYWN0dWFsV2lkdGggID4gdmlld3BvcnREaW0ud2lkdGggID8gJ2xlZnQnICAgOlxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ2xlZnQnICAgJiYgcG9zLmxlZnQgICAtIGFjdHVhbFdpZHRoICA8IHZpZXdwb3J0RGltLmxlZnQgICA/ICdyaWdodCcgIDpcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VtZW50XG5cbiAgICAgICAgJHRpcFxuICAgICAgICAgIC5yZW1vdmVDbGFzcyhvcmdQbGFjZW1lbnQpXG4gICAgICAgICAgLmFkZENsYXNzKHBsYWNlbWVudClcbiAgICAgIH1cblxuICAgICAgdmFyIGNhbGN1bGF0ZWRPZmZzZXQgPSB0aGlzLmdldENhbGN1bGF0ZWRPZmZzZXQocGxhY2VtZW50LCBwb3MsIGFjdHVhbFdpZHRoLCBhY3R1YWxIZWlnaHQpXG5cbiAgICAgIHRoaXMuYXBwbHlQbGFjZW1lbnQoY2FsY3VsYXRlZE9mZnNldCwgcGxhY2VtZW50KVxuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwcmV2SG92ZXJTdGF0ZSA9IHRoYXQuaG92ZXJTdGF0ZVxuICAgICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoJ3Nob3duLmJzLicgKyB0aGF0LnR5cGUpXG4gICAgICAgIHRoYXQuaG92ZXJTdGF0ZSA9IG51bGxcblxuICAgICAgICBpZiAocHJldkhvdmVyU3RhdGUgPT0gJ291dCcpIHRoYXQubGVhdmUodGhhdClcbiAgICAgIH1cblxuICAgICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy4kdGlwLmhhc0NsYXNzKCdmYWRlJykgP1xuICAgICAgICAkdGlwXG4gICAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgY29tcGxldGUpXG4gICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKFRvb2x0aXAuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgICBjb21wbGV0ZSgpXG4gICAgfVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuYXBwbHlQbGFjZW1lbnQgPSBmdW5jdGlvbiAob2Zmc2V0LCBwbGFjZW1lbnQpIHtcbiAgICB2YXIgJHRpcCAgID0gdGhpcy50aXAoKVxuICAgIHZhciB3aWR0aCAgPSAkdGlwWzBdLm9mZnNldFdpZHRoXG4gICAgdmFyIGhlaWdodCA9ICR0aXBbMF0ub2Zmc2V0SGVpZ2h0XG5cbiAgICAvLyBtYW51YWxseSByZWFkIG1hcmdpbnMgYmVjYXVzZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaW5jbHVkZXMgZGlmZmVyZW5jZVxuICAgIHZhciBtYXJnaW5Ub3AgPSBwYXJzZUludCgkdGlwLmNzcygnbWFyZ2luLXRvcCcpLCAxMClcbiAgICB2YXIgbWFyZ2luTGVmdCA9IHBhcnNlSW50KCR0aXAuY3NzKCdtYXJnaW4tbGVmdCcpLCAxMClcblxuICAgIC8vIHdlIG11c3QgY2hlY2sgZm9yIE5hTiBmb3IgaWUgOC85XG4gICAgaWYgKGlzTmFOKG1hcmdpblRvcCkpICBtYXJnaW5Ub3AgID0gMFxuICAgIGlmIChpc05hTihtYXJnaW5MZWZ0KSkgbWFyZ2luTGVmdCA9IDBcblxuICAgIG9mZnNldC50b3AgICs9IG1hcmdpblRvcFxuICAgIG9mZnNldC5sZWZ0ICs9IG1hcmdpbkxlZnRcblxuICAgIC8vICQuZm4ub2Zmc2V0IGRvZXNuJ3Qgcm91bmQgcGl4ZWwgdmFsdWVzXG4gICAgLy8gc28gd2UgdXNlIHNldE9mZnNldCBkaXJlY3RseSB3aXRoIG91ciBvd24gZnVuY3Rpb24gQi0wXG4gICAgJC5vZmZzZXQuc2V0T2Zmc2V0KCR0aXBbMF0sICQuZXh0ZW5kKHtcbiAgICAgIHVzaW5nOiBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgJHRpcC5jc3Moe1xuICAgICAgICAgIHRvcDogTWF0aC5yb3VuZChwcm9wcy50b3ApLFxuICAgICAgICAgIGxlZnQ6IE1hdGgucm91bmQocHJvcHMubGVmdClcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LCBvZmZzZXQpLCAwKVxuXG4gICAgJHRpcC5hZGRDbGFzcygnaW4nKVxuXG4gICAgLy8gY2hlY2sgdG8gc2VlIGlmIHBsYWNpbmcgdGlwIGluIG5ldyBvZmZzZXQgY2F1c2VkIHRoZSB0aXAgdG8gcmVzaXplIGl0c2VsZlxuICAgIHZhciBhY3R1YWxXaWR0aCAgPSAkdGlwWzBdLm9mZnNldFdpZHRoXG4gICAgdmFyIGFjdHVhbEhlaWdodCA9ICR0aXBbMF0ub2Zmc2V0SGVpZ2h0XG5cbiAgICBpZiAocGxhY2VtZW50ID09ICd0b3AnICYmIGFjdHVhbEhlaWdodCAhPSBoZWlnaHQpIHtcbiAgICAgIG9mZnNldC50b3AgPSBvZmZzZXQudG9wICsgaGVpZ2h0IC0gYWN0dWFsSGVpZ2h0XG4gICAgfVxuXG4gICAgdmFyIGRlbHRhID0gdGhpcy5nZXRWaWV3cG9ydEFkanVzdGVkRGVsdGEocGxhY2VtZW50LCBvZmZzZXQsIGFjdHVhbFdpZHRoLCBhY3R1YWxIZWlnaHQpXG5cbiAgICBpZiAoZGVsdGEubGVmdCkgb2Zmc2V0LmxlZnQgKz0gZGVsdGEubGVmdFxuICAgIGVsc2Ugb2Zmc2V0LnRvcCArPSBkZWx0YS50b3BcblxuICAgIHZhciBpc1ZlcnRpY2FsICAgICAgICAgID0gL3RvcHxib3R0b20vLnRlc3QocGxhY2VtZW50KVxuICAgIHZhciBhcnJvd0RlbHRhICAgICAgICAgID0gaXNWZXJ0aWNhbCA/IGRlbHRhLmxlZnQgKiAyIC0gd2lkdGggKyBhY3R1YWxXaWR0aCA6IGRlbHRhLnRvcCAqIDIgLSBoZWlnaHQgKyBhY3R1YWxIZWlnaHRcbiAgICB2YXIgYXJyb3dPZmZzZXRQb3NpdGlvbiA9IGlzVmVydGljYWwgPyAnb2Zmc2V0V2lkdGgnIDogJ29mZnNldEhlaWdodCdcblxuICAgICR0aXAub2Zmc2V0KG9mZnNldClcbiAgICB0aGlzLnJlcGxhY2VBcnJvdyhhcnJvd0RlbHRhLCAkdGlwWzBdW2Fycm93T2Zmc2V0UG9zaXRpb25dLCBpc1ZlcnRpY2FsKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUucmVwbGFjZUFycm93ID0gZnVuY3Rpb24gKGRlbHRhLCBkaW1lbnNpb24sIGlzVmVydGljYWwpIHtcbiAgICB0aGlzLmFycm93KClcbiAgICAgIC5jc3MoaXNWZXJ0aWNhbCA/ICdsZWZ0JyA6ICd0b3AnLCA1MCAqICgxIC0gZGVsdGEgLyBkaW1lbnNpb24pICsgJyUnKVxuICAgICAgLmNzcyhpc1ZlcnRpY2FsID8gJ3RvcCcgOiAnbGVmdCcsICcnKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuc2V0Q29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJHRpcCAgPSB0aGlzLnRpcCgpXG4gICAgdmFyIHRpdGxlID0gdGhpcy5nZXRUaXRsZSgpXG5cbiAgICAkdGlwLmZpbmQoJy50b29sdGlwLWlubmVyJylbdGhpcy5vcHRpb25zLmh0bWwgPyAnaHRtbCcgOiAndGV4dCddKHRpdGxlKVxuICAgICR0aXAucmVtb3ZlQ2xhc3MoJ2ZhZGUgaW4gdG9wIGJvdHRvbSBsZWZ0IHJpZ2h0JylcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICB2YXIgJHRpcCA9ICQodGhpcy4kdGlwKVxuICAgIHZhciBlICAgID0gJC5FdmVudCgnaGlkZS5icy4nICsgdGhpcy50eXBlKVxuXG4gICAgZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICBpZiAodGhhdC5ob3ZlclN0YXRlICE9ICdpbicpICR0aXAuZGV0YWNoKClcbiAgICAgIGlmICh0aGF0LiRlbGVtZW50KSB7IC8vIFRPRE86IENoZWNrIHdoZXRoZXIgZ3VhcmRpbmcgdGhpcyBjb2RlIHdpdGggdGhpcyBgaWZgIGlzIHJlYWxseSBuZWNlc3NhcnkuXG4gICAgICAgIHRoYXQuJGVsZW1lbnRcbiAgICAgICAgICAucmVtb3ZlQXR0cignYXJpYS1kZXNjcmliZWRieScpXG4gICAgICAgICAgLnRyaWdnZXIoJ2hpZGRlbi5icy4nICsgdGhhdC50eXBlKVxuICAgICAgfVxuICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKVxuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgJHRpcC5yZW1vdmVDbGFzcygnaW4nKVxuXG4gICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgJHRpcC5oYXNDbGFzcygnZmFkZScpID9cbiAgICAgICR0aXBcbiAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgY29tcGxldGUpXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChUb29sdGlwLlRSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgIGNvbXBsZXRlKClcblxuICAgIHRoaXMuaG92ZXJTdGF0ZSA9IG51bGxcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5maXhUaXRsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJGUgPSB0aGlzLiRlbGVtZW50XG4gICAgaWYgKCRlLmF0dHIoJ3RpdGxlJykgfHwgdHlwZW9mICRlLmF0dHIoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnKSAhPSAnc3RyaW5nJykge1xuICAgICAgJGUuYXR0cignZGF0YS1vcmlnaW5hbC10aXRsZScsICRlLmF0dHIoJ3RpdGxlJykgfHwgJycpLmF0dHIoJ3RpdGxlJywgJycpXG4gICAgfVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuaGFzQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRUaXRsZSgpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXRQb3NpdGlvbiA9IGZ1bmN0aW9uICgkZWxlbWVudCkge1xuICAgICRlbGVtZW50ICAgPSAkZWxlbWVudCB8fCB0aGlzLiRlbGVtZW50XG5cbiAgICB2YXIgZWwgICAgID0gJGVsZW1lbnRbMF1cbiAgICB2YXIgaXNCb2R5ID0gZWwudGFnTmFtZSA9PSAnQk9EWSdcblxuICAgIHZhciBlbFJlY3QgICAgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgIGlmIChlbFJlY3Qud2lkdGggPT0gbnVsbCkge1xuICAgICAgLy8gd2lkdGggYW5kIGhlaWdodCBhcmUgbWlzc2luZyBpbiBJRTgsIHNvIGNvbXB1dGUgdGhlbSBtYW51YWxseTsgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9pc3N1ZXMvMTQwOTNcbiAgICAgIGVsUmVjdCA9ICQuZXh0ZW5kKHt9LCBlbFJlY3QsIHsgd2lkdGg6IGVsUmVjdC5yaWdodCAtIGVsUmVjdC5sZWZ0LCBoZWlnaHQ6IGVsUmVjdC5ib3R0b20gLSBlbFJlY3QudG9wIH0pXG4gICAgfVxuICAgIHZhciBpc1N2ZyA9IHdpbmRvdy5TVkdFbGVtZW50ICYmIGVsIGluc3RhbmNlb2Ygd2luZG93LlNWR0VsZW1lbnRcbiAgICAvLyBBdm9pZCB1c2luZyAkLm9mZnNldCgpIG9uIFNWR3Mgc2luY2UgaXQgZ2l2ZXMgaW5jb3JyZWN0IHJlc3VsdHMgaW4galF1ZXJ5IDMuXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9pc3N1ZXMvMjAyODBcbiAgICB2YXIgZWxPZmZzZXQgID0gaXNCb2R5ID8geyB0b3A6IDAsIGxlZnQ6IDAgfSA6IChpc1N2ZyA/IG51bGwgOiAkZWxlbWVudC5vZmZzZXQoKSlcbiAgICB2YXIgc2Nyb2xsICAgID0geyBzY3JvbGw6IGlzQm9keSA/IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgOiAkZWxlbWVudC5zY3JvbGxUb3AoKSB9XG4gICAgdmFyIG91dGVyRGltcyA9IGlzQm9keSA/IHsgd2lkdGg6ICQod2luZG93KS53aWR0aCgpLCBoZWlnaHQ6ICQod2luZG93KS5oZWlnaHQoKSB9IDogbnVsbFxuXG4gICAgcmV0dXJuICQuZXh0ZW5kKHt9LCBlbFJlY3QsIHNjcm9sbCwgb3V0ZXJEaW1zLCBlbE9mZnNldClcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldENhbGN1bGF0ZWRPZmZzZXQgPSBmdW5jdGlvbiAocGxhY2VtZW50LCBwb3MsIGFjdHVhbFdpZHRoLCBhY3R1YWxIZWlnaHQpIHtcbiAgICByZXR1cm4gcGxhY2VtZW50ID09ICdib3R0b20nID8geyB0b3A6IHBvcy50b3AgKyBwb3MuaGVpZ2h0LCAgIGxlZnQ6IHBvcy5sZWZ0ICsgcG9zLndpZHRoIC8gMiAtIGFjdHVhbFdpZHRoIC8gMiB9IDpcbiAgICAgICAgICAgcGxhY2VtZW50ID09ICd0b3AnICAgID8geyB0b3A6IHBvcy50b3AgLSBhY3R1YWxIZWlnaHQsIGxlZnQ6IHBvcy5sZWZ0ICsgcG9zLndpZHRoIC8gMiAtIGFjdHVhbFdpZHRoIC8gMiB9IDpcbiAgICAgICAgICAgcGxhY2VtZW50ID09ICdsZWZ0JyAgID8geyB0b3A6IHBvcy50b3AgKyBwb3MuaGVpZ2h0IC8gMiAtIGFjdHVhbEhlaWdodCAvIDIsIGxlZnQ6IHBvcy5sZWZ0IC0gYWN0dWFsV2lkdGggfSA6XG4gICAgICAgIC8qIHBsYWNlbWVudCA9PSAncmlnaHQnICovIHsgdG9wOiBwb3MudG9wICsgcG9zLmhlaWdodCAvIDIgLSBhY3R1YWxIZWlnaHQgLyAyLCBsZWZ0OiBwb3MubGVmdCArIHBvcy53aWR0aCB9XG5cbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldFZpZXdwb3J0QWRqdXN0ZWREZWx0YSA9IGZ1bmN0aW9uIChwbGFjZW1lbnQsIHBvcywgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodCkge1xuICAgIHZhciBkZWx0YSA9IHsgdG9wOiAwLCBsZWZ0OiAwIH1cbiAgICBpZiAoIXRoaXMuJHZpZXdwb3J0KSByZXR1cm4gZGVsdGFcblxuICAgIHZhciB2aWV3cG9ydFBhZGRpbmcgPSB0aGlzLm9wdGlvbnMudmlld3BvcnQgJiYgdGhpcy5vcHRpb25zLnZpZXdwb3J0LnBhZGRpbmcgfHwgMFxuICAgIHZhciB2aWV3cG9ydERpbWVuc2lvbnMgPSB0aGlzLmdldFBvc2l0aW9uKHRoaXMuJHZpZXdwb3J0KVxuXG4gICAgaWYgKC9yaWdodHxsZWZ0Ly50ZXN0KHBsYWNlbWVudCkpIHtcbiAgICAgIHZhciB0b3BFZGdlT2Zmc2V0ICAgID0gcG9zLnRvcCAtIHZpZXdwb3J0UGFkZGluZyAtIHZpZXdwb3J0RGltZW5zaW9ucy5zY3JvbGxcbiAgICAgIHZhciBib3R0b21FZGdlT2Zmc2V0ID0gcG9zLnRvcCArIHZpZXdwb3J0UGFkZGluZyAtIHZpZXdwb3J0RGltZW5zaW9ucy5zY3JvbGwgKyBhY3R1YWxIZWlnaHRcbiAgICAgIGlmICh0b3BFZGdlT2Zmc2V0IDwgdmlld3BvcnREaW1lbnNpb25zLnRvcCkgeyAvLyB0b3Agb3ZlcmZsb3dcbiAgICAgICAgZGVsdGEudG9wID0gdmlld3BvcnREaW1lbnNpb25zLnRvcCAtIHRvcEVkZ2VPZmZzZXRcbiAgICAgIH0gZWxzZSBpZiAoYm90dG9tRWRnZU9mZnNldCA+IHZpZXdwb3J0RGltZW5zaW9ucy50b3AgKyB2aWV3cG9ydERpbWVuc2lvbnMuaGVpZ2h0KSB7IC8vIGJvdHRvbSBvdmVyZmxvd1xuICAgICAgICBkZWx0YS50b3AgPSB2aWV3cG9ydERpbWVuc2lvbnMudG9wICsgdmlld3BvcnREaW1lbnNpb25zLmhlaWdodCAtIGJvdHRvbUVkZ2VPZmZzZXRcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxlZnRFZGdlT2Zmc2V0ICA9IHBvcy5sZWZ0IC0gdmlld3BvcnRQYWRkaW5nXG4gICAgICB2YXIgcmlnaHRFZGdlT2Zmc2V0ID0gcG9zLmxlZnQgKyB2aWV3cG9ydFBhZGRpbmcgKyBhY3R1YWxXaWR0aFxuICAgICAgaWYgKGxlZnRFZGdlT2Zmc2V0IDwgdmlld3BvcnREaW1lbnNpb25zLmxlZnQpIHsgLy8gbGVmdCBvdmVyZmxvd1xuICAgICAgICBkZWx0YS5sZWZ0ID0gdmlld3BvcnREaW1lbnNpb25zLmxlZnQgLSBsZWZ0RWRnZU9mZnNldFxuICAgICAgfSBlbHNlIGlmIChyaWdodEVkZ2VPZmZzZXQgPiB2aWV3cG9ydERpbWVuc2lvbnMucmlnaHQpIHsgLy8gcmlnaHQgb3ZlcmZsb3dcbiAgICAgICAgZGVsdGEubGVmdCA9IHZpZXdwb3J0RGltZW5zaW9ucy5sZWZ0ICsgdmlld3BvcnREaW1lbnNpb25zLndpZHRoIC0gcmlnaHRFZGdlT2Zmc2V0XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlbHRhXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXRUaXRsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGl0bGVcbiAgICB2YXIgJGUgPSB0aGlzLiRlbGVtZW50XG4gICAgdmFyIG8gID0gdGhpcy5vcHRpb25zXG5cbiAgICB0aXRsZSA9ICRlLmF0dHIoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnKVxuICAgICAgfHwgKHR5cGVvZiBvLnRpdGxlID09ICdmdW5jdGlvbicgPyBvLnRpdGxlLmNhbGwoJGVbMF0pIDogIG8udGl0bGUpXG5cbiAgICByZXR1cm4gdGl0bGVcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldFVJRCA9IGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICBkbyBwcmVmaXggKz0gfn4oTWF0aC5yYW5kb20oKSAqIDEwMDAwMDApXG4gICAgd2hpbGUgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHByZWZpeCkpXG4gICAgcmV0dXJuIHByZWZpeFxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUudGlwID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy4kdGlwKSB7XG4gICAgICB0aGlzLiR0aXAgPSAkKHRoaXMub3B0aW9ucy50ZW1wbGF0ZSlcbiAgICAgIGlmICh0aGlzLiR0aXAubGVuZ3RoICE9IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMudHlwZSArICcgYHRlbXBsYXRlYCBvcHRpb24gbXVzdCBjb25zaXN0IG9mIGV4YWN0bHkgMSB0b3AtbGV2ZWwgZWxlbWVudCEnKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy4kdGlwXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5hcnJvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKHRoaXMuJGFycm93ID0gdGhpcy4kYXJyb3cgfHwgdGhpcy50aXAoKS5maW5kKCcudG9vbHRpcC1hcnJvdycpKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZW5hYmxlZCA9IHRydWVcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbmFibGVkID0gZmFsc2VcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLnRvZ2dsZUVuYWJsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbmFibGVkID0gIXRoaXMuZW5hYmxlZFxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXNcbiAgICBpZiAoZSkge1xuICAgICAgc2VsZiA9ICQoZS5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlKVxuICAgICAgaWYgKCFzZWxmKSB7XG4gICAgICAgIHNlbGYgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihlLmN1cnJlbnRUYXJnZXQsIHRoaXMuZ2V0RGVsZWdhdGVPcHRpb25zKCkpXG4gICAgICAgICQoZS5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlLCBzZWxmKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChlKSB7XG4gICAgICBzZWxmLmluU3RhdGUuY2xpY2sgPSAhc2VsZi5pblN0YXRlLmNsaWNrXG4gICAgICBpZiAoc2VsZi5pc0luU3RhdGVUcnVlKCkpIHNlbGYuZW50ZXIoc2VsZilcbiAgICAgIGVsc2Ugc2VsZi5sZWF2ZShzZWxmKVxuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmLnRpcCgpLmhhc0NsYXNzKCdpbicpID8gc2VsZi5sZWF2ZShzZWxmKSA6IHNlbGYuZW50ZXIoc2VsZilcbiAgICB9XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpXG4gICAgdGhpcy5oaWRlKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoYXQuJGVsZW1lbnQub2ZmKCcuJyArIHRoYXQudHlwZSkucmVtb3ZlRGF0YSgnYnMuJyArIHRoYXQudHlwZSlcbiAgICAgIGlmICh0aGF0LiR0aXApIHtcbiAgICAgICAgdGhhdC4kdGlwLmRldGFjaCgpXG4gICAgICB9XG4gICAgICB0aGF0LiR0aXAgPSBudWxsXG4gICAgICB0aGF0LiRhcnJvdyA9IG51bGxcbiAgICAgIHRoYXQuJHZpZXdwb3J0ID0gbnVsbFxuICAgICAgdGhhdC4kZWxlbWVudCA9IG51bGxcbiAgICB9KVxuICB9XG5cblxuICAvLyBUT09MVElQIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMudG9vbHRpcCcpXG4gICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uXG5cbiAgICAgIGlmICghZGF0YSAmJiAvZGVzdHJveXxoaWRlLy50ZXN0KG9wdGlvbikpIHJldHVyblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy50b29sdGlwJywgKGRhdGEgPSBuZXcgVG9vbHRpcCh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4udG9vbHRpcFxuXG4gICQuZm4udG9vbHRpcCAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLnRvb2x0aXAuQ29uc3RydWN0b3IgPSBUb29sdGlwXG5cblxuICAvLyBUT09MVElQIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLnRvb2x0aXAubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLnRvb2x0aXAgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IHBvcG92ZXIuanMgdjMuMy43XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNwb3BvdmVyc1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE2IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFBPUE9WRVIgUFVCTElDIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBQb3BvdmVyID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmluaXQoJ3BvcG92ZXInLCBlbGVtZW50LCBvcHRpb25zKVxuICB9XG5cbiAgaWYgKCEkLmZuLnRvb2x0aXApIHRocm93IG5ldyBFcnJvcignUG9wb3ZlciByZXF1aXJlcyB0b29sdGlwLmpzJylcblxuICBQb3BvdmVyLlZFUlNJT04gID0gJzMuMy43J1xuXG4gIFBvcG92ZXIuREVGQVVMVFMgPSAkLmV4dGVuZCh7fSwgJC5mbi50b29sdGlwLkNvbnN0cnVjdG9yLkRFRkFVTFRTLCB7XG4gICAgcGxhY2VtZW50OiAncmlnaHQnLFxuICAgIHRyaWdnZXI6ICdjbGljaycsXG4gICAgY29udGVudDogJycsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwicG9wb3ZlclwiIHJvbGU9XCJ0b29sdGlwXCI+PGRpdiBjbGFzcz1cImFycm93XCI+PC9kaXY+PGgzIGNsYXNzPVwicG9wb3Zlci10aXRsZVwiPjwvaDM+PGRpdiBjbGFzcz1cInBvcG92ZXItY29udGVudFwiPjwvZGl2PjwvZGl2PidcbiAgfSlcblxuXG4gIC8vIE5PVEU6IFBPUE9WRVIgRVhURU5EUyB0b29sdGlwLmpzXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgUG9wb3Zlci5wcm90b3R5cGUgPSAkLmV4dGVuZCh7fSwgJC5mbi50b29sdGlwLkNvbnN0cnVjdG9yLnByb3RvdHlwZSlcblxuICBQb3BvdmVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBvcG92ZXJcblxuICBQb3BvdmVyLnByb3RvdHlwZS5nZXREZWZhdWx0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUG9wb3Zlci5ERUZBVUxUU1xuICB9XG5cbiAgUG9wb3Zlci5wcm90b3R5cGUuc2V0Q29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJHRpcCAgICA9IHRoaXMudGlwKClcbiAgICB2YXIgdGl0bGUgICA9IHRoaXMuZ2V0VGl0bGUoKVxuICAgIHZhciBjb250ZW50ID0gdGhpcy5nZXRDb250ZW50KClcblxuICAgICR0aXAuZmluZCgnLnBvcG92ZXItdGl0bGUnKVt0aGlzLm9wdGlvbnMuaHRtbCA/ICdodG1sJyA6ICd0ZXh0J10odGl0bGUpXG4gICAgJHRpcC5maW5kKCcucG9wb3Zlci1jb250ZW50JykuY2hpbGRyZW4oKS5kZXRhY2goKS5lbmQoKVsgLy8gd2UgdXNlIGFwcGVuZCBmb3IgaHRtbCBvYmplY3RzIHRvIG1haW50YWluIGpzIGV2ZW50c1xuICAgICAgdGhpcy5vcHRpb25zLmh0bWwgPyAodHlwZW9mIGNvbnRlbnQgPT0gJ3N0cmluZycgPyAnaHRtbCcgOiAnYXBwZW5kJykgOiAndGV4dCdcbiAgICBdKGNvbnRlbnQpXG5cbiAgICAkdGlwLnJlbW92ZUNsYXNzKCdmYWRlIHRvcCBib3R0b20gbGVmdCByaWdodCBpbicpXG5cbiAgICAvLyBJRTggZG9lc24ndCBhY2NlcHQgaGlkaW5nIHZpYSB0aGUgYDplbXB0eWAgcHNldWRvIHNlbGVjdG9yLCB3ZSBoYXZlIHRvIGRvXG4gICAgLy8gdGhpcyBtYW51YWxseSBieSBjaGVja2luZyB0aGUgY29udGVudHMuXG4gICAgaWYgKCEkdGlwLmZpbmQoJy5wb3BvdmVyLXRpdGxlJykuaHRtbCgpKSAkdGlwLmZpbmQoJy5wb3BvdmVyLXRpdGxlJykuaGlkZSgpXG4gIH1cblxuICBQb3BvdmVyLnByb3RvdHlwZS5oYXNDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldFRpdGxlKCkgfHwgdGhpcy5nZXRDb250ZW50KClcbiAgfVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmdldENvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICRlID0gdGhpcy4kZWxlbWVudFxuICAgIHZhciBvICA9IHRoaXMub3B0aW9uc1xuXG4gICAgcmV0dXJuICRlLmF0dHIoJ2RhdGEtY29udGVudCcpXG4gICAgICB8fCAodHlwZW9mIG8uY29udGVudCA9PSAnZnVuY3Rpb24nID9cbiAgICAgICAgICAgIG8uY29udGVudC5jYWxsKCRlWzBdKSA6XG4gICAgICAgICAgICBvLmNvbnRlbnQpXG4gIH1cblxuICBQb3BvdmVyLnByb3RvdHlwZS5hcnJvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKHRoaXMuJGFycm93ID0gdGhpcy4kYXJyb3cgfHwgdGhpcy50aXAoKS5maW5kKCcuYXJyb3cnKSlcbiAgfVxuXG5cbiAgLy8gUE9QT1ZFUiBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLnBvcG92ZXInKVxuICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvblxuXG4gICAgICBpZiAoIWRhdGEgJiYgL2Rlc3Ryb3l8aGlkZS8udGVzdChvcHRpb24pKSByZXR1cm5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMucG9wb3ZlcicsIChkYXRhID0gbmV3IFBvcG92ZXIodGhpcywgb3B0aW9ucykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXSgpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLnBvcG92ZXJcblxuICAkLmZuLnBvcG92ZXIgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5wb3BvdmVyLkNvbnN0cnVjdG9yID0gUG9wb3ZlclxuXG5cbiAgLy8gUE9QT1ZFUiBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5wb3BvdmVyLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5wb3BvdmVyID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBzY3JvbGxzcHkuanMgdjMuMy43XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNzY3JvbGxzcHlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBTQ1JPTExTUFkgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFNjcm9sbFNweShlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy4kYm9keSAgICAgICAgICA9ICQoZG9jdW1lbnQuYm9keSlcbiAgICB0aGlzLiRzY3JvbGxFbGVtZW50ID0gJChlbGVtZW50KS5pcyhkb2N1bWVudC5ib2R5KSA/ICQod2luZG93KSA6ICQoZWxlbWVudClcbiAgICB0aGlzLm9wdGlvbnMgICAgICAgID0gJC5leHRlbmQoe30sIFNjcm9sbFNweS5ERUZBVUxUUywgb3B0aW9ucylcbiAgICB0aGlzLnNlbGVjdG9yICAgICAgID0gKHRoaXMub3B0aW9ucy50YXJnZXQgfHwgJycpICsgJyAubmF2IGxpID4gYSdcbiAgICB0aGlzLm9mZnNldHMgICAgICAgID0gW11cbiAgICB0aGlzLnRhcmdldHMgICAgICAgID0gW11cbiAgICB0aGlzLmFjdGl2ZVRhcmdldCAgID0gbnVsbFxuICAgIHRoaXMuc2Nyb2xsSGVpZ2h0ICAgPSAwXG5cbiAgICB0aGlzLiRzY3JvbGxFbGVtZW50Lm9uKCdzY3JvbGwuYnMuc2Nyb2xsc3B5JywgJC5wcm94eSh0aGlzLnByb2Nlc3MsIHRoaXMpKVxuICAgIHRoaXMucmVmcmVzaCgpXG4gICAgdGhpcy5wcm9jZXNzKClcbiAgfVxuXG4gIFNjcm9sbFNweS5WRVJTSU9OICA9ICczLjMuNydcblxuICBTY3JvbGxTcHkuREVGQVVMVFMgPSB7XG4gICAgb2Zmc2V0OiAxMFxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5nZXRTY3JvbGxIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuJHNjcm9sbEVsZW1lbnRbMF0uc2Nyb2xsSGVpZ2h0IHx8IE1hdGgubWF4KHRoaXMuJGJvZHlbMF0uc2Nyb2xsSGVpZ2h0LCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0KVxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aGF0ICAgICAgICAgID0gdGhpc1xuICAgIHZhciBvZmZzZXRNZXRob2QgID0gJ29mZnNldCdcbiAgICB2YXIgb2Zmc2V0QmFzZSAgICA9IDBcblxuICAgIHRoaXMub2Zmc2V0cyAgICAgID0gW11cbiAgICB0aGlzLnRhcmdldHMgICAgICA9IFtdXG4gICAgdGhpcy5zY3JvbGxIZWlnaHQgPSB0aGlzLmdldFNjcm9sbEhlaWdodCgpXG5cbiAgICBpZiAoISQuaXNXaW5kb3codGhpcy4kc2Nyb2xsRWxlbWVudFswXSkpIHtcbiAgICAgIG9mZnNldE1ldGhvZCA9ICdwb3NpdGlvbidcbiAgICAgIG9mZnNldEJhc2UgICA9IHRoaXMuJHNjcm9sbEVsZW1lbnQuc2Nyb2xsVG9wKClcbiAgICB9XG5cbiAgICB0aGlzLiRib2R5XG4gICAgICAuZmluZCh0aGlzLnNlbGVjdG9yKVxuICAgICAgLm1hcChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkZWwgICA9ICQodGhpcylcbiAgICAgICAgdmFyIGhyZWYgID0gJGVsLmRhdGEoJ3RhcmdldCcpIHx8ICRlbC5hdHRyKCdocmVmJylcbiAgICAgICAgdmFyICRocmVmID0gL14jLi8udGVzdChocmVmKSAmJiAkKGhyZWYpXG5cbiAgICAgICAgcmV0dXJuICgkaHJlZlxuICAgICAgICAgICYmICRocmVmLmxlbmd0aFxuICAgICAgICAgICYmICRocmVmLmlzKCc6dmlzaWJsZScpXG4gICAgICAgICAgJiYgW1skaHJlZltvZmZzZXRNZXRob2RdKCkudG9wICsgb2Zmc2V0QmFzZSwgaHJlZl1dKSB8fCBudWxsXG4gICAgICB9KVxuICAgICAgLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGFbMF0gLSBiWzBdIH0pXG4gICAgICAuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoYXQub2Zmc2V0cy5wdXNoKHRoaXNbMF0pXG4gICAgICAgIHRoYXQudGFyZ2V0cy5wdXNoKHRoaXNbMV0pXG4gICAgICB9KVxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5wcm9jZXNzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzY3JvbGxUb3AgICAgPSB0aGlzLiRzY3JvbGxFbGVtZW50LnNjcm9sbFRvcCgpICsgdGhpcy5vcHRpb25zLm9mZnNldFxuICAgIHZhciBzY3JvbGxIZWlnaHQgPSB0aGlzLmdldFNjcm9sbEhlaWdodCgpXG4gICAgdmFyIG1heFNjcm9sbCAgICA9IHRoaXMub3B0aW9ucy5vZmZzZXQgKyBzY3JvbGxIZWlnaHQgLSB0aGlzLiRzY3JvbGxFbGVtZW50LmhlaWdodCgpXG4gICAgdmFyIG9mZnNldHMgICAgICA9IHRoaXMub2Zmc2V0c1xuICAgIHZhciB0YXJnZXRzICAgICAgPSB0aGlzLnRhcmdldHNcbiAgICB2YXIgYWN0aXZlVGFyZ2V0ID0gdGhpcy5hY3RpdmVUYXJnZXRcbiAgICB2YXIgaVxuXG4gICAgaWYgKHRoaXMuc2Nyb2xsSGVpZ2h0ICE9IHNjcm9sbEhlaWdodCkge1xuICAgICAgdGhpcy5yZWZyZXNoKClcbiAgICB9XG5cbiAgICBpZiAoc2Nyb2xsVG9wID49IG1heFNjcm9sbCkge1xuICAgICAgcmV0dXJuIGFjdGl2ZVRhcmdldCAhPSAoaSA9IHRhcmdldHNbdGFyZ2V0cy5sZW5ndGggLSAxXSkgJiYgdGhpcy5hY3RpdmF0ZShpKVxuICAgIH1cblxuICAgIGlmIChhY3RpdmVUYXJnZXQgJiYgc2Nyb2xsVG9wIDwgb2Zmc2V0c1swXSkge1xuICAgICAgdGhpcy5hY3RpdmVUYXJnZXQgPSBudWxsXG4gICAgICByZXR1cm4gdGhpcy5jbGVhcigpXG4gICAgfVxuXG4gICAgZm9yIChpID0gb2Zmc2V0cy5sZW5ndGg7IGktLTspIHtcbiAgICAgIGFjdGl2ZVRhcmdldCAhPSB0YXJnZXRzW2ldXG4gICAgICAgICYmIHNjcm9sbFRvcCA+PSBvZmZzZXRzW2ldXG4gICAgICAgICYmIChvZmZzZXRzW2kgKyAxXSA9PT0gdW5kZWZpbmVkIHx8IHNjcm9sbFRvcCA8IG9mZnNldHNbaSArIDFdKVxuICAgICAgICAmJiB0aGlzLmFjdGl2YXRlKHRhcmdldHNbaV0pXG4gICAgfVxuICB9XG5cbiAgU2Nyb2xsU3B5LnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICB0aGlzLmFjdGl2ZVRhcmdldCA9IHRhcmdldFxuXG4gICAgdGhpcy5jbGVhcigpXG5cbiAgICB2YXIgc2VsZWN0b3IgPSB0aGlzLnNlbGVjdG9yICtcbiAgICAgICdbZGF0YS10YXJnZXQ9XCInICsgdGFyZ2V0ICsgJ1wiXSwnICtcbiAgICAgIHRoaXMuc2VsZWN0b3IgKyAnW2hyZWY9XCInICsgdGFyZ2V0ICsgJ1wiXSdcblxuICAgIHZhciBhY3RpdmUgPSAkKHNlbGVjdG9yKVxuICAgICAgLnBhcmVudHMoJ2xpJylcbiAgICAgIC5hZGRDbGFzcygnYWN0aXZlJylcblxuICAgIGlmIChhY3RpdmUucGFyZW50KCcuZHJvcGRvd24tbWVudScpLmxlbmd0aCkge1xuICAgICAgYWN0aXZlID0gYWN0aXZlXG4gICAgICAgIC5jbG9zZXN0KCdsaS5kcm9wZG93bicpXG4gICAgICAgIC5hZGRDbGFzcygnYWN0aXZlJylcbiAgICB9XG5cbiAgICBhY3RpdmUudHJpZ2dlcignYWN0aXZhdGUuYnMuc2Nyb2xsc3B5JylcbiAgfVxuXG4gIFNjcm9sbFNweS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgJCh0aGlzLnNlbGVjdG9yKVxuICAgICAgLnBhcmVudHNVbnRpbCh0aGlzLm9wdGlvbnMudGFyZ2V0LCAnLmFjdGl2ZScpXG4gICAgICAucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gIH1cblxuXG4gIC8vIFNDUk9MTFNQWSBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMuc2Nyb2xsc3B5JylcbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb25cblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5zY3JvbGxzcHknLCAoZGF0YSA9IG5ldyBTY3JvbGxTcHkodGhpcywgb3B0aW9ucykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXSgpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLnNjcm9sbHNweVxuXG4gICQuZm4uc2Nyb2xsc3B5ICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uc2Nyb2xsc3B5LkNvbnN0cnVjdG9yID0gU2Nyb2xsU3B5XG5cblxuICAvLyBTQ1JPTExTUFkgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5zY3JvbGxzcHkubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLnNjcm9sbHNweSA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIFNDUk9MTFNQWSBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PT09PT1cblxuICAkKHdpbmRvdykub24oJ2xvYWQuYnMuc2Nyb2xsc3B5LmRhdGEtYXBpJywgZnVuY3Rpb24gKCkge1xuICAgICQoJ1tkYXRhLXNweT1cInNjcm9sbFwiXScpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRzcHkgPSAkKHRoaXMpXG4gICAgICBQbHVnaW4uY2FsbCgkc3B5LCAkc3B5LmRhdGEoKSlcbiAgICB9KVxuICB9KVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiB0YWIuanMgdjMuMy43XG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyN0YWJzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTYgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gVEFCIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgVGFiID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAvLyBqc2NzOmRpc2FibGUgcmVxdWlyZURvbGxhckJlZm9yZWpRdWVyeUFzc2lnbm1lbnRcbiAgICB0aGlzLmVsZW1lbnQgPSAkKGVsZW1lbnQpXG4gICAgLy8ganNjczplbmFibGUgcmVxdWlyZURvbGxhckJlZm9yZWpRdWVyeUFzc2lnbm1lbnRcbiAgfVxuXG4gIFRhYi5WRVJTSU9OID0gJzMuMy43J1xuXG4gIFRhYi5UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwXG5cbiAgVGFiLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkdGhpcyAgICA9IHRoaXMuZWxlbWVudFxuICAgIHZhciAkdWwgICAgICA9ICR0aGlzLmNsb3Nlc3QoJ3VsOm5vdCguZHJvcGRvd24tbWVudSknKVxuICAgIHZhciBzZWxlY3RvciA9ICR0aGlzLmRhdGEoJ3RhcmdldCcpXG5cbiAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2hyZWYnKVxuICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciAmJiBzZWxlY3Rvci5yZXBsYWNlKC8uKig/PSNbXlxcc10qJCkvLCAnJykgLy8gc3RyaXAgZm9yIGllN1xuICAgIH1cblxuICAgIGlmICgkdGhpcy5wYXJlbnQoJ2xpJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSByZXR1cm5cblxuICAgIHZhciAkcHJldmlvdXMgPSAkdWwuZmluZCgnLmFjdGl2ZTpsYXN0IGEnKVxuICAgIHZhciBoaWRlRXZlbnQgPSAkLkV2ZW50KCdoaWRlLmJzLnRhYicsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6ICR0aGlzWzBdXG4gICAgfSlcbiAgICB2YXIgc2hvd0V2ZW50ID0gJC5FdmVudCgnc2hvdy5icy50YWInLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiAkcHJldmlvdXNbMF1cbiAgICB9KVxuXG4gICAgJHByZXZpb3VzLnRyaWdnZXIoaGlkZUV2ZW50KVxuICAgICR0aGlzLnRyaWdnZXIoc2hvd0V2ZW50KVxuXG4gICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCBoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgdmFyICR0YXJnZXQgPSAkKHNlbGVjdG9yKVxuXG4gICAgdGhpcy5hY3RpdmF0ZSgkdGhpcy5jbG9zZXN0KCdsaScpLCAkdWwpXG4gICAgdGhpcy5hY3RpdmF0ZSgkdGFyZ2V0LCAkdGFyZ2V0LnBhcmVudCgpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAkcHJldmlvdXMudHJpZ2dlcih7XG4gICAgICAgIHR5cGU6ICdoaWRkZW4uYnMudGFiJyxcbiAgICAgICAgcmVsYXRlZFRhcmdldDogJHRoaXNbMF1cbiAgICAgIH0pXG4gICAgICAkdGhpcy50cmlnZ2VyKHtcbiAgICAgICAgdHlwZTogJ3Nob3duLmJzLnRhYicsXG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6ICRwcmV2aW91c1swXVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgVGFiLnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7XG4gICAgdmFyICRhY3RpdmUgICAgPSBjb250YWluZXIuZmluZCgnPiAuYWN0aXZlJylcbiAgICB2YXIgdHJhbnNpdGlvbiA9IGNhbGxiYWNrXG4gICAgICAmJiAkLnN1cHBvcnQudHJhbnNpdGlvblxuICAgICAgJiYgKCRhY3RpdmUubGVuZ3RoICYmICRhY3RpdmUuaGFzQ2xhc3MoJ2ZhZGUnKSB8fCAhIWNvbnRhaW5lci5maW5kKCc+IC5mYWRlJykubGVuZ3RoKVxuXG4gICAgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICRhY3RpdmVcbiAgICAgICAgLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgICAuZmluZCgnPiAuZHJvcGRvd24tbWVudSA+IC5hY3RpdmUnKVxuICAgICAgICAgIC5yZW1vdmVDbGFzcygnYWN0aXZlJylcbiAgICAgICAgLmVuZCgpXG4gICAgICAgIC5maW5kKCdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nKVxuICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpXG5cbiAgICAgIGVsZW1lbnRcbiAgICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgICAuZmluZCgnW2RhdGEtdG9nZ2xlPVwidGFiXCJdJylcbiAgICAgICAgICAuYXR0cignYXJpYS1leHBhbmRlZCcsIHRydWUpXG5cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgIGVsZW1lbnRbMF0ub2Zmc2V0V2lkdGggLy8gcmVmbG93IGZvciB0cmFuc2l0aW9uXG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ2luJylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ2ZhZGUnKVxuICAgICAgfVxuXG4gICAgICBpZiAoZWxlbWVudC5wYXJlbnQoJy5kcm9wZG93bi1tZW51JykubGVuZ3RoKSB7XG4gICAgICAgIGVsZW1lbnRcbiAgICAgICAgICAuY2xvc2VzdCgnbGkuZHJvcGRvd24nKVxuICAgICAgICAgICAgLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgICAgIC5lbmQoKVxuICAgICAgICAgIC5maW5kKCdbZGF0YS10b2dnbGU9XCJ0YWJcIl0nKVxuICAgICAgICAgICAgLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKVxuICAgICAgfVxuXG4gICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpXG4gICAgfVxuXG4gICAgJGFjdGl2ZS5sZW5ndGggJiYgdHJhbnNpdGlvbiA/XG4gICAgICAkYWN0aXZlXG4gICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIG5leHQpXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChUYWIuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgbmV4dCgpXG5cbiAgICAkYWN0aXZlLnJlbW92ZUNsYXNzKCdpbicpXG4gIH1cblxuXG4gIC8vIFRBQiBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgPSAkdGhpcy5kYXRhKCdicy50YWInKVxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLnRhYicsIChkYXRhID0gbmV3IFRhYih0aGlzKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4udGFiXG5cbiAgJC5mbi50YWIgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi50YWIuQ29uc3RydWN0b3IgPSBUYWJcblxuXG4gIC8vIFRBQiBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT1cblxuICAkLmZuLnRhYi5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4udGFiID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gVEFCIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PVxuXG4gIHZhciBjbGlja0hhbmRsZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIFBsdWdpbi5jYWxsKCQodGhpcyksICdzaG93JylcbiAgfVxuXG4gICQoZG9jdW1lbnQpXG4gICAgLm9uKCdjbGljay5icy50YWIuZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlPVwidGFiXCJdJywgY2xpY2tIYW5kbGVyKVxuICAgIC5vbignY2xpY2suYnMudGFiLmRhdGEtYXBpJywgJ1tkYXRhLXRvZ2dsZT1cInBpbGxcIl0nLCBjbGlja0hhbmRsZXIpXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGFmZml4LmpzIHYzLjMuN1xuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jYWZmaXhcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNiBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBBRkZJWCBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgQWZmaXggPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBBZmZpeC5ERUZBVUxUUywgb3B0aW9ucylcblxuICAgIHRoaXMuJHRhcmdldCA9ICQodGhpcy5vcHRpb25zLnRhcmdldClcbiAgICAgIC5vbignc2Nyb2xsLmJzLmFmZml4LmRhdGEtYXBpJywgJC5wcm94eSh0aGlzLmNoZWNrUG9zaXRpb24sIHRoaXMpKVxuICAgICAgLm9uKCdjbGljay5icy5hZmZpeC5kYXRhLWFwaScsICAkLnByb3h5KHRoaXMuY2hlY2tQb3NpdGlvbldpdGhFdmVudExvb3AsIHRoaXMpKVxuXG4gICAgdGhpcy4kZWxlbWVudCAgICAgPSAkKGVsZW1lbnQpXG4gICAgdGhpcy5hZmZpeGVkICAgICAgPSBudWxsXG4gICAgdGhpcy51bnBpbiAgICAgICAgPSBudWxsXG4gICAgdGhpcy5waW5uZWRPZmZzZXQgPSBudWxsXG5cbiAgICB0aGlzLmNoZWNrUG9zaXRpb24oKVxuICB9XG5cbiAgQWZmaXguVkVSU0lPTiAgPSAnMy4zLjcnXG5cbiAgQWZmaXguUkVTRVQgICAgPSAnYWZmaXggYWZmaXgtdG9wIGFmZml4LWJvdHRvbSdcblxuICBBZmZpeC5ERUZBVUxUUyA9IHtcbiAgICBvZmZzZXQ6IDAsXG4gICAgdGFyZ2V0OiB3aW5kb3dcbiAgfVxuXG4gIEFmZml4LnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uIChzY3JvbGxIZWlnaHQsIGhlaWdodCwgb2Zmc2V0VG9wLCBvZmZzZXRCb3R0b20pIHtcbiAgICB2YXIgc2Nyb2xsVG9wICAgID0gdGhpcy4kdGFyZ2V0LnNjcm9sbFRvcCgpXG4gICAgdmFyIHBvc2l0aW9uICAgICA9IHRoaXMuJGVsZW1lbnQub2Zmc2V0KClcbiAgICB2YXIgdGFyZ2V0SGVpZ2h0ID0gdGhpcy4kdGFyZ2V0LmhlaWdodCgpXG5cbiAgICBpZiAob2Zmc2V0VG9wICE9IG51bGwgJiYgdGhpcy5hZmZpeGVkID09ICd0b3AnKSByZXR1cm4gc2Nyb2xsVG9wIDwgb2Zmc2V0VG9wID8gJ3RvcCcgOiBmYWxzZVxuXG4gICAgaWYgKHRoaXMuYWZmaXhlZCA9PSAnYm90dG9tJykge1xuICAgICAgaWYgKG9mZnNldFRvcCAhPSBudWxsKSByZXR1cm4gKHNjcm9sbFRvcCArIHRoaXMudW5waW4gPD0gcG9zaXRpb24udG9wKSA/IGZhbHNlIDogJ2JvdHRvbSdcbiAgICAgIHJldHVybiAoc2Nyb2xsVG9wICsgdGFyZ2V0SGVpZ2h0IDw9IHNjcm9sbEhlaWdodCAtIG9mZnNldEJvdHRvbSkgPyBmYWxzZSA6ICdib3R0b20nXG4gICAgfVxuXG4gICAgdmFyIGluaXRpYWxpemluZyAgID0gdGhpcy5hZmZpeGVkID09IG51bGxcbiAgICB2YXIgY29sbGlkZXJUb3AgICAgPSBpbml0aWFsaXppbmcgPyBzY3JvbGxUb3AgOiBwb3NpdGlvbi50b3BcbiAgICB2YXIgY29sbGlkZXJIZWlnaHQgPSBpbml0aWFsaXppbmcgPyB0YXJnZXRIZWlnaHQgOiBoZWlnaHRcblxuICAgIGlmIChvZmZzZXRUb3AgIT0gbnVsbCAmJiBzY3JvbGxUb3AgPD0gb2Zmc2V0VG9wKSByZXR1cm4gJ3RvcCdcbiAgICBpZiAob2Zmc2V0Qm90dG9tICE9IG51bGwgJiYgKGNvbGxpZGVyVG9wICsgY29sbGlkZXJIZWlnaHQgPj0gc2Nyb2xsSGVpZ2h0IC0gb2Zmc2V0Qm90dG9tKSkgcmV0dXJuICdib3R0b20nXG5cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIEFmZml4LnByb3RvdHlwZS5nZXRQaW5uZWRPZmZzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMucGlubmVkT2Zmc2V0KSByZXR1cm4gdGhpcy5waW5uZWRPZmZzZXRcbiAgICB0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKEFmZml4LlJFU0VUKS5hZGRDbGFzcygnYWZmaXgnKVxuICAgIHZhciBzY3JvbGxUb3AgPSB0aGlzLiR0YXJnZXQuc2Nyb2xsVG9wKClcbiAgICB2YXIgcG9zaXRpb24gID0gdGhpcy4kZWxlbWVudC5vZmZzZXQoKVxuICAgIHJldHVybiAodGhpcy5waW5uZWRPZmZzZXQgPSBwb3NpdGlvbi50b3AgLSBzY3JvbGxUb3ApXG4gIH1cblxuICBBZmZpeC5wcm90b3R5cGUuY2hlY2tQb3NpdGlvbldpdGhFdmVudExvb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0VGltZW91dCgkLnByb3h5KHRoaXMuY2hlY2tQb3NpdGlvbiwgdGhpcyksIDEpXG4gIH1cblxuICBBZmZpeC5wcm90b3R5cGUuY2hlY2tQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuJGVsZW1lbnQuaXMoJzp2aXNpYmxlJykpIHJldHVyblxuXG4gICAgdmFyIGhlaWdodCAgICAgICA9IHRoaXMuJGVsZW1lbnQuaGVpZ2h0KClcbiAgICB2YXIgb2Zmc2V0ICAgICAgID0gdGhpcy5vcHRpb25zLm9mZnNldFxuICAgIHZhciBvZmZzZXRUb3AgICAgPSBvZmZzZXQudG9wXG4gICAgdmFyIG9mZnNldEJvdHRvbSA9IG9mZnNldC5ib3R0b21cbiAgICB2YXIgc2Nyb2xsSGVpZ2h0ID0gTWF0aC5tYXgoJChkb2N1bWVudCkuaGVpZ2h0KCksICQoZG9jdW1lbnQuYm9keSkuaGVpZ2h0KCkpXG5cbiAgICBpZiAodHlwZW9mIG9mZnNldCAhPSAnb2JqZWN0JykgICAgICAgICBvZmZzZXRCb3R0b20gPSBvZmZzZXRUb3AgPSBvZmZzZXRcbiAgICBpZiAodHlwZW9mIG9mZnNldFRvcCA9PSAnZnVuY3Rpb24nKSAgICBvZmZzZXRUb3AgICAgPSBvZmZzZXQudG9wKHRoaXMuJGVsZW1lbnQpXG4gICAgaWYgKHR5cGVvZiBvZmZzZXRCb3R0b20gPT0gJ2Z1bmN0aW9uJykgb2Zmc2V0Qm90dG9tID0gb2Zmc2V0LmJvdHRvbSh0aGlzLiRlbGVtZW50KVxuXG4gICAgdmFyIGFmZml4ID0gdGhpcy5nZXRTdGF0ZShzY3JvbGxIZWlnaHQsIGhlaWdodCwgb2Zmc2V0VG9wLCBvZmZzZXRCb3R0b20pXG5cbiAgICBpZiAodGhpcy5hZmZpeGVkICE9IGFmZml4KSB7XG4gICAgICBpZiAodGhpcy51bnBpbiAhPSBudWxsKSB0aGlzLiRlbGVtZW50LmNzcygndG9wJywgJycpXG5cbiAgICAgIHZhciBhZmZpeFR5cGUgPSAnYWZmaXgnICsgKGFmZml4ID8gJy0nICsgYWZmaXggOiAnJylcbiAgICAgIHZhciBlICAgICAgICAgPSAkLkV2ZW50KGFmZml4VHlwZSArICcuYnMuYWZmaXgnKVxuXG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSlcblxuICAgICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgICB0aGlzLmFmZml4ZWQgPSBhZmZpeFxuICAgICAgdGhpcy51bnBpbiA9IGFmZml4ID09ICdib3R0b20nID8gdGhpcy5nZXRQaW5uZWRPZmZzZXQoKSA6IG51bGxcblxuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAucmVtb3ZlQ2xhc3MoQWZmaXguUkVTRVQpXG4gICAgICAgIC5hZGRDbGFzcyhhZmZpeFR5cGUpXG4gICAgICAgIC50cmlnZ2VyKGFmZml4VHlwZS5yZXBsYWNlKCdhZmZpeCcsICdhZmZpeGVkJykgKyAnLmJzLmFmZml4JylcbiAgICB9XG5cbiAgICBpZiAoYWZmaXggPT0gJ2JvdHRvbScpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub2Zmc2V0KHtcbiAgICAgICAgdG9wOiBzY3JvbGxIZWlnaHQgLSBoZWlnaHQgLSBvZmZzZXRCb3R0b21cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cblxuICAvLyBBRkZJWCBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5hZmZpeCcpXG4gICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuYWZmaXgnLCAoZGF0YSA9IG5ldyBBZmZpeCh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uYWZmaXhcblxuICAkLmZuLmFmZml4ICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uYWZmaXguQ29uc3RydWN0b3IgPSBBZmZpeFxuXG5cbiAgLy8gQUZGSVggTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmFmZml4Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5hZmZpeCA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIEFGRklYIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09XG5cbiAgJCh3aW5kb3cpLm9uKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICQoJ1tkYXRhLXNweT1cImFmZml4XCJdJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHNweSA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhID0gJHNweS5kYXRhKClcblxuICAgICAgZGF0YS5vZmZzZXQgPSBkYXRhLm9mZnNldCB8fCB7fVxuXG4gICAgICBpZiAoZGF0YS5vZmZzZXRCb3R0b20gIT0gbnVsbCkgZGF0YS5vZmZzZXQuYm90dG9tID0gZGF0YS5vZmZzZXRCb3R0b21cbiAgICAgIGlmIChkYXRhLm9mZnNldFRvcCAgICAhPSBudWxsKSBkYXRhLm9mZnNldC50b3AgICAgPSBkYXRhLm9mZnNldFRvcFxuXG4gICAgICBQbHVnaW4uY2FsbCgkc3B5LCBkYXRhKVxuICAgIH0pXG4gIH0pXG5cbn0oalF1ZXJ5KTtcbiIsIi8qKlxuICoganF1ZXJ5Lm1hc2suanNcbiAqIEB2ZXJzaW9uOiB2MS4xNC4xMVxuICogQGF1dGhvcjogSWdvciBFc2NvYmFyXG4gKlxuICogQ3JlYXRlZCBieSBJZ29yIEVzY29iYXIgb24gMjAxMi0wMy0xMC4gUGxlYXNlIHJlcG9ydCBhbnkgYnVnIGF0IGh0dHA6Ly9ibG9nLmlnb3Jlc2NvYmFyLmNvbVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMiBJZ29yIEVzY29iYXIgaHR0cDovL2Jsb2cuaWdvcmVzY29iYXIuY29tXG4gKlxuICogVGhlIE1JVCBMaWNlbnNlIChodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocClcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuICogb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb25cbiAqIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dFxuICogcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsXG4gKiBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlXG4gKiBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZ1xuICogY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICogaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFU1xuICogT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkRcbiAqIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUXG4gKiBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSxcbiAqIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lOR1xuICogRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUlxuICogT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICovXG5cbi8qIGpzaGludCBsYXhicmVhazogdHJ1ZSAqL1xuLyoganNoaW50IG1heGNvbXBsZXhpdHk6MTcgKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBVTUQgKFVuaXZlcnNhbCBNb2R1bGUgRGVmaW5pdGlvbikgcGF0dGVybnMgZm9yIEphdmFTY3JpcHQgbW9kdWxlcyB0aGF0IHdvcmsgZXZlcnl3aGVyZS5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS91bWRqcy91bWQvYmxvYi9tYXN0ZXIvanF1ZXJ5UGx1Z2luQ29tbW9uanMuanNcbihmdW5jdGlvbiAoZmFjdG9yeSwgalF1ZXJ5LCBaZXB0bykge1xuXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmYWN0b3J5KGpRdWVyeSB8fCBaZXB0byk7XG4gICAgfVxuXG59KGZ1bmN0aW9uICgkKSB7XG5cbiAgICB2YXIgTWFzayA9IGZ1bmN0aW9uIChlbCwgbWFzaywgb3B0aW9ucykge1xuXG4gICAgICAgIHZhciBwID0ge1xuICAgICAgICAgICAgaW52YWxpZDogW10sXG4gICAgICAgICAgICBnZXRDYXJldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MgPSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3RybCA9IGVsLmdldCgwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRTZWwgPSBkb2N1bWVudC5zZWxlY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBjU2VsU3RhcnQgPSBjdHJsLnNlbGVjdGlvblN0YXJ0O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIElFIFN1cHBvcnRcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRTZWwgJiYgbmF2aWdhdG9yLmFwcFZlcnNpb24uaW5kZXhPZignTVNJRSAxMCcpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsID0gZFNlbC5jcmVhdGVSYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgLXAudmFsKCkubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IHNlbC50ZXh0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBGaXJlZm94IHN1cHBvcnRcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoY1NlbFN0YXJ0IHx8IGNTZWxTdGFydCA9PT0gJzAnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MgPSBjU2VsU3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0Q2FyZXQ6IGZ1bmN0aW9uKHBvcykge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbC5pcygnOmZvY3VzJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYW5nZSwgY3RybCA9IGVsLmdldCgwKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmlyZWZveCwgV2ViS2l0LCBldGMuLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN0cmwuc2V0U2VsZWN0aW9uUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnNldFNlbGVjdGlvblJhbmdlKHBvcywgcG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8vIElFXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSBjdHJsLmNyZWF0ZVRleHRSYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLm1vdmVFbmQoJ2NoYXJhY3RlcicsIHBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UubW92ZVN0YXJ0KCdjaGFyYWN0ZXInLCBwb3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNlbGVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBldmVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGVsXG4gICAgICAgICAgICAgICAgLm9uKCdrZXlkb3duLm1hc2snLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsLmRhdGEoJ21hc2sta2V5Y29kZScsIGUua2V5Q29kZSB8fCBlLndoaWNoKTtcbiAgICAgICAgICAgICAgICAgICAgZWwuZGF0YSgnbWFzay1wcmV2aXVzLXZhbHVlJywgZWwudmFsKCkpO1xuICAgICAgICAgICAgICAgICAgICBlbC5kYXRhKCdtYXNrLXByZXZpdXMtY2FyZXQtcG9zJywgcC5nZXRDYXJldCgpKTtcbiAgICAgICAgICAgICAgICAgICAgcC5tYXNrRGlnaXRQb3NNYXBPbGQgPSBwLm1hc2tEaWdpdFBvc01hcDtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5vbigkLmpNYXNrR2xvYmFscy51c2VJbnB1dCA/ICdpbnB1dC5tYXNrJyA6ICdrZXl1cC5tYXNrJywgcC5iZWhhdmlvdXIpXG4gICAgICAgICAgICAgICAgLm9uKCdwYXN0ZS5tYXNrIGRyb3AubWFzaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwua2V5ZG93bigpLmtleXVwKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAub24oJ2NoYW5nZS5tYXNrJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgZWwuZGF0YSgnY2hhbmdlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLm9uKCdibHVyLm1hc2snLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBpZiAob2xkVmFsdWUgIT09IHAudmFsKCkgJiYgIWVsLmRhdGEoJ2NoYW5nZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWwuZGF0YSgnY2hhbmdlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC8vIGl0J3MgdmVyeSBpbXBvcnRhbnQgdGhhdCB0aGlzIGNhbGxiYWNrIHJlbWFpbnMgaW4gdGhpcyBwb3NpdGlvblxuICAgICAgICAgICAgICAgIC8vIG90aGVyd2hpc2Ugb2xkVmFsdWUgaXQncyBnb2luZyB0byB3b3JrIGJ1Z2d5XG4gICAgICAgICAgICAgICAgLm9uKCdibHVyLm1hc2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWUgPSBwLnZhbCgpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLy8gc2VsZWN0IGFsbCB0ZXh0IG9uIGZvY3VzXG4gICAgICAgICAgICAgICAgLm9uKCdmb2N1cy5tYXNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2VsZWN0T25Gb2N1cyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJChlLnRhcmdldCkuc2VsZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC8vIGNsZWFyIHRoZSB2YWx1ZSBpZiBpdCBub3QgY29tcGxldGUgdGhlIG1hc2tcbiAgICAgICAgICAgICAgICAub24oJ2ZvY3Vzb3V0Lm1hc2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuY2xlYXJJZk5vdE1hdGNoICYmICFyZWdleE1hc2sudGVzdChwLnZhbCgpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICBwLnZhbCgnJyk7XG4gICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldFJlZ2V4TWFzazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1hc2tDaHVua3MgPSBbXSwgdHJhbnNsYXRpb24sIHBhdHRlcm4sIG9wdGlvbmFsLCByZWN1cnNpdmUsIG9SZWN1cnNpdmUsIHI7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hc2subGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb24gPSBqTWFzay50cmFuc2xhdGlvblttYXNrLmNoYXJBdChpKV07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zbGF0aW9uKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm4gPSB0cmFuc2xhdGlvbi5wYXR0ZXJuLnRvU3RyaW5nKCkucmVwbGFjZSgvLnsxfSR8Xi57MX0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWwgPSB0cmFuc2xhdGlvbi5vcHRpb25hbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY3Vyc2l2ZSA9IHRyYW5zbGF0aW9uLnJlY3Vyc2l2ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlY3Vyc2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tDaHVua3MucHVzaChtYXNrLmNoYXJBdChpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb1JlY3Vyc2l2ZSA9IHtkaWdpdDogbWFzay5jaGFyQXQoaSksIHBhdHRlcm46IHBhdHRlcm59O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrQ2h1bmtzLnB1c2goIW9wdGlvbmFsICYmICFyZWN1cnNpdmUgPyBwYXR0ZXJuIDogKHBhdHRlcm4gKyAnPycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFza0NodW5rcy5wdXNoKG1hc2suY2hhckF0KGkpLnJlcGxhY2UoL1stXFwvXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHIgPSBtYXNrQ2h1bmtzLmpvaW4oJycpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG9SZWN1cnNpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgciA9IHIucmVwbGFjZShuZXcgUmVnRXhwKCcoJyArIG9SZWN1cnNpdmUuZGlnaXQgKyAnKC4qJyArIG9SZWN1cnNpdmUuZGlnaXQgKyAnKT8pJyksICcoJDEpPycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UobmV3IFJlZ0V4cChvUmVjdXJzaXZlLmRpZ2l0LCAnZycpLCBvUmVjdXJzaXZlLnBhdHRlcm4pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKHIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlc3Ryb3lFdmVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGVsLm9mZihbJ2lucHV0JywgJ2tleWRvd24nLCAna2V5dXAnLCAncGFzdGUnLCAnZHJvcCcsICdibHVyJywgJ2ZvY3Vzb3V0JywgJyddLmpvaW4oJy5tYXNrICcpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2YWw6IGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICAgICAgICB2YXIgaXNJbnB1dCA9IGVsLmlzKCdpbnB1dCcpLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2QgPSBpc0lucHV0ID8gJ3ZhbCcgOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIHI7XG5cbiAgICAgICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsW21ldGhvZF0oKSAhPT0gdikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxbbWV0aG9kXSh2KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByID0gZWw7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgciA9IGVsW21ldGhvZF0oKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYWxjdWxhdGVDYXJldFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2xkVmFsID0gZWwuZGF0YSgnbWFzay1wcmV2aXVzLXZhbHVlJykgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbCA9IHAuZ2V0TWFza2VkKCksXG4gICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zTmV3ID0gcC5nZXRDYXJldCgpO1xuICAgICAgICAgICAgICAgIGlmIChvbGRWYWwgIT09IG5ld1ZhbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2FyZXRQb3NPbGQgPSBlbC5kYXRhKCdtYXNrLXByZXZpdXMtY2FyZXQtcG9zJykgfHwgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbEwgPSBuZXdWYWwubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgb2xkVmFsTCA9IG9sZFZhbC5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRzQmVmb3JlQ2FyZXQgPSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0c0FmdGVyQ2FyZXQgPSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0c0JlZm9yZUNhcmV0QWxsID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tEaWdpdHNCZWZvcmVDYXJldEFsbE9sZCA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gMDtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBjYXJldFBvc05ldzsgaSA8IG5ld1ZhbEw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwLm1hc2tEaWdpdFBvc01hcFtpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0c0FmdGVyQ2FyZXQrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IGNhcmV0UG9zTmV3IC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcC5tYXNrRGlnaXRQb3NNYXBbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tEaWdpdHNCZWZvcmVDYXJldCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gY2FyZXRQb3NOZXcgLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHAubWFza0RpZ2l0UG9zTWFwW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0c0JlZm9yZUNhcmV0QWxsKys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBjYXJldFBvc09sZCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocC5tYXNrRGlnaXRQb3NNYXBPbGRbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGxPbGQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYXJldFBvc05ldyA+IG9sZFZhbEwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgY3Vyc29yIGlzIGF0IHRoZSBlbmQga2VlcCBpdCB0aGVyZVxuICAgICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zTmV3ID0gbmV3VmFsTDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjYXJldFBvc09sZCA+PSBjYXJldFBvc05ldyAmJiBjYXJldFBvc09sZCAhPT0gb2xkVmFsTCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwLm1hc2tEaWdpdFBvc01hcE9sZFtjYXJldFBvc05ld10pICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYXJldFBvcyA9IGNhcmV0UG9zTmV3O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldFBvc05ldyAtPSBtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGxPbGQgLSBtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zTmV3IC09IG1hc2tEaWdpdHNCZWZvcmVDYXJldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHAubWFza0RpZ2l0UG9zTWFwW2NhcmV0UG9zTmV3XSkgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldFBvc05ldyA9IGNhcmV0UG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoY2FyZXRQb3NOZXcgPiBjYXJldFBvc09sZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3NOZXcgKz0gbWFza0RpZ2l0c0JlZm9yZUNhcmV0QWxsIC0gbWFza0RpZ2l0c0JlZm9yZUNhcmV0QWxsT2xkO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3NOZXcgKz0gbWFza0RpZ2l0c0FmdGVyQ2FyZXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhcmV0UG9zTmV3O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJlaGF2aW91cjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcbiAgICAgICAgICAgICAgICBwLmludmFsaWQgPSBbXTtcblxuICAgICAgICAgICAgICAgIHZhciBrZXlDb2RlID0gZWwuZGF0YSgnbWFzay1rZXljb2RlJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoJC5pbkFycmF5KGtleUNvZGUsIGpNYXNrLmJ5UGFzc0tleXMpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3VmFsICAgPSBwLmdldE1hc2tlZCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3MgPSBwLmdldENhcmV0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICBwLnNldENhcmV0KHAuY2FsY3VsYXRlQ2FyZXRQb3NpdGlvbigpKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMTApO1xuXG4gICAgICAgICAgICAgICAgICAgIHAudmFsKG5ld1ZhbCk7XG4gICAgICAgICAgICAgICAgICAgIHAuc2V0Q2FyZXQoY2FyZXRQb3MpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcC5jYWxsYmFja3MoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldE1hc2tlZDogZnVuY3Rpb24oc2tpcE1hc2tDaGFycywgdmFsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJ1ZiA9IFtdLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbCA9PT0gdW5kZWZpbmVkID8gcC52YWwoKSA6IHZhbCArICcnLFxuICAgICAgICAgICAgICAgICAgICBtID0gMCwgbWFza0xlbiA9IG1hc2subGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICB2ID0gMCwgdmFsTGVuID0gdmFsdWUubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAxLCBhZGRNZXRob2QgPSAncHVzaCcsXG4gICAgICAgICAgICAgICAgICAgIHJlc2V0UG9zID0gLTEsXG4gICAgICAgICAgICAgICAgICAgIG1hc2tEaWdpdENvdW50ID0gMCxcbiAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0UG9zQXJyID0gW10sXG4gICAgICAgICAgICAgICAgICAgIGxhc3RNYXNrQ2hhcixcbiAgICAgICAgICAgICAgICAgICAgY2hlY2s7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5yZXZlcnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZE1ldGhvZCA9ICd1bnNoaWZ0JztcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gLTE7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RNYXNrQ2hhciA9IDA7XG4gICAgICAgICAgICAgICAgICAgIG0gPSBtYXNrTGVuIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgdiA9IHZhbExlbiAtIDE7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0gPiAtMSAmJiB2ID4gLTE7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdE1hc2tDaGFyID0gbWFza0xlbiAtIDE7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0gPCBtYXNrTGVuICYmIHYgPCB2YWxMZW47XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGxhc3RVbnRyYW5zbGF0ZWRNYXNrQ2hhcjtcbiAgICAgICAgICAgICAgICB3aGlsZSAoY2hlY2soKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWFza0RpZ2l0ID0gbWFzay5jaGFyQXQobSksXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxEaWdpdCA9IHZhbHVlLmNoYXJBdCh2KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uID0gak1hc2sudHJhbnNsYXRpb25bbWFza0RpZ2l0XTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNsYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxEaWdpdC5tYXRjaCh0cmFuc2xhdGlvbi5wYXR0ZXJuKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZlthZGRNZXRob2RdKHZhbERpZ2l0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zbGF0aW9uLnJlY3Vyc2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzZXRQb3MgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldFBvcyA9IG07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobSA9PT0gbGFzdE1hc2tDaGFyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtID0gcmVzZXRQb3MgLSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdE1hc2tDaGFyID09PSByZXNldFBvcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSAtPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSArPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbERpZ2l0ID09PSBsYXN0VW50cmFuc2xhdGVkTWFza0NoYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBtYXRjaGVkIHRoZSBsYXN0IHVudHJhbnNsYXRlZCAocmF3KSBtYXNrIGNoYXJhY3RlciB0aGF0IHdlIGVuY291bnRlcmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGlrZWx5IGFuIGluc2VydCBvZmZzZXQgdGhlIG1hc2sgY2hhcmFjdGVyIGZyb20gdGhlIGxhc3QgZW50cnk7IGZhbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aHJvdWdoIGFuZCBvbmx5IGluY3JlbWVudCB2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0Q291bnQtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0VW50cmFuc2xhdGVkTWFza0NoYXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRyYW5zbGF0aW9uLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSArPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdiAtPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRyYW5zbGF0aW9uLmZhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmW2FkZE1ldGhvZF0odHJhbnNsYXRpb24uZmFsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gKz0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYgLT0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcC5pbnZhbGlkLnB1c2goe3A6IHYsIHY6IHZhbERpZ2l0LCBlOiB0cmFuc2xhdGlvbi5wYXR0ZXJufSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2ICs9IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2tpcE1hc2tDaGFycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZlthZGRNZXRob2RdKG1hc2tEaWdpdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxEaWdpdCA9PT0gbWFza0RpZ2l0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0UG9zQXJyLnB1c2godik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdiArPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RVbnRyYW5zbGF0ZWRNYXNrQ2hhciA9IG1hc2tEaWdpdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRQb3NBcnIucHVzaCh2ICsgbWFza0RpZ2l0Q291bnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tEaWdpdENvdW50Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG0gKz0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGxhc3RNYXNrQ2hhckRpZ2l0ID0gbWFzay5jaGFyQXQobGFzdE1hc2tDaGFyKTtcbiAgICAgICAgICAgICAgICBpZiAobWFza0xlbiA9PT0gdmFsTGVuICsgMSAmJiAhak1hc2sudHJhbnNsYXRpb25bbGFzdE1hc2tDaGFyRGlnaXRdKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1Zi5wdXNoKGxhc3RNYXNrQ2hhckRpZ2l0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgbmV3VmFsID0gYnVmLmpvaW4oJycpO1xuICAgICAgICAgICAgICAgIHAubWFwTWFza2RpZ2l0UG9zaXRpb25zKG5ld1ZhbCwgbWFza0RpZ2l0UG9zQXJyLCB2YWxMZW4pO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXdWYWw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWFwTWFza2RpZ2l0UG9zaXRpb25zOiBmdW5jdGlvbihuZXdWYWwsIG1hc2tEaWdpdFBvc0FyciwgdmFsTGVuKSB7XG4gICAgICAgICAgICAgIHZhciBtYXNrRGlmZiA9IG9wdGlvbnMucmV2ZXJzZSA/IG5ld1ZhbC5sZW5ndGggLSB2YWxMZW4gOiAwO1xuICAgICAgICAgICAgICBwLm1hc2tEaWdpdFBvc01hcCA9IHt9O1xuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hc2tEaWdpdFBvc0Fyci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHAubWFza0RpZ2l0UG9zTWFwW21hc2tEaWdpdFBvc0FycltpXSArIG1hc2tEaWZmXSA9IDE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYWxsYmFja3M6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbCA9IHAudmFsKCksXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZWQgPSB2YWwgIT09IG9sZFZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0QXJncyA9IFt2YWwsIGUsIGVsLCBvcHRpb25zXSxcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbihuYW1lLCBjcml0ZXJpYSwgYXJncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zW25hbWVdID09PSAnZnVuY3Rpb24nICYmIGNyaXRlcmlhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1tuYW1lXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCdvbkNoYW5nZScsIGNoYW5nZWQgPT09IHRydWUsIGRlZmF1bHRBcmdzKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygnb25LZXlQcmVzcycsIGNoYW5nZWQgPT09IHRydWUsIGRlZmF1bHRBcmdzKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygnb25Db21wbGV0ZScsIHZhbC5sZW5ndGggPT09IG1hc2subGVuZ3RoLCBkZWZhdWx0QXJncyk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soJ29uSW52YWxpZCcsIHAuaW52YWxpZC5sZW5ndGggPiAwLCBbdmFsLCBlLCBlbCwgcC5pbnZhbGlkLCBvcHRpb25zXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZWwgPSAkKGVsKTtcbiAgICAgICAgdmFyIGpNYXNrID0gdGhpcywgb2xkVmFsdWUgPSBwLnZhbCgpLCByZWdleE1hc2s7XG5cbiAgICAgICAgbWFzayA9IHR5cGVvZiBtYXNrID09PSAnZnVuY3Rpb24nID8gbWFzayhwLnZhbCgpLCB1bmRlZmluZWQsIGVsLCAgb3B0aW9ucykgOiBtYXNrO1xuXG4gICAgICAgIC8vIHB1YmxpYyBtZXRob2RzXG4gICAgICAgIGpNYXNrLm1hc2sgPSBtYXNrO1xuICAgICAgICBqTWFzay5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgak1hc2sucmVtb3ZlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY2FyZXQgPSBwLmdldENhcmV0KCk7XG4gICAgICAgICAgICBwLmRlc3Ryb3lFdmVudHMoKTtcbiAgICAgICAgICAgIHAudmFsKGpNYXNrLmdldENsZWFuVmFsKCkpO1xuICAgICAgICAgICAgcC5zZXRDYXJldChjYXJldCk7XG4gICAgICAgICAgICByZXR1cm4gZWw7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gZ2V0IHZhbHVlIHdpdGhvdXQgbWFza1xuICAgICAgICBqTWFzay5nZXRDbGVhblZhbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICByZXR1cm4gcC5nZXRNYXNrZWQodHJ1ZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gZ2V0IG1hc2tlZCB2YWx1ZSB3aXRob3V0IHRoZSB2YWx1ZSBiZWluZyBpbiB0aGUgaW5wdXQgb3IgZWxlbWVudFxuICAgICAgICBqTWFzay5nZXRNYXNrZWRWYWwgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgcmV0dXJuIHAuZ2V0TWFza2VkKGZhbHNlLCB2YWwpO1xuICAgICAgICB9O1xuXG4gICAgICAgak1hc2suaW5pdCA9IGZ1bmN0aW9uKG9ubHlNYXNrKSB7XG4gICAgICAgICAgICBvbmx5TWFzayA9IG9ubHlNYXNrIHx8IGZhbHNlO1xuICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgICAgIGpNYXNrLmNsZWFySWZOb3RNYXRjaCAgPSAkLmpNYXNrR2xvYmFscy5jbGVhcklmTm90TWF0Y2g7XG4gICAgICAgICAgICBqTWFzay5ieVBhc3NLZXlzICAgICAgID0gJC5qTWFza0dsb2JhbHMuYnlQYXNzS2V5cztcbiAgICAgICAgICAgIGpNYXNrLnRyYW5zbGF0aW9uICAgICAgPSAkLmV4dGVuZCh7fSwgJC5qTWFza0dsb2JhbHMudHJhbnNsYXRpb24sIG9wdGlvbnMudHJhbnNsYXRpb24pO1xuXG4gICAgICAgICAgICBqTWFzayA9ICQuZXh0ZW5kKHRydWUsIHt9LCBqTWFzaywgb3B0aW9ucyk7XG5cbiAgICAgICAgICAgIHJlZ2V4TWFzayA9IHAuZ2V0UmVnZXhNYXNrKCk7XG5cbiAgICAgICAgICAgIGlmIChvbmx5TWFzaykge1xuICAgICAgICAgICAgICAgIHAuZXZlbnRzKCk7XG4gICAgICAgICAgICAgICAgcC52YWwocC5nZXRNYXNrZWQoKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnBsYWNlaG9sZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsLmF0dHIoJ3BsYWNlaG9sZGVyJyAsIG9wdGlvbnMucGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHRoaXMgaXMgbmVjZXNzYXJ5LCBvdGhlcndpc2UgaWYgdGhlIHVzZXIgc3VibWl0IHRoZSBmb3JtXG4gICAgICAgICAgICAgICAgLy8gYW5kIHRoZW4gcHJlc3MgdGhlIFwiYmFja1wiIGJ1dHRvbiwgdGhlIGF1dG9jb21wbGV0ZSB3aWxsIGVyYXNlXG4gICAgICAgICAgICAgICAgLy8gdGhlIGRhdGEuIFdvcmtzIGZpbmUgb24gSUU5KywgRkYsIE9wZXJhLCBTYWZhcmkuXG4gICAgICAgICAgICAgICAgaWYgKGVsLmRhdGEoJ21hc2snKSkge1xuICAgICAgICAgICAgICAgICAgZWwuYXR0cignYXV0b2NvbXBsZXRlJywgJ29mZicpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGRldGVjdCBpZiBpcyBuZWNlc3NhcnkgbGV0IHRoZSB1c2VyIHR5cGUgZnJlZWx5LlxuICAgICAgICAgICAgICAgIC8vIGZvciBpcyBhIGxvdCBmYXN0ZXIgdGhhbiBmb3JFYWNoLlxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBtYXhsZW5ndGggPSB0cnVlOyBpIDwgbWFzay5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNsYXRpb24gPSBqTWFzay50cmFuc2xhdGlvblttYXNrLmNoYXJBdChpKV07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2xhdGlvbiAmJiB0cmFuc2xhdGlvbi5yZWN1cnNpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heGxlbmd0aCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobWF4bGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsLmF0dHIoJ21heGxlbmd0aCcsIG1hc2subGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwLmRlc3Ryb3lFdmVudHMoKTtcbiAgICAgICAgICAgICAgICBwLmV2ZW50cygpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGNhcmV0ID0gcC5nZXRDYXJldCgpO1xuICAgICAgICAgICAgICAgIHAudmFsKHAuZ2V0TWFza2VkKCkpO1xuICAgICAgICAgICAgICAgIHAuc2V0Q2FyZXQoY2FyZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGpNYXNrLmluaXQoIWVsLmlzKCdpbnB1dCcpKTtcbiAgICB9O1xuXG4gICAgJC5tYXNrV2F0Y2hlcnMgPSB7fTtcbiAgICB2YXIgSFRNTEF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpbnB1dCA9ICQodGhpcyksXG4gICAgICAgICAgICBvcHRpb25zID0ge30sXG4gICAgICAgICAgICBwcmVmaXggPSAnZGF0YS1tYXNrLScsXG4gICAgICAgICAgICBtYXNrID0gaW5wdXQuYXR0cignZGF0YS1tYXNrJyk7XG5cbiAgICAgICAgaWYgKGlucHV0LmF0dHIocHJlZml4ICsgJ3JldmVyc2UnKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5yZXZlcnNlID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbnB1dC5hdHRyKHByZWZpeCArICdjbGVhcmlmbm90bWF0Y2gnKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5jbGVhcklmTm90TWF0Y2ggPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlucHV0LmF0dHIocHJlZml4ICsgJ3NlbGVjdG9uZm9jdXMnKSA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgIG9wdGlvbnMuc2VsZWN0T25Gb2N1cyA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobm90U2FtZU1hc2tPYmplY3QoaW5wdXQsIG1hc2ssIG9wdGlvbnMpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQuZGF0YSgnbWFzaycsIG5ldyBNYXNrKHRoaXMsIG1hc2ssIG9wdGlvbnMpKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbm90U2FtZU1hc2tPYmplY3QgPSBmdW5jdGlvbihmaWVsZCwgbWFzaywgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdmFyIG1hc2tPYmplY3QgPSAkKGZpZWxkKS5kYXRhKCdtYXNrJyksXG4gICAgICAgICAgICBzdHJpbmdpZnkgPSBKU09OLnN0cmluZ2lmeSxcbiAgICAgICAgICAgIHZhbHVlID0gJChmaWVsZCkudmFsKCkgfHwgJChmaWVsZCkudGV4dCgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBtYXNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgbWFzayA9IG1hc2sodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBtYXNrT2JqZWN0ICE9PSAnb2JqZWN0JyB8fCBzdHJpbmdpZnkobWFza09iamVjdC5vcHRpb25zKSAhPT0gc3RyaW5naWZ5KG9wdGlvbnMpIHx8IG1hc2tPYmplY3QubWFzayAhPT0gbWFzaztcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9LFxuICAgIGV2ZW50U3VwcG9ydGVkID0gZnVuY3Rpb24oZXZlbnROYW1lKSB7XG4gICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCBpc1N1cHBvcnRlZDtcblxuICAgICAgICBldmVudE5hbWUgPSAnb24nICsgZXZlbnROYW1lO1xuICAgICAgICBpc1N1cHBvcnRlZCA9IChldmVudE5hbWUgaW4gZWwpO1xuXG4gICAgICAgIGlmICggIWlzU3VwcG9ydGVkICkge1xuICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKGV2ZW50TmFtZSwgJ3JldHVybjsnKTtcbiAgICAgICAgICAgIGlzU3VwcG9ydGVkID0gdHlwZW9mIGVsW2V2ZW50TmFtZV0gPT09ICdmdW5jdGlvbic7XG4gICAgICAgIH1cbiAgICAgICAgZWwgPSBudWxsO1xuXG4gICAgICAgIHJldHVybiBpc1N1cHBvcnRlZDtcbiAgICB9O1xuXG4gICAgJC5mbi5tYXNrID0gZnVuY3Rpb24obWFzaywgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gdGhpcy5zZWxlY3RvcixcbiAgICAgICAgICAgIGdsb2JhbHMgPSAkLmpNYXNrR2xvYmFscyxcbiAgICAgICAgICAgIGludGVydmFsID0gZ2xvYmFscy53YXRjaEludGVydmFsLFxuICAgICAgICAgICAgd2F0Y2hJbnB1dHMgPSBvcHRpb25zLndhdGNoSW5wdXRzIHx8IGdsb2JhbHMud2F0Y2hJbnB1dHMsXG4gICAgICAgICAgICBtYXNrRnVuY3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAobm90U2FtZU1hc2tPYmplY3QodGhpcywgbWFzaywgb3B0aW9ucykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQodGhpcykuZGF0YSgnbWFzaycsIG5ldyBNYXNrKHRoaXMsIG1hc2ssIG9wdGlvbnMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICQodGhpcykuZWFjaChtYXNrRnVuY3Rpb24pO1xuXG4gICAgICAgIGlmIChzZWxlY3RvciAmJiBzZWxlY3RvciAhPT0gJycgJiYgd2F0Y2hJbnB1dHMpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoJC5tYXNrV2F0Y2hlcnNbc2VsZWN0b3JdKTtcbiAgICAgICAgICAgICQubWFza1dhdGNoZXJzW3NlbGVjdG9yXSA9IHNldEludGVydmFsKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkuZmluZChzZWxlY3RvcikuZWFjaChtYXNrRnVuY3Rpb24pO1xuICAgICAgICAgICAgfSwgaW50ZXJ2YWwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAkLmZuLm1hc2tlZCA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhKCdtYXNrJykuZ2V0TWFza2VkVmFsKHZhbCk7XG4gICAgfTtcblxuICAgICQuZm4udW5tYXNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoJC5tYXNrV2F0Y2hlcnNbdGhpcy5zZWxlY3Rvcl0pO1xuICAgICAgICBkZWxldGUgJC5tYXNrV2F0Y2hlcnNbdGhpcy5zZWxlY3Rvcl07XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZGF0YU1hc2sgPSAkKHRoaXMpLmRhdGEoJ21hc2snKTtcbiAgICAgICAgICAgIGlmIChkYXRhTWFzaykge1xuICAgICAgICAgICAgICAgIGRhdGFNYXNrLnJlbW92ZSgpLnJlbW92ZURhdGEoJ21hc2snKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgICQuZm4uY2xlYW5WYWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YSgnbWFzaycpLmdldENsZWFuVmFsKCk7XG4gICAgfTtcblxuICAgICQuYXBwbHlEYXRhTWFzayA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgfHwgJC5qTWFza0dsb2JhbHMubWFza0VsZW1lbnRzO1xuICAgICAgICB2YXIgJHNlbGVjdG9yID0gKHNlbGVjdG9yIGluc3RhbmNlb2YgJCkgPyBzZWxlY3RvciA6ICQoc2VsZWN0b3IpO1xuICAgICAgICAkc2VsZWN0b3IuZmlsdGVyKCQuak1hc2tHbG9iYWxzLmRhdGFNYXNrQXR0cikuZWFjaChIVE1MQXR0cmlidXRlcyk7XG4gICAgfTtcblxuICAgIHZhciBnbG9iYWxzID0ge1xuICAgICAgICBtYXNrRWxlbWVudHM6ICdpbnB1dCx0ZCxzcGFuLGRpdicsXG4gICAgICAgIGRhdGFNYXNrQXR0cjogJypbZGF0YS1tYXNrXScsXG4gICAgICAgIGRhdGFNYXNrOiB0cnVlLFxuICAgICAgICB3YXRjaEludGVydmFsOiAzMDAsXG4gICAgICAgIHdhdGNoSW5wdXRzOiB0cnVlLFxuICAgICAgICAvLyBvbGQgdmVyc2lvbnMgb2YgY2hyb21lIGRvbnQgd29yayBncmVhdCB3aXRoIGlucHV0IGV2ZW50XG4gICAgICAgIHVzZUlucHV0OiAhL0Nocm9tZVxcL1syLTRdWzAtOV18U2Ftc3VuZ0Jyb3dzZXIvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpICYmIGV2ZW50U3VwcG9ydGVkKCdpbnB1dCcpLFxuICAgICAgICB3YXRjaERhdGFNYXNrOiBmYWxzZSxcbiAgICAgICAgYnlQYXNzS2V5czogWzksIDE2LCAxNywgMTgsIDM2LCAzNywgMzgsIDM5LCA0MCwgOTFdLFxuICAgICAgICB0cmFuc2xhdGlvbjoge1xuICAgICAgICAgICAgJzAnOiB7cGF0dGVybjogL1xcZC99LFxuICAgICAgICAgICAgJzknOiB7cGF0dGVybjogL1xcZC8sIG9wdGlvbmFsOiB0cnVlfSxcbiAgICAgICAgICAgICcjJzoge3BhdHRlcm46IC9cXGQvLCByZWN1cnNpdmU6IHRydWV9LFxuICAgICAgICAgICAgJ0EnOiB7cGF0dGVybjogL1thLXpBLVowLTldL30sXG4gICAgICAgICAgICAnUyc6IHtwYXR0ZXJuOiAvW2EtekEtWl0vfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgICQuak1hc2tHbG9iYWxzID0gJC5qTWFza0dsb2JhbHMgfHwge307XG4gICAgZ2xvYmFscyA9ICQuak1hc2tHbG9iYWxzID0gJC5leHRlbmQodHJ1ZSwge30sIGdsb2JhbHMsICQuak1hc2tHbG9iYWxzKTtcblxuICAgIC8vIGxvb2tpbmcgZm9yIGlucHV0cyB3aXRoIGRhdGEtbWFzayBhdHRyaWJ1dGVcbiAgICBpZiAoZ2xvYmFscy5kYXRhTWFzaykge1xuICAgICAgICAkLmFwcGx5RGF0YU1hc2soKTtcbiAgICB9XG5cbiAgICBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCQuak1hc2tHbG9iYWxzLndhdGNoRGF0YU1hc2spIHtcbiAgICAgICAgICAgICQuYXBwbHlEYXRhTWFzaygpO1xuICAgICAgICB9XG4gICAgfSwgZ2xvYmFscy53YXRjaEludGVydmFsKTtcbn0sIHdpbmRvdy5qUXVlcnksIHdpbmRvdy5aZXB0bykpO1xuIiwiKGZ1bmN0aW9uKCQpIHtcbiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcbiAgICAgICAgYXBwLmluaXQoKTtcbiAgICAgICAgYXBwLnV0aWxzKCk7XG4gICAgfSk7XG5cbiAgICB2YXIgYXBwID0ge1xuICAgICAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGFwcC5vc2Nhck1haW5Gb3JtcygpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHV0aWxzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICQoJy5jaGVja2JveCBpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0sIGRpdltkYXRhLXR5cGU9dHJ1ZV9mYWxzZV0gLmFjZi1pbnB1dCBpbnB1dFt0eXBlPWNoZWNrYm94XScpLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCQodGhpcykuaXMoJzpjaGVja2VkJykpIHtcbiAgICAgICAgICAgICAgICAgICAgJCgnLmFjZi1mb3JtLXN1Ym1pdCBpbnB1dFt0eXBlPXN1Ym1pdF0nKS5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgpLnBhcmVudCgpLmFkZENsYXNzKCdzZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICQoJy5hY2YtZm9ybS1zdWJtaXQgaW5wdXRbdHlwZT1zdWJtaXRdJykuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5wYXJlbnQoKS5yZW1vdmVDbGFzcygnc2VsZWN0ZWQnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBvc2Nhck1haW5Gb3JtczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoJCgnI2FjZl9pbnNjcmljb2VzLW9zY2FyLTIwMTgnKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIFx0aWYoICQoJ2RpdltkYXRhLW5hbWU9XCJkZWNsYXJhY2FvXCJdIGlucHV0W3R5cGU9XCJjaGVja2JveFwiXScpLmlzKCc6Y2hlY2tlZCcpICl7XG4gICAgICAgICAgICBcdFx0JCgnZGl2W2RhdGEtbmFtZT1cImRlY2xhcmFjYW9cIl0gaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJykucGFyZW50KCkucGFyZW50KCkuYWRkQ2xhc3MoJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgICBcdH1lbHNle1xuICAgICAgICAgICAgXHRcdCQoJy5hY2YtZm9ybS1zdWJtaXQgaW5wdXRbdHlwZT1zdWJtaXRdJykuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgIFx0fVxuXG4gICAgICAgICAgICAgICAgJCgnI29zY2FyLWFkZC1jYXN0Jykub24oJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjYXN0TmFtZSA9ICQoJyNub21lLWVsZW5jbycpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2FzdE5hdGlvbmFsaXR5ID0gJCgnI25hY2lvbmFsaWRhZGUtZWxlbmNvJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWxpbWl0ZXIgPSAkKCcjZWxlbmNvJykudmFsKCkgPT09ICcnID8gJycgOiAnIHwgJztcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FzdE5hbWUudmFsKCkubGVuZ3RoICYmIGNhc3ROYXRpb25hbGl0eS52YWwoKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNlbGVuY28nKS52YWwoJCgnI2VsZW5jbycpLnZhbCgpICsgZGVsaW1pdGVyICsgY2FzdE5hbWUudmFsKCkgKyAnICgnICsgY2FzdE5hdGlvbmFsaXR5LnZhbCgpICsgJyknKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzdE5hbWUudmFsKCcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc3ROYXRpb25hbGl0eS52YWwoJycpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FzdFZhbCA9ICQoJyNlbGVuY28nKS52YWwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXMgPSBjYXN0VmFsLnNwbGl0KCcgfCAnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI2Nhc3QtaG9sZGVyIHVsJykuaHRtbCgnJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKHJlcykuZWFjaChmdW5jdGlvbihpLCB2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9ICc8bGkgY2xhc3M9XCJsaXN0LWdyb3VwLWl0ZW1cIj48c3Bhbj4nICsgdmFsICsgJzwvc3Bhbj48YSBocmVmPVwiISNcIj48c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlLXNpZ25cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48L3NwYW4+PC9hPjwvbGk+JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjY2FzdC1ob2xkZXIgdWwnKS5hcHBlbmQoaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDYW1wbyB2YXppbycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgICQoJ2JvZHknKS5vbignY2xpY2snLCAnI2Nhc3QtaG9sZGVyIC5saXN0LWdyb3VwIC5saXN0LWdyb3VwLWl0ZW0gYScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2FzdFZhbCA9ICQoJyNlbGVuY28nKS52YWwoKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyciA9IGNhc3RWYWwuc3BsaXQoJyB8ICcpO1xuICAgICAgICAgICAgICAgICAgICBhcnIuc3BsaWNlKGFyci5pbmRleE9mKCQodGhpcykucGFyZW50KCkuZmluZCgnc3BhbicpLnRleHQoKSksIDEpO1xuXG4gICAgICAgICAgICAgICAgICAgICQoJyNlbGVuY28nKS52YWwoJycpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyci5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWxpbWl0ZXIgPSAkKCcjZWxlbmNvJykudmFsKCkgPT09ICcnID8gJycgOiAnIHwgJztcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNlbGVuY28nKS52YWwoJCgnI2VsZW5jbycpLnZhbCgpICsgZGVsaW1pdGVyICsgYXJyW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICQodGhpcykucGFyZW50KCkucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAkKCdkaXZbZGF0YS1uYW1lPVwiZGF0YV9lc3RyZWlhXCJdIGlucHV0JykubWFzaygnMDAvMDAvMDAwMCcpO1xuXG4gICAgICAgICAgICAgICAgdmFyIG1hc2tCZWhhdmlvciA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbC5yZXBsYWNlKC9cXEQvZywgJycpLmxlbmd0aCA9PT0gMTEgPyAnKDAwKSAwMDAwMC0wMDAwJyA6ICcoMDApIDAwMDAtMDAwMDknO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb25LZXlQcmVzczogZnVuY3Rpb24odmFsLCBlLCBmaWVsZCwgb3B0aW9ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLm1hc2sobWFza0JlaGF2aW9yLmFwcGx5KHt9LCBhcmd1bWVudHMpLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICQoJ2RpdltkYXRhLW5hbWU9XCJlbXByZXNhX3RlbGVmb25lXCJdIGlucHV0LCBkaXZbZGF0YS1uYW1lPVwiZW1wcmVzYV9mYXhcIl0gaW5wdXQnKS5tYXNrKG1hc2tCZWhhdmlvciwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgJC5lYWNoKCAkKCdkaXZbZGF0YS1uYW1lPVwiYW5leG9zXCJdIHRhYmxlID4gdGJvZHkgPiB0ci5hY2Ytcm93JyksIGZ1bmN0aW9uKCBpLCByb3dFbCApIHtcbiAgICAgICAgICAgICAgICAgIFx0Ly8gY29uc29sZS5sb2coIHJvd0VsICk7XG4gICAgICAgICAgICAgICAgICBcdCQodGhpcykuZmluZCgnLmZpbGUtd3JhcCAuZmlsZS1pbmZvIHN0cm9uZ1tkYXRhLW5hbWU9XCJ0aXRsZVwiXScpLmFkZENsYXNzKCd4eHgnKTtcbiAgICAgICAgICAgICAgICAgIFx0aWYoICQodGhpcykuZmluZCgnLmZpbGUtd3JhcCAuZmlsZS1pbmZvIHN0cm9uZ1tkYXRhLW5hbWU9XCJ0aXRsZVwiXScpLnRleHQoKSAhPT0gJycgKXtcbiAgICAgICAgICAgICAgICAgIFx0XHQkKHRoaXMpLmZpbmQoJy5maWxlLXdyYXAnKS5zaG93KCk7XG4gICAgICAgICAgICAgICAgICBcdFx0JCh0aGlzKS5maW5kKCcuaGlkZS1pZi12YWx1ZScpLmhpZGUoKTtcbiAgICAgICAgICAgICAgICAgIFx0fVxuXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgkKCcjb3NjYXItdmlkZW8tZm9ybScpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCdjaGFuZ2UnLCAnI29zY2FyLXZpZGVvJywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKVswXS5maWxlc1swXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI29zY2FyLXZpZGVvLW5hbWUnKS50ZXh0KCQodGhpcylbMF0uZmlsZXNbMF0ubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjb3NjYXItdmlkZW8tdXBsb2FkLWJ0bicpLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkKCcjb3NjYXItdmlkZW8tZm9ybSAudmlkZW8tZHJhZy1hcmVhJykuYWRkQ2xhc3MoJ3JlYWR5LXRvLXVwbG9hZCcpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgJCgnI29zY2FyLXZpZGVvLW5hbWUnKS50ZXh0KCcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNvc2Nhci12aWRlby11cGxvYWQtYnRuJykuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJyNvc2Nhci12aWRlby1mb3JtIC52aWRlby1kcmFnLWFyZWEnKS5yZW1vdmVDbGFzcygncmVhZHktdG8tdXBsb2FkJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICQoXCIjb3NjYXItdmlkZW8tZm9ybVwiKS5vbignc3VibWl0JywgZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICQoJyNvc2Nhci12aWRlby1mb3JtIC5teXByb2dyZXNzJykuY3NzKCd3aWR0aCcsICcwJyk7XG4gICAgICAgICAgICAgICAgICAgICQoJyNvc2Nhci12aWRlby1mb3JtIC5tc2cnKS50ZXh0KCcnKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gdmFyIGZpbGVuYW1lID0gJCgnI2ZpbGVuYW1lJykudmFsKCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmaWxlbmFtZSA9ICdGb29iYXInO1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3NjYXJWaWRlbyA9ICQoJyNvc2Nhci12aWRlbycpLnZhbCgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3NjYXJWaWRlbyA9PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ1BvciBmYXZvciwgc2VsZWNpb25lIHVtIGFycXVpdm8gcGFyYSB1cGxvYWQuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZCgnb3NjYXJWaWRlbycsICQoJyNvc2Nhci12aWRlbycpWzBdLmZpbGVzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9ybURhdGEuYXBwZW5kKCdmaWxlbmFtZScsIGZpbGVuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdhY3Rpb24nLCAndXBsb2FkX29zY2FyX3ZpZGVvJyk7XG4gICAgICAgICAgICAgICAgICAgIC8vICQoJyNidG4nKS5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuICAgICAgICAgICAgICAgICAgICAkKCcjb3NjYXItdmlkZW8tZm9ybSAubXNnJykudGV4dCgnVXBsb2FkIGVtIHByb2dyZXNzbywgcG9yIGZhdm9yLCBhZ3VhcmRlLi4uJyk7XG4gICAgICAgICAgICAgICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cmw6IG9zY2FySlMuYWpheHVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGZvcm1EYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0RhdGE6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmVmb3JlU2VuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3VwbG9hZC1zdGF0dXMnKS5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBwYXJ0IGlzIHByb2dyZXNzIGJhclxuICAgICAgICAgICAgICAgICAgICAgICAgeGhyOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeGhyID0gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHhoci51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcihcInByb2dyZXNzXCIsIGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZ0Lmxlbmd0aENvbXB1dGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwZXJjZW50Q29tcGxldGUgPSBldnQubG9hZGVkIC8gZXZ0LnRvdGFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVyY2VudENvbXBsZXRlID0gcGFyc2VJbnQocGVyY2VudENvbXBsZXRlICogMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyNvc2Nhci12aWRlby1mb3JtIC5teXByb2dyZXNzJykudGV4dChwZXJjZW50Q29tcGxldGUgKyAnJScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnI29zY2FyLXZpZGVvLWZvcm0gLm15cHJvZ3Jlc3MnKS5jc3MoJ3dpZHRoJywgcGVyY2VudENvbXBsZXRlICsgJyUnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geGhyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjb3NjYXItdmlkZW8tZm9ybSAubXNnJykuYWRkQ2xhc3MoJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCcjb3NjYXItdmlkZW8tZm9ybSAubXNnJykuaHRtbChkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCQoJyNvc2Nhci1yZWdpc3Rlci1mb3JtJykubGVuZ3RoKSB7XG4gICAgICAgICAgIFx0XHQkKCdpbnB1dFtuYW1lPVwiY25walwiXScpLm1hc2soJzAwLjAwMC4wMDAvMDAwMC0wMCcsIHtyZXZlcnNlOiB0cnVlfSk7IFx0XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgIH07XG59KShqUXVlcnkpOyJdfQ==
