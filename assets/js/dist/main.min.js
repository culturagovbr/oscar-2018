"use strict";!function(t,a,e){"function"==typeof define&&define.amd?define(["jquery"],t):"object"==typeof exports?module.exports=t(require("jquery")):t(a||e)}(function(t){var a=function(a,e,n){var s={invalid:[],getCaret:function(){try{var t,e=0,n=a.get(0),r=document.selection,o=n.selectionStart;return r&&-1===navigator.appVersion.indexOf("MSIE 10")?(t=r.createRange(),t.moveStart("character",-s.val().length),e=t.text.length):(o||"0"===o)&&(e=o),e}catch(t){}},setCaret:function(t){try{if(a.is(":focus")){var e,n=a.get(0);n.setSelectionRange?n.setSelectionRange(t,t):(e=n.createTextRange(),e.collapse(!0),e.moveEnd("character",t),e.moveStart("character",t),e.select())}}catch(t){}},events:function(){a.on("keydown.mask",function(t){a.data("mask-keycode",t.keyCode||t.which),a.data("mask-previus-value",a.val()),a.data("mask-previus-caret-pos",s.getCaret()),s.maskDigitPosMapOld=s.maskDigitPosMap}).on(t.jMaskGlobals.useInput?"input.mask":"keyup.mask",s.behaviour).on("paste.mask drop.mask",function(){setTimeout(function(){a.keydown().keyup()},100)}).on("change.mask",function(){a.data("changed",!0)}).on("blur.mask",function(){i===s.val()||a.data("changed")||a.trigger("change"),a.data("changed",!1)}).on("blur.mask",function(){i=s.val()}).on("focus.mask",function(a){!0===n.selectOnFocus&&t(a.target).select()}).on("focusout.mask",function(){n.clearIfNotMatch&&!r.test(s.val())&&s.val("")})},getRegexMask:function(){for(var t,a,n,s,r,i,c=[],l=0;l<e.length;l++)t=o.translation[e.charAt(l)],t?(a=t.pattern.toString().replace(/.{1}$|^.{1}/g,""),n=t.optional,s=t.recursive,s?(c.push(e.charAt(l)),r={digit:e.charAt(l),pattern:a}):c.push(n||s?a+"?":a)):c.push(e.charAt(l).replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&"));return i=c.join(""),r&&(i=i.replace(new RegExp("("+r.digit+"(.*"+r.digit+")?)"),"($1)?").replace(new RegExp(r.digit,"g"),r.pattern)),new RegExp(i)},destroyEvents:function(){a.off(["input","keydown","keyup","paste","drop","blur","focusout",""].join(".mask "))},val:function(t){var e,n=a.is("input"),s=n?"val":"text";return arguments.length>0?(a[s]()!==t&&a[s](t),e=a):e=a[s](),e},calculateCaretPosition:function(){var t=a.data("mask-previus-value")||"",e=s.getMasked(),n=s.getCaret();if(t!==e){var r=a.data("mask-previus-caret-pos")||0,o=e.length,i=t.length,c=0,l=0,u=0,f=0,k=0;for(k=n;k<o&&s.maskDigitPosMap[k];k++)l++;for(k=n-1;k>=0&&s.maskDigitPosMap[k];k--)c++;for(k=n-1;k>=0;k--)s.maskDigitPosMap[k]&&u++;for(k=r-1;k>=0;k--)s.maskDigitPosMapOld[k]&&f++;if(n>i)n=o;else if(r>=n&&r!==i){if(!s.maskDigitPosMapOld[n]){var v=n;n-=f-u,n-=c,s.maskDigitPosMap[n]&&(n=v)}}else n>r&&(n+=u-f,n+=l)}return n},behaviour:function(e){e=e||window.event,s.invalid=[];var n=a.data("mask-keycode");if(-1===t.inArray(n,o.byPassKeys)){var r=s.getMasked(),i=s.getCaret();return setTimeout(function(){s.setCaret(s.calculateCaretPosition())},10),s.val(r),s.setCaret(i),s.callbacks(e)}},getMasked:function(t,a){var r,i,c=[],l=void 0===a?s.val():a+"",u=0,f=e.length,k=0,v=l.length,d=1,p="push",h=-1,g=0,m=[];n.reverse?(p="unshift",d=-1,r=0,u=f-1,k=v-1,i=function(){return u>-1&&k>-1}):(r=f-1,i=function(){return u<f&&k<v});for(var M;i();){var y=e.charAt(u),b=l.charAt(k),w=o.translation[y];w?(b.match(w.pattern)?(c[p](b),w.recursive&&(-1===h?h=u:u===r&&(u=h-d),r===h&&(u-=d)),u+=d):b===M?(g--,M=void 0):w.optional?(u+=d,k-=d):w.fallback?(c[p](w.fallback),u+=d,k-=d):s.invalid.push({p:k,v:b,e:w.pattern}),k+=d):(t||c[p](y),b===y?(m.push(k),k+=d):(M=y,m.push(k+g),g++),u+=d)}var j=e.charAt(r);f!==v+1||o.translation[j]||c.push(j);var C=c.join("");return s.mapMaskdigitPositions(C,m,v),C},mapMaskdigitPositions:function(t,a,e){var r=n.reverse?t.length-e:0;s.maskDigitPosMap={};for(var o=0;o<a.length;o++)s.maskDigitPosMap[a[o]+r]=1},callbacks:function(t){var r=s.val(),o=r!==i,c=[r,t,a,n],l=function(t,a,e){"function"==typeof n[t]&&a&&n[t].apply(this,e)};l("onChange",!0===o,c),l("onKeyPress",!0===o,c),l("onComplete",r.length===e.length,c),l("onInvalid",s.invalid.length>0,[r,t,a,s.invalid,n])}};a=t(a);var r,o=this,i=s.val();e="function"==typeof e?e(s.val(),void 0,a,n):e,o.mask=e,o.options=n,o.remove=function(){var t=s.getCaret();return s.destroyEvents(),s.val(o.getCleanVal()),s.setCaret(t),a},o.getCleanVal=function(){return s.getMasked(!0)},o.getMaskedVal=function(t){return s.getMasked(!1,t)},o.init=function(i){if(i=i||!1,n=n||{},o.clearIfNotMatch=t.jMaskGlobals.clearIfNotMatch,o.byPassKeys=t.jMaskGlobals.byPassKeys,o.translation=t.extend({},t.jMaskGlobals.translation,n.translation),o=t.extend(!0,{},o,n),r=s.getRegexMask(),i)s.events(),s.val(s.getMasked());else{n.placeholder&&a.attr("placeholder",n.placeholder),a.data("mask")&&a.attr("autocomplete","off");for(var c=0,l=!0;c<e.length;c++){var u=o.translation[e.charAt(c)];if(u&&u.recursive){l=!1;break}}l&&a.attr("maxlength",e.length),s.destroyEvents(),s.events();var f=s.getCaret();s.val(s.getMasked()),s.setCaret(f)}},o.init(!a.is("input"))};t.maskWatchers={};var e=function(){var e=t(this),s={},r=e.attr("data-mask");if(e.attr("data-mask-reverse")&&(s.reverse=!0),e.attr("data-mask-clearifnotmatch")&&(s.clearIfNotMatch=!0),"true"===e.attr("data-mask-selectonfocus")&&(s.selectOnFocus=!0),n(e,r,s))return e.data("mask",new a(this,r,s))},n=function(a,e,n){n=n||{};var s=t(a).data("mask"),r=JSON.stringify,o=t(a).val()||t(a).text();try{return"function"==typeof e&&(e=e(o)),"object"!=typeof s||r(s.options)!==r(n)||s.mask!==e}catch(t){}};t.fn.mask=function(e,s){s=s||{};var r=this.selector,o=t.jMaskGlobals,i=o.watchInterval,c=s.watchInputs||o.watchInputs,l=function(){if(n(this,e,s))return t(this).data("mask",new a(this,e,s))};return t(this).each(l),r&&""!==r&&c&&(clearInterval(t.maskWatchers[r]),t.maskWatchers[r]=setInterval(function(){t(document).find(r).each(l)},i)),this},t.fn.masked=function(t){return this.data("mask").getMaskedVal(t)},t.fn.unmask=function(){return clearInterval(t.maskWatchers[this.selector]),delete t.maskWatchers[this.selector],this.each(function(){var a=t(this).data("mask");a&&a.remove().removeData("mask")})},t.fn.cleanVal=function(){return this.data("mask").getCleanVal()},t.applyDataMask=function(a){a=a||t.jMaskGlobals.maskElements,(a instanceof t?a:t(a)).filter(t.jMaskGlobals.dataMaskAttr).each(e)};var s={maskElements:"input,td,span,div",dataMaskAttr:"*[data-mask]",dataMask:!0,watchInterval:300,watchInputs:!0,useInput:!/Chrome\/[2-4][0-9]|SamsungBrowser/.test(window.navigator.userAgent)&&function(t){var a,e=document.createElement("div");return t="on"+t,a=t in e,a||(e.setAttribute(t,"return;"),a="function"==typeof e[t]),e=null,a}("input"),watchDataMask:!1,byPassKeys:[9,16,17,18,36,37,38,39,40,91],translation:{0:{pattern:/\d/},9:{pattern:/\d/,optional:!0},"#":{pattern:/\d/,recursive:!0},A:{pattern:/[a-zA-Z0-9]/},S:{pattern:/[a-zA-Z]/}}};t.jMaskGlobals=t.jMaskGlobals||{},s=t.jMaskGlobals=t.extend(!0,{},s,t.jMaskGlobals),s.dataMask&&t.applyDataMask(),setInterval(function(){t.jMaskGlobals.watchDataMask&&t.applyDataMask()},s.watchInterval)},window.jQuery,window.Zepto);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS5tYXNrLmpzIl0sIm5hbWVzIjpbImZhY3RvcnkiLCJqUXVlcnkiLCJaZXB0byIsImRlZmluZSIsImFtZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJyZXF1aXJlIiwiJCIsIk1hc2siLCJlbCIsIm1hc2siLCJvcHRpb25zIiwicCIsImludmFsaWQiLCJnZXRDYXJldCIsInNlbCIsInBvcyIsImN0cmwiLCJnZXQiLCJkU2VsIiwiZG9jdW1lbnQiLCJzZWxlY3Rpb24iLCJjU2VsU3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsIm5hdmlnYXRvciIsImFwcFZlcnNpb24iLCJpbmRleE9mIiwiY3JlYXRlUmFuZ2UiLCJtb3ZlU3RhcnQiLCJ2YWwiLCJsZW5ndGgiLCJ0ZXh0IiwiZSIsInNldENhcmV0IiwiaXMiLCJyYW5nZSIsInNldFNlbGVjdGlvblJhbmdlIiwiY3JlYXRlVGV4dFJhbmdlIiwiY29sbGFwc2UiLCJtb3ZlRW5kIiwic2VsZWN0IiwiZXZlbnRzIiwib24iLCJkYXRhIiwia2V5Q29kZSIsIndoaWNoIiwibWFza0RpZ2l0UG9zTWFwT2xkIiwibWFza0RpZ2l0UG9zTWFwIiwiak1hc2tHbG9iYWxzIiwidXNlSW5wdXQiLCJiZWhhdmlvdXIiLCJzZXRUaW1lb3V0Iiwia2V5ZG93biIsImtleXVwIiwib2xkVmFsdWUiLCJ0cmlnZ2VyIiwic2VsZWN0T25Gb2N1cyIsInRhcmdldCIsImNsZWFySWZOb3RNYXRjaCIsInJlZ2V4TWFzayIsInRlc3QiLCJnZXRSZWdleE1hc2siLCJ0cmFuc2xhdGlvbiIsInBhdHRlcm4iLCJvcHRpb25hbCIsInJlY3Vyc2l2ZSIsIm9SZWN1cnNpdmUiLCJyIiwibWFza0NodW5rcyIsImkiLCJqTWFzayIsImNoYXJBdCIsInRvU3RyaW5nIiwicmVwbGFjZSIsInB1c2giLCJkaWdpdCIsImpvaW4iLCJSZWdFeHAiLCJkZXN0cm95RXZlbnRzIiwib2ZmIiwidiIsImlzSW5wdXQiLCJtZXRob2QiLCJhcmd1bWVudHMiLCJjYWxjdWxhdGVDYXJldFBvc2l0aW9uIiwib2xkVmFsIiwibmV3VmFsIiwiZ2V0TWFza2VkIiwiY2FyZXRQb3NOZXciLCJjYXJldFBvc09sZCIsIm5ld1ZhbEwiLCJvbGRWYWxMIiwibWFza0RpZ2l0c0JlZm9yZUNhcmV0IiwibWFza0RpZ2l0c0FmdGVyQ2FyZXQiLCJtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGwiLCJtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGxPbGQiLCJjYXJldFBvcyIsIndpbmRvdyIsImV2ZW50IiwiaW5BcnJheSIsImJ5UGFzc0tleXMiLCJjYWxsYmFja3MiLCJza2lwTWFza0NoYXJzIiwibGFzdE1hc2tDaGFyIiwiY2hlY2siLCJidWYiLCJ2YWx1ZSIsInVuZGVmaW5lZCIsIm0iLCJtYXNrTGVuIiwidmFsTGVuIiwib2Zmc2V0IiwiYWRkTWV0aG9kIiwicmVzZXRQb3MiLCJtYXNrRGlnaXRDb3VudCIsIm1hc2tEaWdpdFBvc0FyciIsInJldmVyc2UiLCJsYXN0VW50cmFuc2xhdGVkTWFza0NoYXIiLCJtYXNrRGlnaXQiLCJ2YWxEaWdpdCIsIm1hdGNoIiwiZmFsbGJhY2siLCJsYXN0TWFza0NoYXJEaWdpdCIsIm1hcE1hc2tkaWdpdFBvc2l0aW9ucyIsIm1hc2tEaWZmIiwiY2hhbmdlZCIsImRlZmF1bHRBcmdzIiwiY2FsbGJhY2siLCJuYW1lIiwiY3JpdGVyaWEiLCJhcmdzIiwiYXBwbHkiLCJ0aGlzIiwicmVtb3ZlIiwiY2FyZXQiLCJnZXRDbGVhblZhbCIsImdldE1hc2tlZFZhbCIsImluaXQiLCJvbmx5TWFzayIsImV4dGVuZCIsInBsYWNlaG9sZGVyIiwiYXR0ciIsIm1heGxlbmd0aCIsIm1hc2tXYXRjaGVycyIsIkhUTUxBdHRyaWJ1dGVzIiwiaW5wdXQiLCJwcmVmaXgiLCJub3RTYW1lTWFza09iamVjdCIsImZpZWxkIiwibWFza09iamVjdCIsInN0cmluZ2lmeSIsIkpTT04iLCJmbiIsInNlbGVjdG9yIiwiZ2xvYmFscyIsImludGVydmFsIiwid2F0Y2hJbnRlcnZhbCIsIndhdGNoSW5wdXRzIiwibWFza0Z1bmN0aW9uIiwiZWFjaCIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImZpbmQiLCJtYXNrZWQiLCJ1bm1hc2siLCJkYXRhTWFzayIsInJlbW92ZURhdGEiLCJjbGVhblZhbCIsImFwcGx5RGF0YU1hc2siLCJtYXNrRWxlbWVudHMiLCJmaWx0ZXIiLCJkYXRhTWFza0F0dHIiLCJ1c2VyQWdlbnQiLCJldmVudE5hbWUiLCJpc1N1cHBvcnRlZCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiLCJ3YXRjaERhdGFNYXNrIiwiMCIsIjkiLCIjIiwiQSIsIlMiXSwibWFwcGluZ3MiOiJBQXFDQSxjQUlDLFNBQVVBLEVBQVNDLEVBQVFDLEdBRUYsa0JBQVhDLFNBQXlCQSxPQUFPQyxJQUN2Q0QsUUFBUSxVQUFXSCxHQUNPLGdCQUFaSyxTQUNkQyxPQUFPRCxRQUFVTCxFQUFRTyxRQUFRLFdBRWpDUCxFQUFRQyxHQUFVQyxJQUd4QixTQUFVTSxHQUVSLEdBQUlDLEdBQU8sU0FBVUMsRUFBSUMsRUFBTUMsR0FFM0IsR0FBSUMsSUFDQUMsV0FDQUMsU0FBVSxXQUNOLElBQ0ksR0FBSUMsR0FDQUMsRUFBTSxFQUNOQyxFQUFPUixFQUFHUyxJQUFJLEdBQ2RDLEVBQU9DLFNBQVNDLFVBQ2hCQyxFQUFZTCxFQUFLTSxjQWFyQixPQVZJSixLQUFxRCxJQUE3Q0ssVUFBVUMsV0FBV0MsUUFBUSxZQUNyQ1gsRUFBTUksRUFBS1EsY0FDWFosRUFBSWEsVUFBVSxhQUFjaEIsRUFBRWlCLE1BQU1DLFFBQ3BDZCxFQUFNRCxFQUFJZ0IsS0FBS0QsU0FHVlIsR0FBMkIsTUFBZEEsS0FDbEJOLEVBQU1NLEdBR0hOLEVBQ1QsTUFBT2dCLE1BRWJDLFNBQVUsU0FBU2pCLEdBQ2YsSUFDSSxHQUFJUCxFQUFHeUIsR0FBRyxVQUFXLENBQ2pCLEdBQUlDLEdBQU9sQixFQUFPUixFQUFHUyxJQUFJLEVBR3JCRCxHQUFLbUIsa0JBQ0xuQixFQUFLbUIsa0JBQWtCcEIsRUFBS0EsSUFFNUJt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U0FBUzJKLGNBQWMsTUFXaEMsT0FUQUYsR0FBWSxLQUFPQSxFQUNuQkMsRUFBZUQsSUFBYXBLLEdBRXRCcUssSUFDRnJLLEVBQUd1SyxhQUFhSCxFQUFXLFdBQzNCQyxFQUF1QyxrQkFBbEJySyxHQUFHb0ssSUFFNUJwSyxFQUFLLEtBRUVxSyxHQTBEMkYsU0FDbEdHLGVBQWUsRUFDZjdFLFlBQWEsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksSUFDaER0QyxhQUNJb0gsR0FBTW5ILFFBQVMsTUFDZm9ILEdBQU1wSCxRQUFTLEtBQU1DLFVBQVUsR0FDL0JvSCxLQUFNckgsUUFBUyxLQUFNRSxXQUFXLEdBQ2hDb0gsR0FBTXRILFFBQVMsZUFDZnVILEdBQU12SCxRQUFTLGFBSXZCeEQsR0FBRXlDLGFBQWV6QyxFQUFFeUMsaUJBQ25CMEcsRUFBVW5KLEVBQUV5QyxhQUFlekMsRUFBRW9JLFFBQU8sS0FBVWUsRUFBU25KLEVBQUV5QyxjQUdyRDBHLEVBQVFXLFVBQ1I5SixFQUFFaUssZ0JBR05QLFlBQVksV0FDSjFKLEVBQUV5QyxhQUFhaUksZUFDZjFLLEVBQUVpSyxpQkFFUGQsRUFBUUUsZ0JBQ1ozRCxPQUFPakcsT0FBUWlHLE9BQU9oRyIsImZpbGUiOiJtYWluLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICoganF1ZXJ5Lm1hc2suanNcbiAqIEB2ZXJzaW9uOiB2MS4xNC4xMVxuICogQGF1dGhvcjogSWdvciBFc2NvYmFyXG4gKlxuICogQ3JlYXRlZCBieSBJZ29yIEVzY29iYXIgb24gMjAxMi0wMy0xMC4gUGxlYXNlIHJlcG9ydCBhbnkgYnVnIGF0IGh0dHA6Ly9ibG9nLmlnb3Jlc2NvYmFyLmNvbVxuICpcbiAqIENvcHlyaWdodCAoYykgMjAxMiBJZ29yIEVzY29iYXIgaHR0cDovL2Jsb2cuaWdvcmVzY29iYXIuY29tXG4gKlxuICogVGhlIE1JVCBMaWNlbnNlIChodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocClcbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvblxuICogb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb25cbiAqIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dFxuICogcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsXG4gKiBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlXG4gKiBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZ1xuICogY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxuICogaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbiAqIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFU1xuICogT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkRcbiAqIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUXG4gKiBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSxcbiAqIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lOR1xuICogRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUlxuICogT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuICovXG5cbi8qIGpzaGludCBsYXhicmVhazogdHJ1ZSAqL1xuLyoganNoaW50IG1heGNvbXBsZXhpdHk6MTcgKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBVTUQgKFVuaXZlcnNhbCBNb2R1bGUgRGVmaW5pdGlvbikgcGF0dGVybnMgZm9yIEphdmFTY3JpcHQgbW9kdWxlcyB0aGF0IHdvcmsgZXZlcnl3aGVyZS5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS91bWRqcy91bWQvYmxvYi9tYXN0ZXIvanF1ZXJ5UGx1Z2luQ29tbW9uanMuanNcbihmdW5jdGlvbiAoZmFjdG9yeSwgalF1ZXJ5LCBaZXB0bykge1xuXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoJ2pxdWVyeScpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmYWN0b3J5KGpRdWVyeSB8fCBaZXB0byk7XG4gICAgfVxuXG59KGZ1bmN0aW9uICgkKSB7XG5cbiAgICB2YXIgTWFzayA9IGZ1bmN0aW9uIChlbCwgbWFzaywgb3B0aW9ucykge1xuXG4gICAgICAgIHZhciBwID0ge1xuICAgICAgICAgICAgaW52YWxpZDogW10sXG4gICAgICAgICAgICBnZXRDYXJldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MgPSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgY3RybCA9IGVsLmdldCgwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRTZWwgPSBkb2N1bWVudC5zZWxlY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICBjU2VsU3RhcnQgPSBjdHJsLnNlbGVjdGlvblN0YXJ0O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIElFIFN1cHBvcnRcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRTZWwgJiYgbmF2aWdhdG9yLmFwcFZlcnNpb24uaW5kZXhPZignTVNJRSAxMCcpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsID0gZFNlbC5jcmVhdGVSYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsLm1vdmVTdGFydCgnY2hhcmFjdGVyJywgLXAudmFsKCkubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IHNlbC50ZXh0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBGaXJlZm94IHN1cHBvcnRcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoY1NlbFN0YXJ0IHx8IGNTZWxTdGFydCA9PT0gJzAnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MgPSBjU2VsU3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0Q2FyZXQ6IGZ1bmN0aW9uKHBvcykge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbC5pcygnOmZvY3VzJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYW5nZSwgY3RybCA9IGVsLmdldCgwKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmlyZWZveCwgV2ViS2l0LCBldGMuLlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN0cmwuc2V0U2VsZWN0aW9uUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHJsLnNldFNlbGVjdGlvblJhbmdlKHBvcywgcG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7IC8vIElFXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSBjdHJsLmNyZWF0ZVRleHRSYW5nZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLm1vdmVFbmQoJ2NoYXJhY3RlcicsIHBvcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UubW92ZVN0YXJ0KCdjaGFyYWN0ZXInLCBwb3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNlbGVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBldmVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGVsXG4gICAgICAgICAgICAgICAgLm9uKCdrZXlkb3duLm1hc2snLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsLmRhdGEoJ21hc2sta2V5Y29kZScsIGUua2V5Q29kZSB8fCBlLndoaWNoKTtcbiAgICAgICAgICAgICAgICAgICAgZWwuZGF0YSgnbWFzay1wcmV2aXVzLXZhbHVlJywgZWwudmFsKCkpO1xuICAgICAgICAgICAgICAgICAgICBlbC5kYXRhKCdtYXNrLXByZXZpdXMtY2FyZXQtcG9zJywgcC5nZXRDYXJldCgpKTtcbiAgICAgICAgICAgICAgICAgICAgcC5tYXNrRGlnaXRQb3NNYXBPbGQgPSBwLm1hc2tEaWdpdFBvc01hcDtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5vbigkLmpNYXNrR2xvYmFscy51c2VJbnB1dCA/ICdpbnB1dC5tYXNrJyA6ICdrZXl1cC5tYXNrJywgcC5iZWhhdmlvdXIpXG4gICAgICAgICAgICAgICAgLm9uKCdwYXN0ZS5tYXNrIGRyb3AubWFzaycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwua2V5ZG93bigpLmtleXVwKCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAub24oJ2NoYW5nZS5tYXNrJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgZWwuZGF0YSgnY2hhbmdlZCcsIHRydWUpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLm9uKCdibHVyLm1hc2snLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBpZiAob2xkVmFsdWUgIT09IHAudmFsKCkgJiYgIWVsLmRhdGEoJ2NoYW5nZWQnKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWwudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWwuZGF0YSgnY2hhbmdlZCcsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC8vIGl0J3MgdmVyeSBpbXBvcnRhbnQgdGhhdCB0aGlzIGNhbGxiYWNrIHJlbWFpbnMgaW4gdGhpcyBwb3NpdGlvblxuICAgICAgICAgICAgICAgIC8vIG90aGVyd2hpc2Ugb2xkVmFsdWUgaXQncyBnb2luZyB0byB3b3JrIGJ1Z2d5XG4gICAgICAgICAgICAgICAgLm9uKCdibHVyLm1hc2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWUgPSBwLnZhbCgpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLy8gc2VsZWN0IGFsbCB0ZXh0IG9uIGZvY3VzXG4gICAgICAgICAgICAgICAgLm9uKCdmb2N1cy5tYXNrJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2VsZWN0T25Gb2N1cyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgJChlLnRhcmdldCkuc2VsZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC8vIGNsZWFyIHRoZSB2YWx1ZSBpZiBpdCBub3QgY29tcGxldGUgdGhlIG1hc2tcbiAgICAgICAgICAgICAgICAub24oJ2ZvY3Vzb3V0Lm1hc2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuY2xlYXJJZk5vdE1hdGNoICYmICFyZWdleE1hc2sudGVzdChwLnZhbCgpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICBwLnZhbCgnJyk7XG4gICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldFJlZ2V4TWFzazogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1hc2tDaHVua3MgPSBbXSwgdHJhbnNsYXRpb24sIHBhdHRlcm4sIG9wdGlvbmFsLCByZWN1cnNpdmUsIG9SZWN1cnNpdmUsIHI7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hc2subGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNsYXRpb24gPSBqTWFzay50cmFuc2xhdGlvblttYXNrLmNoYXJBdChpKV07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zbGF0aW9uKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm4gPSB0cmFuc2xhdGlvbi5wYXR0ZXJuLnRvU3RyaW5nKCkucmVwbGFjZSgvLnsxfSR8Xi57MX0vZywgJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWwgPSB0cmFuc2xhdGlvbi5vcHRpb25hbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY3Vyc2l2ZSA9IHRyYW5zbGF0aW9uLnJlY3Vyc2l2ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlY3Vyc2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tDaHVua3MucHVzaChtYXNrLmNoYXJBdChpKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb1JlY3Vyc2l2ZSA9IHtkaWdpdDogbWFzay5jaGFyQXQoaSksIHBhdHRlcm46IHBhdHRlcm59O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrQ2h1bmtzLnB1c2goIW9wdGlvbmFsICYmICFyZWN1cnNpdmUgPyBwYXR0ZXJuIDogKHBhdHRlcm4gKyAnPycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFza0NodW5rcy5wdXNoKG1hc2suY2hhckF0KGkpLnJlcGxhY2UoL1stXFwvXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHIgPSBtYXNrQ2h1bmtzLmpvaW4oJycpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG9SZWN1cnNpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgciA9IHIucmVwbGFjZShuZXcgUmVnRXhwKCcoJyArIG9SZWN1cnNpdmUuZGlnaXQgKyAnKC4qJyArIG9SZWN1cnNpdmUuZGlnaXQgKyAnKT8pJyksICcoJDEpPycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UobmV3IFJlZ0V4cChvUmVjdXJzaXZlLmRpZ2l0LCAnZycpLCBvUmVjdXJzaXZlLnBhdHRlcm4pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKHIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlc3Ryb3lFdmVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGVsLm9mZihbJ2lucHV0JywgJ2tleWRvd24nLCAna2V5dXAnLCAncGFzdGUnLCAnZHJvcCcsICdibHVyJywgJ2ZvY3Vzb3V0JywgJyddLmpvaW4oJy5tYXNrICcpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2YWw6IGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICAgICAgICB2YXIgaXNJbnB1dCA9IGVsLmlzKCdpbnB1dCcpLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2QgPSBpc0lucHV0ID8gJ3ZhbCcgOiAndGV4dCcsXG4gICAgICAgICAgICAgICAgICAgIHI7XG5cbiAgICAgICAgICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsW21ldGhvZF0oKSAhPT0gdikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxbbWV0aG9kXSh2KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByID0gZWw7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgciA9IGVsW21ldGhvZF0oKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYWxjdWxhdGVDYXJldFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2xkVmFsID0gZWwuZGF0YSgnbWFzay1wcmV2aXVzLXZhbHVlJykgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbCA9IHAuZ2V0TWFza2VkKCksXG4gICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zTmV3ID0gcC5nZXRDYXJldCgpO1xuICAgICAgICAgICAgICAgIGlmIChvbGRWYWwgIT09IG5ld1ZhbCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2FyZXRQb3NPbGQgPSBlbC5kYXRhKCdtYXNrLXByZXZpdXMtY2FyZXQtcG9zJykgfHwgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbEwgPSBuZXdWYWwubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgICAgb2xkVmFsTCA9IG9sZFZhbC5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRzQmVmb3JlQ2FyZXQgPSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0c0FmdGVyQ2FyZXQgPSAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0c0JlZm9yZUNhcmV0QWxsID0gMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tEaWdpdHNCZWZvcmVDYXJldEFsbE9sZCA9IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gMDtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBjYXJldFBvc05ldzsgaSA8IG5ld1ZhbEw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwLm1hc2tEaWdpdFBvc01hcFtpXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0c0FmdGVyQ2FyZXQrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IGNhcmV0UG9zTmV3IC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcC5tYXNrRGlnaXRQb3NNYXBbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tEaWdpdHNCZWZvcmVDYXJldCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gY2FyZXRQb3NOZXcgLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHAubWFza0RpZ2l0UG9zTWFwW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0c0JlZm9yZUNhcmV0QWxsKys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBjYXJldFBvc09sZCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocC5tYXNrRGlnaXRQb3NNYXBPbGRbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGxPbGQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYXJldFBvc05ldyA+IG9sZFZhbEwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgY3Vyc29yIGlzIGF0IHRoZSBlbmQga2VlcCBpdCB0aGVyZVxuICAgICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zTmV3ID0gbmV3VmFsTDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjYXJldFBvc09sZCA+PSBjYXJldFBvc05ldyAmJiBjYXJldFBvc09sZCAhPT0gb2xkVmFsTCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwLm1hc2tEaWdpdFBvc01hcE9sZFtjYXJldFBvc05ld10pICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYXJldFBvcyA9IGNhcmV0UG9zTmV3O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldFBvc05ldyAtPSBtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGxPbGQgLSBtYXNrRGlnaXRzQmVmb3JlQ2FyZXRBbGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0UG9zTmV3IC09IG1hc2tEaWdpdHNCZWZvcmVDYXJldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHAubWFza0RpZ2l0UG9zTWFwW2NhcmV0UG9zTmV3XSkgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldFBvc05ldyA9IGNhcmV0UG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoY2FyZXRQb3NOZXcgPiBjYXJldFBvc09sZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3NOZXcgKz0gbWFza0RpZ2l0c0JlZm9yZUNhcmV0QWxsIC0gbWFza0RpZ2l0c0JlZm9yZUNhcmV0QWxsT2xkO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3NOZXcgKz0gbWFza0RpZ2l0c0FmdGVyQ2FyZXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhcmV0UG9zTmV3O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJlaGF2aW91cjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgIGUgPSBlIHx8IHdpbmRvdy5ldmVudDtcbiAgICAgICAgICAgICAgICBwLmludmFsaWQgPSBbXTtcblxuICAgICAgICAgICAgICAgIHZhciBrZXlDb2RlID0gZWwuZGF0YSgnbWFzay1rZXljb2RlJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoJC5pbkFycmF5KGtleUNvZGUsIGpNYXNrLmJ5UGFzc0tleXMpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3VmFsICAgPSBwLmdldE1hc2tlZCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXRQb3MgPSBwLmdldENhcmV0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICBwLnNldENhcmV0KHAuY2FsY3VsYXRlQ2FyZXRQb3NpdGlvbigpKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMTApO1xuXG4gICAgICAgICAgICAgICAgICAgIHAudmFsKG5ld1ZhbCk7XG4gICAgICAgICAgICAgICAgICAgIHAuc2V0Q2FyZXQoY2FyZXRQb3MpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcC5jYWxsYmFja3MoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldE1hc2tlZDogZnVuY3Rpb24oc2tpcE1hc2tDaGFycywgdmFsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJ1ZiA9IFtdLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbCA9PT0gdW5kZWZpbmVkID8gcC52YWwoKSA6IHZhbCArICcnLFxuICAgICAgICAgICAgICAgICAgICBtID0gMCwgbWFza0xlbiA9IG1hc2subGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICB2ID0gMCwgdmFsTGVuID0gdmFsdWUubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAxLCBhZGRNZXRob2QgPSAncHVzaCcsXG4gICAgICAgICAgICAgICAgICAgIHJlc2V0UG9zID0gLTEsXG4gICAgICAgICAgICAgICAgICAgIG1hc2tEaWdpdENvdW50ID0gMCxcbiAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0UG9zQXJyID0gW10sXG4gICAgICAgICAgICAgICAgICAgIGxhc3RNYXNrQ2hhcixcbiAgICAgICAgICAgICAgICAgICAgY2hlY2s7XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5yZXZlcnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZE1ldGhvZCA9ICd1bnNoaWZ0JztcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gLTE7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RNYXNrQ2hhciA9IDA7XG4gICAgICAgICAgICAgICAgICAgIG0gPSBtYXNrTGVuIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgdiA9IHZhbExlbiAtIDE7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0gPiAtMSAmJiB2ID4gLTE7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdE1hc2tDaGFyID0gbWFza0xlbiAtIDE7XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0gPCBtYXNrTGVuICYmIHYgPCB2YWxMZW47XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGxhc3RVbnRyYW5zbGF0ZWRNYXNrQ2hhcjtcbiAgICAgICAgICAgICAgICB3aGlsZSAoY2hlY2soKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWFza0RpZ2l0ID0gbWFzay5jaGFyQXQobSksXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxEaWdpdCA9IHZhbHVlLmNoYXJBdCh2KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zbGF0aW9uID0gak1hc2sudHJhbnNsYXRpb25bbWFza0RpZ2l0XTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNsYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxEaWdpdC5tYXRjaCh0cmFuc2xhdGlvbi5wYXR0ZXJuKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZlthZGRNZXRob2RdKHZhbERpZ2l0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zbGF0aW9uLnJlY3Vyc2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzZXRQb3MgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldFBvcyA9IG07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobSA9PT0gbGFzdE1hc2tDaGFyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtID0gcmVzZXRQb3MgLSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdE1hc2tDaGFyID09PSByZXNldFBvcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSAtPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSArPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbERpZ2l0ID09PSBsYXN0VW50cmFuc2xhdGVkTWFza0NoYXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBtYXRjaGVkIHRoZSBsYXN0IHVudHJhbnNsYXRlZCAocmF3KSBtYXNrIGNoYXJhY3RlciB0aGF0IHdlIGVuY291bnRlcmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGlrZWx5IGFuIGluc2VydCBvZmZzZXQgdGhlIG1hc2sgY2hhcmFjdGVyIGZyb20gdGhlIGxhc3QgZW50cnk7IGZhbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0aHJvdWdoIGFuZCBvbmx5IGluY3JlbWVudCB2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0Q291bnQtLTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0VW50cmFuc2xhdGVkTWFza0NoYXIgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRyYW5zbGF0aW9uLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSArPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdiAtPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRyYW5zbGF0aW9uLmZhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmW2FkZE1ldGhvZF0odHJhbnNsYXRpb24uZmFsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gKz0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYgLT0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcC5pbnZhbGlkLnB1c2goe3A6IHYsIHY6IHZhbERpZ2l0LCBlOiB0cmFuc2xhdGlvbi5wYXR0ZXJufSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2ICs9IG9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2tpcE1hc2tDaGFycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZlthZGRNZXRob2RdKG1hc2tEaWdpdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxEaWdpdCA9PT0gbWFza0RpZ2l0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza0RpZ2l0UG9zQXJyLnB1c2godik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdiArPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RVbnRyYW5zbGF0ZWRNYXNrQ2hhciA9IG1hc2tEaWdpdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrRGlnaXRQb3NBcnIucHVzaCh2ICsgbWFza0RpZ2l0Q291bnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tEaWdpdENvdW50Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG0gKz0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGxhc3RNYXNrQ2hhckRpZ2l0ID0gbWFzay5jaGFyQXQobGFzdE1hc2tDaGFyKTtcbiAgICAgICAgICAgICAgICBpZiAobWFza0xlbiA9PT0gdmFsTGVuICsgMSAmJiAhak1hc2sudHJhbnNsYXRpb25bbGFzdE1hc2tDaGFyRGlnaXRdKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1Zi5wdXNoKGxhc3RNYXNrQ2hhckRpZ2l0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgbmV3VmFsID0gYnVmLmpvaW4oJycpO1xuICAgICAgICAgICAgICAgIHAubWFwTWFza2RpZ2l0UG9zaXRpb25zKG5ld1ZhbCwgbWFza0RpZ2l0UG9zQXJyLCB2YWxMZW4pO1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXdWYWw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWFwTWFza2RpZ2l0UG9zaXRpb25zOiBmdW5jdGlvbihuZXdWYWwsIG1hc2tEaWdpdFBvc0FyciwgdmFsTGVuKSB7XG4gICAgICAgICAgICAgIHZhciBtYXNrRGlmZiA9IG9wdGlvbnMucmV2ZXJzZSA/IG5ld1ZhbC5sZW5ndGggLSB2YWxMZW4gOiAwO1xuICAgICAgICAgICAgICBwLm1hc2tEaWdpdFBvc01hcCA9IHt9O1xuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hc2tEaWdpdFBvc0Fyci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHAubWFza0RpZ2l0UG9zTWFwW21hc2tEaWdpdFBvc0FycltpXSArIG1hc2tEaWZmXSA9IDE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYWxsYmFja3M6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbCA9IHAudmFsKCksXG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZWQgPSB2YWwgIT09IG9sZFZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0QXJncyA9IFt2YWwsIGUsIGVsLCBvcHRpb25zXSxcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbihuYW1lLCBjcml0ZXJpYSwgYXJncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zW25hbWVdID09PSAnZnVuY3Rpb24nICYmIGNyaXRlcmlhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1tuYW1lXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCdvbkNoYW5nZScsIGNoYW5nZWQgPT09IHRydWUsIGRlZmF1bHRBcmdzKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygnb25LZXlQcmVzcycsIGNoYW5nZWQgPT09IHRydWUsIGRlZmF1bHRBcmdzKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygnb25Db21wbGV0ZScsIHZhbC5sZW5ndGggPT09IG1hc2subGVuZ3RoLCBkZWZhdWx0QXJncyk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soJ29uSW52YWxpZCcsIHAuaW52YWxpZC5sZW5ndGggPiAwLCBbdmFsLCBlLCBlbCwgcC5pbnZhbGlkLCBvcHRpb25zXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZWwgPSAkKGVsKTtcbiAgICAgICAgdmFyIGpNYXNrID0gdGhpcywgb2xkVmFsdWUgPSBwLnZhbCgpLCByZWdleE1hc2s7XG5cbiAgICAgICAgbWFzayA9IHR5cGVvZiBtYXNrID09PSAnZnVuY3Rpb24nID8gbWFzayhwLnZhbCgpLCB1bmRlZmluZWQsIGVsLCAgb3B0aW9ucykgOiBtYXNrO1xuXG4gICAgICAgIC8vIHB1YmxpYyBtZXRob2RzXG4gICAgICAgIGpNYXNrLm1hc2sgPSBtYXNrO1xuICAgICAgICBqTWFzay5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgak1hc2sucmVtb3ZlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgY2FyZXQgPSBwLmdldENhcmV0KCk7XG4gICAgICAgICAgICBwLmRlc3Ryb3lFdmVudHMoKTtcbiAgICAgICAgICAgIHAudmFsKGpNYXNrLmdldENsZWFuVmFsKCkpO1xuICAgICAgICAgICAgcC5zZXRDYXJldChjYXJldCk7XG4gICAgICAgICAgICByZXR1cm4gZWw7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gZ2V0IHZhbHVlIHdpdGhvdXQgbWFza1xuICAgICAgICBqTWFzay5nZXRDbGVhblZhbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICByZXR1cm4gcC5nZXRNYXNrZWQodHJ1ZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gZ2V0IG1hc2tlZCB2YWx1ZSB3aXRob3V0IHRoZSB2YWx1ZSBiZWluZyBpbiB0aGUgaW5wdXQgb3IgZWxlbWVudFxuICAgICAgICBqTWFzay5nZXRNYXNrZWRWYWwgPSBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgcmV0dXJuIHAuZ2V0TWFza2VkKGZhbHNlLCB2YWwpO1xuICAgICAgICB9O1xuXG4gICAgICAgak1hc2suaW5pdCA9IGZ1bmN0aW9uKG9ubHlNYXNrKSB7XG4gICAgICAgICAgICBvbmx5TWFzayA9IG9ubHlNYXNrIHx8IGZhbHNlO1xuICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgICAgIGpNYXNrLmNsZWFySWZOb3RNYXRjaCAgPSAkLmpNYXNrR2xvYmFscy5jbGVhcklmTm90TWF0Y2g7XG4gICAgICAgICAgICBqTWFzay5ieVBhc3NLZXlzICAgICAgID0gJC5qTWFza0dsb2JhbHMuYnlQYXNzS2V5cztcbiAgICAgICAgICAgIGpNYXNrLnRyYW5zbGF0aW9uICAgICAgPSAkLmV4dGVuZCh7fSwgJC5qTWFza0dsb2JhbHMudHJhbnNsYXRpb24sIG9wdGlvbnMudHJhbnNsYXRpb24pO1xuXG4gICAgICAgICAgICBqTWFzayA9ICQuZXh0ZW5kKHRydWUsIHt9LCBqTWFzaywgb3B0aW9ucyk7XG5cbiAgICAgICAgICAgIHJlZ2V4TWFzayA9IHAuZ2V0UmVnZXhNYXNrKCk7XG5cbiAgICAgICAgICAgIGlmIChvbmx5TWFzaykge1xuICAgICAgICAgICAgICAgIHAuZXZlbnRzKCk7XG4gICAgICAgICAgICAgICAgcC52YWwocC5nZXRNYXNrZWQoKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnBsYWNlaG9sZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsLmF0dHIoJ3BsYWNlaG9sZGVyJyAsIG9wdGlvbnMucGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHRoaXMgaXMgbmVjZXNzYXJ5LCBvdGhlcndpc2UgaWYgdGhlIHVzZXIgc3VibWl0IHRoZSBmb3JtXG4gICAgICAgICAgICAgICAgLy8gYW5kIHRoZW4gcHJlc3MgdGhlIFwiYmFja1wiIGJ1dHRvbiwgdGhlIGF1dG9jb21wbGV0ZSB3aWxsIGVyYXNlXG4gICAgICAgICAgICAgICAgLy8gdGhlIGRhdGEuIFdvcmtzIGZpbmUgb24gSUU5KywgRkYsIE9wZXJhLCBTYWZhcmkuXG4gICAgICAgICAgICAgICAgaWYgKGVsLmRhdGEoJ21hc2snKSkge1xuICAgICAgICAgICAgICAgICAgZWwuYXR0cignYXV0b2NvbXBsZXRlJywgJ29mZicpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGRldGVjdCBpZiBpcyBuZWNlc3NhcnkgbGV0IHRoZSB1c2VyIHR5cGUgZnJlZWx5LlxuICAgICAgICAgICAgICAgIC8vIGZvciBpcyBhIGxvdCBmYXN0ZXIgdGhhbiBmb3JFYWNoLlxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBtYXhsZW5ndGggPSB0cnVlOyBpIDwgbWFzay5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNsYXRpb24gPSBqTWFzay50cmFuc2xhdGlvblttYXNrLmNoYXJBdChpKV07XG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2xhdGlvbiAmJiB0cmFuc2xhdGlvbi5yZWN1cnNpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heGxlbmd0aCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobWF4bGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsLmF0dHIoJ21heGxlbmd0aCcsIG1hc2subGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwLmRlc3Ryb3lFdmVudHMoKTtcbiAgICAgICAgICAgICAgICBwLmV2ZW50cygpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGNhcmV0ID0gcC5nZXRDYXJldCgpO1xuICAgICAgICAgICAgICAgIHAudmFsKHAuZ2V0TWFza2VkKCkpO1xuICAgICAgICAgICAgICAgIHAuc2V0Q2FyZXQoY2FyZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGpNYXNrLmluaXQoIWVsLmlzKCdpbnB1dCcpKTtcbiAgICB9O1xuXG4gICAgJC5tYXNrV2F0Y2hlcnMgPSB7fTtcbiAgICB2YXIgSFRNTEF0dHJpYnV0ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpbnB1dCA9ICQodGhpcyksXG4gICAgICAgICAgICBvcHRpb25zID0ge30sXG4gICAgICAgICAgICBwcmVmaXggPSAnZGF0YS1tYXNrLScsXG4gICAgICAgICAgICBtYXNrID0gaW5wdXQuYXR0cignZGF0YS1tYXNrJyk7XG5cbiAgICAgICAgaWYgKGlucHV0LmF0dHIocHJlZml4ICsgJ3JldmVyc2UnKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5yZXZlcnNlID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbnB1dC5hdHRyKHByZWZpeCArICdjbGVhcmlmbm90bWF0Y2gnKSkge1xuICAgICAgICAgICAgb3B0aW9ucy5jbGVhcklmTm90TWF0Y2ggPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlucHV0LmF0dHIocHJlZml4ICsgJ3NlbGVjdG9uZm9jdXMnKSA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgIG9wdGlvbnMuc2VsZWN0T25Gb2N1cyA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobm90U2FtZU1hc2tPYmplY3QoaW5wdXQsIG1hc2ssIG9wdGlvbnMpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQuZGF0YSgnbWFzaycsIG5ldyBNYXNrKHRoaXMsIG1hc2ssIG9wdGlvbnMpKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbm90U2FtZU1hc2tPYmplY3QgPSBmdW5jdGlvbihmaWVsZCwgbWFzaywgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdmFyIG1hc2tPYmplY3QgPSAkKGZpZWxkKS5kYXRhKCdtYXNrJyksXG4gICAgICAgICAgICBzdHJpbmdpZnkgPSBKU09OLnN0cmluZ2lmeSxcbiAgICAgICAgICAgIHZhbHVlID0gJChmaWVsZCkudmFsKCkgfHwgJChmaWVsZCkudGV4dCgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBtYXNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgbWFzayA9IG1hc2sodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBtYXNrT2JqZWN0ICE9PSAnb2JqZWN0JyB8fCBzdHJpbmdpZnkobWFza09iamVjdC5vcHRpb25zKSAhPT0gc3RyaW5naWZ5KG9wdGlvbnMpIHx8IG1hc2tPYmplY3QubWFzayAhPT0gbWFzaztcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9LFxuICAgIGV2ZW50U3VwcG9ydGVkID0gZnVuY3Rpb24oZXZlbnROYW1lKSB7XG4gICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLCBpc1N1cHBvcnRlZDtcblxuICAgICAgICBldmVudE5hbWUgPSAnb24nICsgZXZlbnROYW1lO1xuICAgICAgICBpc1N1cHBvcnRlZCA9IChldmVudE5hbWUgaW4gZWwpO1xuXG4gICAgICAgIGlmICggIWlzU3VwcG9ydGVkICkge1xuICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKGV2ZW50TmFtZSwgJ3JldHVybjsnKTtcbiAgICAgICAgICAgIGlzU3VwcG9ydGVkID0gdHlwZW9mIGVsW2V2ZW50TmFtZV0gPT09ICdmdW5jdGlvbic7XG4gICAgICAgIH1cbiAgICAgICAgZWwgPSBudWxsO1xuXG4gICAgICAgIHJldHVybiBpc1N1cHBvcnRlZDtcbiAgICB9O1xuXG4gICAgJC5mbi5tYXNrID0gZnVuY3Rpb24obWFzaywgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gdGhpcy5zZWxlY3RvcixcbiAgICAgICAgICAgIGdsb2JhbHMgPSAkLmpNYXNrR2xvYmFscyxcbiAgICAgICAgICAgIGludGVydmFsID0gZ2xvYmFscy53YXRjaEludGVydmFsLFxuICAgICAgICAgICAgd2F0Y2hJbnB1dHMgPSBvcHRpb25zLndhdGNoSW5wdXRzIHx8IGdsb2JhbHMud2F0Y2hJbnB1dHMsXG4gICAgICAgICAgICBtYXNrRnVuY3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBpZiAobm90U2FtZU1hc2tPYmplY3QodGhpcywgbWFzaywgb3B0aW9ucykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQodGhpcykuZGF0YSgnbWFzaycsIG5ldyBNYXNrKHRoaXMsIG1hc2ssIG9wdGlvbnMpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICQodGhpcykuZWFjaChtYXNrRnVuY3Rpb24pO1xuXG4gICAgICAgIGlmIChzZWxlY3RvciAmJiBzZWxlY3RvciAhPT0gJycgJiYgd2F0Y2hJbnB1dHMpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoJC5tYXNrV2F0Y2hlcnNbc2VsZWN0b3JdKTtcbiAgICAgICAgICAgICQubWFza1dhdGNoZXJzW3NlbGVjdG9yXSA9IHNldEludGVydmFsKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkuZmluZChzZWxlY3RvcikuZWFjaChtYXNrRnVuY3Rpb24pO1xuICAgICAgICAgICAgfSwgaW50ZXJ2YWwpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICAkLmZuLm1hc2tlZCA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhKCdtYXNrJykuZ2V0TWFza2VkVmFsKHZhbCk7XG4gICAgfTtcblxuICAgICQuZm4udW5tYXNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoJC5tYXNrV2F0Y2hlcnNbdGhpcy5zZWxlY3Rvcl0pO1xuICAgICAgICBkZWxldGUgJC5tYXNrV2F0Y2hlcnNbdGhpcy5zZWxlY3Rvcl07XG4gICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZGF0YU1hc2sgPSAkKHRoaXMpLmRhdGEoJ21hc2snKTtcbiAgICAgICAgICAgIGlmIChkYXRhTWFzaykge1xuICAgICAgICAgICAgICAgIGRhdGFNYXNrLnJlbW92ZSgpLnJlbW92ZURhdGEoJ21hc2snKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgICQuZm4uY2xlYW5WYWwgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YSgnbWFzaycpLmdldENsZWFuVmFsKCk7XG4gICAgfTtcblxuICAgICQuYXBwbHlEYXRhTWFzayA9IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgfHwgJC5qTWFza0dsb2JhbHMubWFza0VsZW1lbnRzO1xuICAgICAgICB2YXIgJHNlbGVjdG9yID0gKHNlbGVjdG9yIGluc3RhbmNlb2YgJCkgPyBzZWxlY3RvciA6ICQoc2VsZWN0b3IpO1xuICAgICAgICAkc2VsZWN0b3IuZmlsdGVyKCQuak1hc2tHbG9iYWxzLmRhdGFNYXNrQXR0cikuZWFjaChIVE1MQXR0cmlidXRlcyk7XG4gICAgfTtcblxuICAgIHZhciBnbG9iYWxzID0ge1xuICAgICAgICBtYXNrRWxlbWVudHM6ICdpbnB1dCx0ZCxzcGFuLGRpdicsXG4gICAgICAgIGRhdGFNYXNrQXR0cjogJypbZGF0YS1tYXNrXScsXG4gICAgICAgIGRhdGFNYXNrOiB0cnVlLFxuICAgICAgICB3YXRjaEludGVydmFsOiAzMDAsXG4gICAgICAgIHdhdGNoSW5wdXRzOiB0cnVlLFxuICAgICAgICAvLyBvbGQgdmVyc2lvbnMgb2YgY2hyb21lIGRvbnQgd29yayBncmVhdCB3aXRoIGlucHV0IGV2ZW50XG4gICAgICAgIHVzZUlucHV0OiAhL0Nocm9tZVxcL1syLTRdWzAtOV18U2Ftc3VuZ0Jyb3dzZXIvLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpICYmIGV2ZW50U3VwcG9ydGVkKCdpbnB1dCcpLFxuICAgICAgICB3YXRjaERhdGFNYXNrOiBmYWxzZSxcbiAgICAgICAgYnlQYXNzS2V5czogWzksIDE2LCAxNywgMTgsIDM2LCAzNywgMzgsIDM5LCA0MCwgOTFdLFxuICAgICAgICB0cmFuc2xhdGlvbjoge1xuICAgICAgICAgICAgJzAnOiB7cGF0dGVybjogL1xcZC99LFxuICAgICAgICAgICAgJzknOiB7cGF0dGVybjogL1xcZC8sIG9wdGlvbmFsOiB0cnVlfSxcbiAgICAgICAgICAgICcjJzoge3BhdHRlcm46IC9cXGQvLCByZWN1cnNpdmU6IHRydWV9LFxuICAgICAgICAgICAgJ0EnOiB7cGF0dGVybjogL1thLXpBLVowLTldL30sXG4gICAgICAgICAgICAnUyc6IHtwYXR0ZXJuOiAvW2EtekEtWl0vfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgICQuak1hc2tHbG9iYWxzID0gJC5qTWFza0dsb2JhbHMgfHwge307XG4gICAgZ2xvYmFscyA9ICQuak1hc2tHbG9iYWxzID0gJC5leHRlbmQodHJ1ZSwge30sIGdsb2JhbHMsICQuak1hc2tHbG9iYWxzKTtcblxuICAgIC8vIGxvb2tpbmcgZm9yIGlucHV0cyB3aXRoIGRhdGEtbWFzayBhdHRyaWJ1dGVcbiAgICBpZiAoZ2xvYmFscy5kYXRhTWFzaykge1xuICAgICAgICAkLmFwcGx5RGF0YU1hc2soKTtcbiAgICB9XG5cbiAgICBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCQuak1hc2tHbG9iYWxzLndhdGNoRGF0YU1hc2spIHtcbiAgICAgICAgICAgICQuYXBwbHlEYXRhTWFzaygpO1xuICAgICAgICB9XG4gICAgfSwgZ2xvYmFscy53YXRjaEludGVydmFsKTtcbn0sIHdpbmRvdy5qUXVlcnksIHdpbmRvdy5aZXB0bykpO1xuIl19
